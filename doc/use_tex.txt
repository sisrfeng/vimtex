==============================================================================

TOC

    Default mappings        |vimtex-default-mappings|
    Options                 |vimtex-options|
    Commands                |vimtex-commands|
    Map definitions         |vimtex-mappings|
    Insert mode mappings    |vimtex-imaps|
    Events                  |vimtex-events|

------------------------------------------------------------------------------
DEFAULT MAPPINGS                                      *vimtex-default-mappings*

    VimTeX is designed to be controlled by a selection of mappings.
    Note,
    that most of the mappings are also available as commands,
    see  |vimtex-commands|.

    Many of the mappings utilize the |maplocalleader|.
    The right-hand sides are provided as <plug>-mappings,
    see |using-<plug>|.
    For any given <plug> map,
    the  default mapping will only be created if it does not already exist. This means
    that  if a user defines a custom mapping, e.g. with
        nmap <space>li <plug>(vimtex-info)

        then the corresponding default left-hand side will not be mapped.

    If one prefers,
    one may disable all the default mappings through the option |g:vimtex_mappings_enabled|.
    Custom mappings for all desired features must then be defined through the listed RHS <plug>-maps or
    by mapping the available  commands.

    In the below list of mappings,
    LHS is the default mapping,
    RHS is the corresponding <plug>-maps,
    and MODE indicates in which
    vim mode the mappings are valid.
    See |map-modes| for an explanation of the various modes.
    The indicator refers to the prefix of the corresponding map command,  e.g.
    `n`  refers to an |nmap|, `nx` refers to both |nmap| and |xmap|, and so on.

    In addition to the mappings listed below,
    VimTeX provides convenient insert mode mappings to make it easier and faster to type mathematical equations.
    This feature is explained in more detail later,
    see |vimtex-imaps|.

        ---------------------------------------------------------------------
         LHS              RHS                                          MODE
        ---------------------------------------------------------------------
         <localleader>li  |<plug>(vimtex-info)|                           `n`
         <localleader>lI  |<plug>(vimtex-info-full)|                      `n`
         <localleader>lt  |<plug>(vimtex-toc-open)|                       `n`
         <localleader>lT  |<plug>(vimtex-toc-toggle)|                     `n`
         <localleader>lq  |<plug>(vimtex-log)|                            `n`
         <localleader>lv  |<plug>(vimtex-view)|                           `n`
         <localleader>lr  |<plug>(vimtex-reverse-search)|                 `n`
         <localleader>ll  |<plug>(vimtex-compile)|                        `n`
         <localleader>lL  |<plug>(vimtex-compile-selected)|               `nx`
         <localleader>lk  |<plug>(vimtex-stop)|                           `n`
         <localleader>lK  |<plug>(vimtex-stop-all)|                       `n`
         <localleader>le  |<plug>(vimtex-errors)|                         `n`
         <localleader>lo  |<plug>(vimtex-compile-output)|                 `n`
         <localleader>lg  |<plug>(vimtex-status)|                         `n`
         <localleader>lG  |<plug>(vimtex-status-all)|                     `n`
         <localleader>lc  |<plug>(vimtex-clean)|                          `n`
         <localleader>lC  |<plug>(vimtex-clean-full)|                     `n`
         <localleader>lm  |<plug>(vimtex-imaps-list)|                     `n`
         <localleader>lx  |<plug>(vimtex-reload)|                         `n`
         <localleader>lX  |<plug>(vimtex-reload-state)|                   `n`
         <localleader>ls  |<plug>(vimtex-toggle-main)|                    `n`
         <localleader>la  |<plug>(vimtex-context-menu)|                   `n`
         dse              |<plug>(vimtex-env-delete)|                     `n`
         dsc              |<plug>(vimtex-cmd-delete)|                     `n`
         ds$              |<plug>(vimtex-env-delete-math)|                `n`
         dsd              |<plug>(vimtex-delim-delete)|                   `n`
         cse              |<plug>(vimtex-env-change)|                     `n`
         csc              |<plug>(vimtex-cmd-change)|                     `n`
         cs$              |<plug>(vimtex-env-change-math)|                `n`
         csd              |<plug>(vimtex-delim-change-math)|              `n`
         tsf              |<plug>(vimtex-cmd-toggle-frac)|                `nx`
         tsc              |<plug>(vimtex-cmd-toggle-star)|                `n`
         tse              |<plug>(vimtex-env-toggle-star)|                `n`
         ts$              |<plug>(vimtex-env-toggle-math)|                `n`
         tsd              |<plug>(vimtex-delim-toggle-modifier)|          `nx`
         tsD              |<plug>(vimtex-delim-toggle-modifier-reverse)|  `nx`
         <F7>             |<plug>(vimtex-cmd-create)|                     `nxi`
         ]]               |<plug>(vimtex-delim-close)|                    `i`
         <F8>             |<plug>(vimtex-delim-add-modifiers)|            `n`
         ac               |<plug>(vimtex-ac)|                             `xo`
         ic               |<plug>(vimtex-ic)|                             `xo`
         ad               |<plug>(vimtex-ad)|                             `xo`
         id               |<plug>(vimtex-id)|                             `xo`
         ae               |<plug>(vimtex-ae)|                             `xo`
         ie               |<plug>(vimtex-ie)|                             `xo`
         a$               |<plug>(vimtex-a$)|                             `xo`
         i$               |<plug>(vimtex-i$)|                             `xo`
         aP               |<plug>(vimtex-aP)|                             `xo`
         iP               |<plug>(vimtex-iP)|                             `xo`
         am               |<plug>(vimtex-am)|                             `xo`
         im               |<plug>(vimtex-im)|                             `xo`
         %                |<plug>(vimtex-%)|                              `nxo`
         ]]               |<plug>(vimtex-]])|                             `nxo`
         ][               |<plug>(vimtex-][)|                             `nxo`
         []               |<plug>(vimtex-[])|                             `nxo`
         [[               |<plug>(vimtex-[[)|                             `nxo`
         ]m               |<plug>(vimtex-]m)|                             `nxo`
         ]M               |<plug>(vimtex-]M)|                             `nxo`
         [m               |<plug>(vimtex-[m)|                             `nxo`
         [M               |<plug>(vimtex-[M)|                             `nxo`
         ]n               |<plug>(vimtex-]n)|                             `nxo`
         ]N               |<plug>(vimtex-]N)|                             `nxo`
         [n               |<plug>(vimtex-[n)|                             `nxo`
         [N               |<plug>(vimtex-[N)|                             `nxo`
         ]r               |<plug>(vimtex-]r)|                             `nxo`
         ]R               |<plug>(vimtex-]R)|                             `nxo`
         [r               |<plug>(vimtex-[r)|                             `nxo`
         [R               |<plug>(vimtex-[R)|                             `nxo`
         ]/               |<plug>(vimtex-]/|                              `nxo`
         ]*               |<plug>(vimtex-]star|                           `nxo`
         [/               |<plug>(vimtex-[/|                              `nxo`
         [*               |<plug>(vimtex-[star|                           `nxo`
         K                |<plug>(vimtex-doc-package)|                    `n`
        ---------------------------------------------------------------------

------------------------------------------------------------------------------
OPTIONS                                                        *vimtex-options*

    *g:vimtex_enabled*
        Set to 0 to disable VimTeX.
        Default value: Undefined.

    *g:vimtex_cache_root*
        Specify the cache directory for VimTeX.

        Default value:
            `'$XDG_CACHE_HOME/vimtex'`   if `$XDG_CACHE_HOME` is defined
            `'~/.cache/vimtex'`          otherwise

    *g:vimtex_cache_persistent*
        Specify whether to use persistent caching.

        Default value: 1



    *g:vimtex_compiler_generic*
        This dictionary allows customization of the |vimtex-compiler-generic|
        compiler. This compiler is, as the name hints, generic. It allows to specify
        a custom command to run for compilation. As for the other compilers, the
        configuration values set by the user will take precedence over the default
        values.

        This could be used e.g. to run `make` or something like that.

        Default value:


            let g:vimtex_compiler_generic = {
                    \ 'command' : '',
                    \}

        The default value shows which entries may be changed. Here the different
        keys are explained in more detail:

        command
            This is the command to run to start compilation. This can be any command,
            and the command is run from the project root.

    *g:vimtex_context_pdf_viewer*
        Specify PDF viewer to use to open PDF files with the |vimtex-context-menu|, for
        instance for citations with the `file` key (see |vimtex-context-citation|).

        The default value is based on the |vimtex-view| and is determined as follows:

            * If |g:vimtex_view_method| is not `general`, then the specified viewer is
                used. However, the viewer will by default start without any of the
                regular options.

            * Else fall back to the value of |g:vimtex_view_general_viewer|.

    *g:vimtex_delim_list*
        A dictionary that defines the pairs of delimiters that are recognized by
        VimTeX for various commands and functions. The dictionary contains 5 sub
        dictionaries:

            `env_tex`     Pairs of environment delimiters in normal TeX mode
            `env_math`    Pairs of special math environment delimiters
            `delim_tex`   Pairs of delimiters in normal TeX mode
            `delim_math`  Pairs of delimiters in math mode
            `mods`        Pairs of modifiers for math mode delimiters

        Each entry is a dictionary with the following format:


            {
            \ 'name' : [
            \   ['\(', '\)'],
            \   ['\[', '\]'],
            \   ['$$', '$$'],
            \   ['$', '$'],
            \ ],
            \ 're' : [
            \   ['\\(', '\\)'],
            \   ['\\\@<!\\\[', '\\\]'],
            \   ['\$\$', '\$\$'],
            \   ['\$', '\$'],
            \ ],
            \}

        Here the `name` entry is a list of delimiter pairs as they are typed, and the
        `re` entry is a corresponding list of regexes that matches the delimiters.

        The default value should generally suffice for most people. If one wants to
        overwrite one of the main entries, e.g. the `mods` entry, one can do:


            let g:vimtex_delim_list = {
                        \ 'mods' : {
                        \   'name' : [ ... ],
                        \ }
                        \}

        Here the `re` entry was not provided, in which case it will be automatically
        generated based on the `name` entry. The remaining 4 entries will remain
        the default value.

        Some people may be interested in adding support for e.g. german or french
        quotation marks. These may be added by extending the default `delim_tex`
        entries, like this:


            let g:vimtex_delim_list = {
                    \ 'delim_tex' : {
                    \   'name' : [
                    \     ['[', ']'],
                    \     ['{', '}'],
                    \     ['\glq', '\grq'],
                    \     ['\glqq', '\grqq'],
                    \     ['\flq', '\frq'],
                    \     ['\flqq', '\frqq'],
                    \    ]
                    \  }
                    \}

    *g:vimtex#delim#lists*
    *g:vimtex#delim#re*
        This option is parsed on plugin initialization into a new variable,
                    |g:vimtex#delim#lists| where the `re` entries are added and that also
                    contains some combinations such as `tex_all`, `delim_all`, and `all`.
                    Further, the option is also used as a basis for the variable
                    |g:vimtex#delim#re|, which contains full regexes for matching opening
                    and/or closing delimiters of the desired type.

        Default value: See `s:init_delim_lists()` in `autoload/vimtex/delim.vim`.

    *g:vimtex_delim_toggle_mod_list*
        Defines a list of delimiter modifiers to toggle through using the maps:

            |<plug>(vimtex-delim-toggle-modifier)|
            |<plug>(vimtex-delim-toggle-modifier-reverse)|

        The list must be a subset of the `mods` entry of |g:vimtex_delim_list|,
        otherwise the toggle will not work properly.  Thus, if one wants to toggle
        non-standard delimiters, then one must also update the above option.

        Example 1: to toggle between no modifiers, the `\left/\right` pair, and the
        `\mleft/\mright` pair, one may use the following options:


            let g:vimtex_delim_list = {'mods' : {}}
            let g:vimtex_delim_list.mods.name = [
                        \ ['\left', '\right'],
                        \ ['\mleft', '\mright'],
                        \ ['\bigl', '\bigr'],
                        \ ['\Bigl', '\Bigr'],
                        \ ['\biggl', '\biggr'],
                        \ ['\Biggl', '\Biggr'],
                        \ ['\big', '\big'],
                        \ ['\Big', '\Big'],
                        \ ['\bigg', '\bigg'],
                        \ ['\Bigg', '\Bigg'],
                        \]
            let g:vimtex_delim_toggle_mod_list = [
                \ ['\left', '\right'],
                \ ['\mleft', '\mright'],
                \]

        Example 2: to step through no modifiers, and the pairs `\bigl/\bigr`,
        `\Bigl/\Bigr`, `\biggl/\biggr`, and `\Biggl/\Biggr`, one may use:


            let g:vimtex_delim_toggle_mod_list = [
                \ ['\bigl', '\bigr'],
                \ ['\Bigl', '\Bigr'],
                \ ['\biggl', '\biggr'],
                \ ['\Biggl', '\Biggr'],
                \]

        Default value: `[['\left', '\right']]`

    *g:vimtex_delim_timeout*
    *g:vimtex_delim_insert_timeout*
        Timeout (in milliseconds) when searching for matching delimiters. It is used
        for the {timeout} argument of |search()|-like function calls. If the option
        is increased it will make the matching more accurate, at the expense of
        potential lags. The default value should work well for most people.

        Default values: 300, 60 (respectively)

    *g:vimtex_delim_stopline*
        A tolerance for the number of lines to search for matching delimiters in
        each direction. It is used in an expression for the {stopline} argument of
        |search()| function calls. If the option is increased it will make the
        matching more accurate, at the expense of potential lags. The default value
        should work well for most people.

        Default value: 500

    *g:vimtex_disable_recursive_main_file_detection*
        In rare cases, the recursive method of finding the main file in multi file
        projects may be slow. This might happen for instance when there are _very_
        many tex files in the directory tree that is searched. In such cases, one
        may disable the recursive method by setting this variable to a nonzero
        value.

        Default value: 0

    *g:vimtex_doc_handlers*
        With this option, one may specify a list of custom documentation handlers.
        The following pre-made handlers are available:

            'vimtex#doc#handler#texdoc'  Open documentation with local `texdoc`.
            Fallback                     Open documentation online through
                                                                     http://texdoc.net/pkg/packagename.

        To use the local `texdoc`, set:


            let g:vimtex_doc_handlers = ['vimtex#doc#handlers#texdoc']

        A handler is a function that takes a single |Dict| argument with the
        following keys:

            type
                One of `documentclass`, `usepackage`, `command` or `word`.

            candidates
                A list of detected packages (for the types `command` and `usepackage`,
                this list may be larger than 1.

            selected
                The currently selected entry. This is the package name that will
                ultimately be passed to the lookup function.

            name
                If the type is `command`, this is the name of the command. Else it is
                not defined.

        Each handler in the list will be tried until a handler provides a return
        value of 1 or |v:true|. One may thus add handlers that only makes minor
        modifications of the context and passes it on to the next handler.

        The context may have multiple candidates and the handlers are applied before
        any internal selection is made. Thus the `selected` key may be not defined.
        This allows the handler to perform the selection itself. One may manually
        call the selection function `vimtex#doc#make_selection` to get a simple
        selection menu.

        The following shows a generic example of how to write a custom handler:


            let g:vimtex_doc_handlers = ['MyHandler']

            fun! MyHandler(context)
                call vimtex#doc#make_selection(a:context)
                if empty(a:context.selected) | return 0 | endif

                exe  '!myhandler' a:context.selected '&'
                return 1
            endf

        Default value: []

    *g:vimtex_echo_verbose_input*
        For the set of operator mappings that change a surrounding type [0],
        VimTeX by default prints some information about what you are doing while
        waiting for user input.
        For advanced/experienced users,
            one will not need  this info and
            can get a slightly cleaner UI by disabling this feature
            (set  the option 0).

        Default value: 1

        [0]: This affects the following mappings:
            |<plug>(vimtex-env-change)|        (default map: `cse`)
            |<plug>(vimtex-env-change-math)|   (default map: `cs$`)
            |<plug>(vimtex-cmd-change)|        (default map: `csc`)
            |<plug>(vimtex-delim-change-math)| (default map: `csd`)

    *g:vimtex_env_change_autofill*
        If enabled, the current environment value is used as a default input for
        |<plug>(vimtex-env-change)| and |<plug>(vimtex-env-change-math)|. Some users
        may find this useful in order to quickly change from things like `align` to
        `aligned`.

        If enabled, one may erase the autofilled content with |c_ctrl-u| (i.e.
                    `<c-u>`).

        Default: 0

    *g:vimtex_env_toggle_math_map*
        Specify toggle map for |<plug>(vimtex-env-toggle-math)|. You can use this to
        change the desired toggle sequence.

        Default value:


            let g:vimtex_env_toggle_math_map = {
                        \ '$': '\[',
                        \ '\[': 'equation',
                        \ '$$': '\[',
                        \ '\(': '$',
                        \}

    *g:vimtex_fold_enabled*
        Use this option to enable folding. More detailed info can be found in the
        section |vimtex-folding|.

        Default value: 0

    *g:vimtex_fold_manual*
        With this option enabled, VimTeX uses |fold-manual| as the main
        |foldmethod|.  It still uses the |foldexpr| function to compute the fold
        levels, but it only computes the fold levels on demand, see
        |:VimtexRefreshFolds| and |vimtex-zx|.

        The reasoning behind this option is that the |fold-expr| method of folding
        may sometimes be slow, e.g. for long lines and large files. |fold-manual| is
        very fast.

        An alternative to this method of speeding up is to use a dedicated plugin
        for optimizing the fold functionality, see e.g.
        https://github.com/Konfekt/FastFold.

        Default value: 0

    *g:vimtex_fold_levelmarker*

        Use custom section symbol for folding.

        Default value: '*'

    *g:vimtex_fold_types*
    *g:vimtex_fold_types_defaults*
        This is a dictionary where each key configures the corresponding fold type.
        One may disable the fold types by setting the key `enabled` to 0. If a type
        can be configured with a list of patterns or similar, the patterns assume
        that one uses very magic regexes (see |\v|).

        Each entry in |g:vimtex_fold_types| is combined with the corresponding entry
        of |g:vimtex_fold_types_defaults|. If there are conflicting entries, then
        |g:vimtex_fold_types| take precedence. This way, it is easy to customize
        various fold types without touching those that can stay with default
        configuration.

        The available fold types (and keys) are listed below, and the default
        configurations are listed at the bottom.

            <preamble>          Fold the preamble.

            <sections>          Fold sections and parts of documents. Can be
                                                    configured with the following extra keys:
                                                    - `parse_levels`: Whether to use detailed parsing to
                                                                                    set fold text levels similar to how
                                                                                    they are displayed in |vimtex-toc|.
                                                                                    Disabled by default, because it uses
                                                                                    more resources and may be slow.
                                                    - `sections`:     List of sections that should be folded.
                                                    - `parts`:        List of parts that should be folded.

                                                    When a LaTeX document is opened, the document is
                                                    parsed in order to define the highest fold level based
                                                    on which parts (such as frontmatter, backmatter, and
                                                    appendix) and section types (parts, chapter, section,
                                                    etc.) are present. This parsing is done automatically
                                                    every time the folds are recomputed, if there are any
                                                    changes to the file.

                                                    The fold function also recognizes "fake" sections.
                                                    That is, it parses comments similar to:


                                                        % Fakepart title
                                                        % Fakechapter title
                                                        % Fakesection title
                                                        % Fakesubsection title

                                                    The fake sections are folded at the same level as the
                                                    corresponding "real" sections. The fold title is the
                                                    provided title with the `Fake...` part prepended.

            <comments>          Fold multiline comments. This is disabled by default.

            <markers>           Fold on vim-style markers inside comments, that is,
                                                    pairs of e.g. `{{{` and `}}}` (the default markers).
                                                    |regex| patterns for the opening and closing markers
                                                    may be customized with the keys:
                                                    - `open`
                                                    - `close`

                                                    Patterns are only searched inside comments!

            <envs>              Fold environments.
                                                    Can be further configured with a blacklist and
                                                    whitelist of environments to be folded.

                                                    The `document` environment will never be folded.

            <env_options>       This fold type allows to fold the `\begin` command if
                                                    it contains a long optional argument. Consider the
                                                    following example:


                                                        \begin{axis}[    --->    \begin{axis}[...]
                                                                width=6cm,
                                                                height=8cm,
                                                                ...,
                                                        ]

                                                    Here the `axis` environment must not be otherwise
                                                    folded through the <envs> fold type.

            <items>             `\item` blocks in itemize like environments. The
                                                    recognized environments are the same as specified by
                                                    |g:vimtex_indent_lists|.

            <cmd_single>        Fold long commands with a single argument. E.g.:


                                                        \hypersetup{    --->    \hypersetup{...}
                                                            option 1,
                                                            ...,
                                                            option n
                                                            }

            <cmd_single_opt>    Fold commands that opens with a single long optional
                                                    argument that is followed by a short "real" argument.
                                                    E.g.:


                                                        \usepackage[    --->    \usepackage[...]{name}
                                                            option 1,
                                                            ...,
                                                            option n
                                                            ]{name}

            <cmd_multi>         Fold commands that start with a short regular argument
                                                    and continue with long optional and/or regular
                                                    arguments. E.g.:


                                                        \newcommand{\xx}[3]{    --->    \newcommand{\xx} ...
                                                            Hello #1, #2, and #3.
                                                        }

            <cmd_addplot>       Folding of the `\addplot` series of commands from the
                                                    `pgfplots` package. E.g.:


                                                        \addplot+[] table[] {    --->    \addplot+[] table[] {...};
                                                            table data
                                                        };

        As an example, the following configuration will disable folding of the
        preamble, as well as the `figure` and `table` environments.


            let  g:vimtex_fold_types = {
                         \ 'preamble' : {'enabled' : 0},
                         \ 'envs' : {
                         \   'blacklist' : ['figure', 'table'],
                         \ },
                         \}

        Default value:

            let g:vimtex_fold_types = {}
            let g:vimtex_fold_types_defaults = {
                        \ 'preamble' : {},
                        \ 'items' : {},
                        \ 'comments' : {'enabled' : 0},
                        \ 'envs' : {
                        \   'blacklist' : [],   !!! This is a list of strings
                        \   'whitelist' : [],   !!! This is a list of strings
                        \ },
                        \ 'env_options' : {},
                        \ 'markers' : {},
                        \ 'sections' : {
                        \   'parse_levels' : 0,
                        \   'sections' : [      !!! This is a list of (very magic) regexes
                        \     '%(add)?part',
                        \     '%(chapter|addchap)',
                        \     '%(section|addsec)',
                        \     'subsection',
                        \     'subsubsection',
                        \   ],
                        \   'parts' : [         !!! This is a list of regexes
                        \     'appendix',
                        \     'frontmatter',
                        \     'mainmatter',
                        \     'backmatter',
                        \   ],
                        \ },
                        \ 'cmd_single' : {
                        \   'cmds' : [          !!! This is a list of regexes
                        \     'hypersetup',
                        \     'tikzset',
                        \     'pgfplotstableread',
                        \     'lstset',
                        \   ],
                        \ },
                        \ 'cmd_single_opt' : {
                        \   'cmds' : [          !!! This is a list of regexes
                        \     'usepackage',
                        \     'includepdf',
                        \   ],
                        \ },
                        \ 'cmd_multi' : {
                        \   'cmds' : [          !!! This is a list of regexes
                        \     '%(re)?new%(command|environment)',
                        \     'providecommand',
                        \     'presetkeys',
                        \     'Declare%(Multi|Auto)?CiteCommand',
                        \     'Declare%(Index)?%(Field|List|Name)%(Format|Alias)',
                        \   ],
                        \ },
                        \ 'cmd_addplot' : {
                        \   'cmds' : [          !!! This is a list of regexes
                        \     'addplot[+3]?',
                        \   ],
                        \ },
                        \}

    *g:vimtex_fold_bib_enabled*
        Use this option to enable/disable folding in .bib files.

        The default value is the same as |g:vimtex_fold_enabled|. Thus, it
                    suffices to enabled folds for tex files to also enable for bib files.
                    But if you want to enable in tex files but keep bib folding disabled,
                    then you must set this option to 0 or |v:false|.

        Default value: |g:vimtex_fold_enabled|

    *g:vimtex_fold_bib_max_key_width*
        This option is used to specify a length to truncate identifiers (e.g.
        `@article{Key}`) to, in the foldtext for bib files. The default of 0
        indicates no truncation, i.e. VimTeX will parse the bib file to determine
        the longest such identifier and align all foldtext titles such that they
        come after the identifiers.

        If you have a handful of cite keys that are exceptionally long, setting this
        manually may be useful as it makes sure that there is some space for the
        titles in the foldtext.

        Default value: 0

    *g:vimtex_format_enabled*
        If enabled, VimTeX uses a custom |formatexpr| that should handle inline
        comments and environments. That is, if it is enabled, comments at end of
        lines will not be joined with the |gq| command, and environments like
        `equation` will not be joined/changed.

        Default value: 0

    *g:vimtex_format_border_begin*
    *g:vimtex_format_border_end*
        Regular expressions that define the "borders" of a region that should be
        formatted. The defaults should be more or less OK for most people, but some
        people may be interested in adjusting to handle more complex LaTeX code.

        Default value: See source in `/autoload/vimtex/options.vim`

    *g:vimtex_grammar_textidote*
        This option is used to configure the `textidote` grammar and document checker,
        see |vimtex-grammar-textidote|. It is a dictionary with the following keys

            jar
                The path to `textidote.jar`. This key must be defined if you want to use
                the TeXtidote wrapper! Please If one installs `textidote` with
                a package manager e.g. in some common Linux distributions, the `.jar`
                file might be missing. If so, it should be possible to download it
                manually.

            args
                 Specify arguments to be passed to the TeXtidote grammar checker.

        Default:


                let g:vimtex_grammar_textidote = {
                            \ 'jar': '',
                            \ 'args': '',
                            \}

    *g:vimtex_grammar_vlty*
        This option is used to
        configure the `vlty` grammar checker.
        This checker relies on the Python package `YaLafi` in combination
        with the proofreading software `LanguageTool` (see |vimtex-grammar-vlty| for more details).
        The option is a dictionary with the following keys :
            lt_directory
                Path to the `LanguageTool` software, if installed manually.

            lt_command
                Name of `LanguageTool` executable, if installed via package manager. Note
                that this has precedence over `lt_directory`!

            lt_disable
            lt_enable
            lt_disablecategories
            lt_enablecategories
                Options for `LanguageTool` that control application of rules and rule
                categories. For more info, see:
                http://wiki.languagetool.org/command-line-options

            server
                Specify whether an HTTP server should be used. This may be faster for
                short texts. Possible values are:

                `no`    Do not use a server.
                `my`    Use a local `LanguageTool` server. If not yet running, it is
                                started.
                `lt`    Contact the Web server provided by `LanguageTool`. In this case,
                            no local installation is necessary. Please see the following page
                            for conditions and restrictions:
                            https://dev.languagetool.org/public-http-api

            shell_options
                Pass additional options to `YaLafi`,
                e.g., `--equation-punctuation displ`;
                for more info, see:
                https://github.com/matze-dd/YaLafi

            show_suggestions
                If set to 1,
                    `LanguageTool's` replacement suggestions are included
                    in the |quickfix| or |location-list| messages.

            encoding
                Encoding of the (La)TeX source file. For default value `auto`, the
                encoding is taken from |fileencoding| or |encoding|.

        Default:


                let g:vimtex_grammar_vlty = {
                            \ 'lt_directory': '~/lib/LanguageTool',
                            \ 'lt_command': '',
                            \ 'lt_disable': 'WHITESPACE_RULE',
                            \ 'lt_enable': '',
                            \ 'lt_disablecategories': '',
                            \ 'lt_enablecategories': '',
                            \ 'server': 'no',
                            \ 'shell_options': '',
                            \ 'show_suggestions': 0,
                            \ 'encoding': 'auto',
                            \}

    *g:vimtex_imaps_enabled*
        Use this option to disable/enable the insert mode mappings.

        Default value: 1

    *g:vimtex_imaps_leader*
        The default leader key for insert mode mappings.

        Default value: '`'

    *g:vimtex_imaps_disabled*
        A list of mappings to disable. That is, any left-hand side that matches
        a string in this list will not be mapped to its corresponding right-hand
        side. This may be used to selectively disable one or more from the default
        list of mappings.

        Default value: []

    *g:vimtex_imaps_list*
        The list of mappings to generate on start up. The list of activated mappings
        can be viewed with |:VimtexImapsList|.

        Default value: See `autoload/vimtex/options.vim` (it's a long list)

    *g:vimtex_include_indicators*
        VimTeX will recognize included files for a lot of different purposes. Most
        of these come from e.g. `\input{file}` or `\include{file}`. This option
        allows to add more commands that are used to include files, e.g. custom
        macros.

        This option is read during initialization of VimTeX, and so it must be
        set early. I.e., it can not be set in `after/ftplugin/tex.vim`.

        Default value: ['input', 'include']

    *g:vimtex_include_search_enabled*
        VimTeX sets 'includeexpr' to recognize included files. If a file isn't found
        in the current directory, VimTeX uses `kpsewhich` to search for it in the
        system TeX distribution. If the 'complete' option includes "i", invoking
        keyword completion with |i_ctrl-n| will search included files for completion
        possibilities. In this case, there may be a lot of calls to `kpsewhich`
        while scanning for included files during the 1st invocation of keyword
        completion, and this may introduce a significant delay. Subsequent keyword
        completions should be faster, as the calls to `kpsewhich` are cached.

        This option allows to disable searching for included files with `kpsewhich`,
        and with that prevent the above explained delay.

        Default value: 1

    *g:vimtex_indent_enabled*
        Use this option to disable/enable VimTeX indentation.

        Default value: 1

    *g:vimtex_indent_bib_enabled*
        Use this option to disable/enable VimTeX indentation of bibliography files.

        Default value: 1

    *g:vimtex_indent_conditionals*
        This is a dictionary that defines regexes for indenting conditionals. Set it
        to an empty dictionary to disable this type of indentation.

        Default value:

            let g:vimtex_indent_conditionals = {
                        \ 'open': '\v%(\\newif)@<!\\if%(f>|field|name|numequal|thenelse)@!',
                        \ 'else': '\\else\>',
                        \ 'close': '\\fi\>',
                        \}

    *g:vimtex_indent_delims*
        A dictionary that specifies how to indent delimiters. The dictionary has
        4 keys:

            open
                List of regexes for opening delimiters that should add indents.

            close
                List of regexes for closing delimiters that should reduce indents.

            close_indented
                Set this to 1 if you want the line with the closing delimiter to stay
                indented.

            include_modified_math
                Set this to 0 if you do not want modified math delimiters such as
                `\left(` and `\right)` to add/reduce indents.

        VimTeX does not allow indents for parentheses only in math mode or any
                    similar kind of context aware delimiter indents.

        If one of the keys of the dictionary is not specified, the default
                    value is assumed.

        Default value:

            let g:vimtex_indent_delims = {
                        \ 'open' : ['{'],
                        \ 'close' : ['}'],
                        \ 'close_indented' : 0,
                        \ 'include_modified_math' : 1,
                        \}

    *g:vimtex_indent_ignored_envs*
        List of environments that should not add/reduce indentation.

        Default value: ['document']

    *g:vimtex_indent_lists*
        List of environments that act like lists with `\item` entries.

        Default value: [
                \ 'itemize',
                \ 'description',
                \ 'enumerate',
                \ 'thebibliography',
                \]

    *g:vimtex_indent_on_ampersands*
        By default, VimTeX will align on `leading` ampersands e.g. in math aligned
        environments or in tabular environments. If this feature is not wanted it
        may be disabled through this option.

        To get a more advanced tabular like alignment feature, you may be
                    interested in something like |vim-easy-align|:
                    https://github.com/junegunn/vim-easy-align

        Default value: 1

    *g:vimtex_indent_tikz_commands*
        Use this option to disable/enable VimTeX indentation of multi-line commands
        in TikZ pictures.

        Default value: 1

    *g:vimtex_mappings_enabled*
        Control whether or not to load the default mappings.

        Default value: 1

    *g:vimtex_mappings_disable*
        A dictionary that can be used to disable specific mappings.  The dictionary
        keys are the mapping modes, and the values are lists of default mappings
        that should be disabled.  The following example will ensure that the default
        `tse` and `tsd` mappings are disabled:


            let g:vimtex_mappings_disable = {
                    \ 'n': ['tse', 'tsd'],
                    \ 'x': ['tsd'],
                    \}

        Default value: {}

    *g:vimtex_mappings_override_existing*
        Control behaviour on mapping conflicts, in particular whether or not to
        override pre-existing mappings. By default, VimTeX does not override existing
        mappings. If this option is enabled, then VimTeX will override existing
        mappings on conflict.

        Default value: 0

    *g:vimtex_motion_enabled*
        This option enables the motion mappings, see |vimtex-motions|. It also
        enables the highlighting of matching delimiters.

        Default value: 1

    *g:vimtex_lint_chktex_ignore_warnings*
        A string variable of options to pass for `chktex` to specify to ignore
        certain warning messages.

        Default value: `'-n1 -n3 -n8 -n25 -n36'`

    *g:vimtex_lint_chktex_parameters*
        A string variable of parameters to pass to `chktex`.

        VimTeX will look for a configuration file at `$XDG_CONFIG_HOME/chktexrc`, or
        `$HOME/.config/chktexrc` if `$XDG_CONFIG_HOME` is undefined. If this file
        exists, it is specified by default with `--localrc=...`.

        Default value: `'--localrc=PATH/chktexrc'` or `''` (see above)

    *g:vimtex_log_ignore*
        A list of regexes to filter info, warning, and error messages. If a logged
        message matches any of the regexes in this list, the message will not be
        printed to screen.

        All messages may still be viewed with |:VimtexLog|.

        Default: []

    *g:vimtex_log_verbose*

        Whether or
        not to print messages to screen.
        Should generally be on,
            but may be turned off e.g.  for debugging or  testing purposes.

        Default: 1

    *g:vimtex_subfile_start_local*
        if 1
            for  subfile'd documents,
                one should start with the local file
                instead of the main project file. See |vimtex-subfiles|
            for further info.

        Default value: 0.


    *g:vimtex_texcount_custom_arg*
        Option that makes it possible to add custom arguments to `texcount` for
        |:VimtexCountWords| and |:VimtexCountLetters|.

        Default value: ''

    *g:vimtex_text_obj_enabled*
        Use this option to disable the text object mappings.

        Default value: 1

    *g:vimtex_text_obj_linewise_operators*
        List of operators that will act linewise on the delimiter text objects (i.e.
        `ie/ae`, `i$/a$`, and `id/ad`). Note, for inline regions the operators will not
        act linewise, since that would lead to side effects.

        Default value: ['d', 'y']

    *g:vimtex_text_obj_variant*
        Select text object variants for command and environment text objects. The
        choice is either VimTeX or |targets.vim|. Possible configuration options
        are:

            1. `'auto'`     (select `'targets'` if |targets.vim| is installed)
            2. `'vimtex'`
            3. `'targets'`

        When using `'targets'`, the following additional text object kinds are
        available:

        - Prefix `I` and `A` instead of `i` and `a` for excluding inner whitespace or
            including outer whitespace, respectively.
        - Modifier `n` and `l` for next or previous (mnemonic: last).

        For more details, see `doc/targets-textobj-cheatsheet.md`.

        Default value: `'auto'`

    *g:vimtex_callback_progpath*
        The path to the Vim/neovim executable. This is currently passed to Zathura
        (|vimtex-view-zathura|) for use with synctex callbacks.

        You usually don't have to touch this variable; VimTeX will |v:progpath| if
        the option is not defined. But some people may use wrappers and similar to
        load Vim/neovim, in which case one may want to specify the executable
        directly.

        Default value: Undefined

------------------------------------------------------------------------------
COMMANDS                                                      *vimtex-commands*

    *:VimtexContextMenu*
    *<plug>(vimtex-context-menu)*
    :VimtexContextMenu        Show a context menu on the item below cursor.
                              See  |vimtex-context-menu| for more information.

    *:VimtexInfo*
    *<plug>(vimtex-info)*
    :VimtexInfo               Show information that is stored by VimTeX about the
                            current LaTeX project (available mostly for debug  purposes).

    *:VimtexInfo!*
    *<plug>(vimtex-info-full)*
    :VimtexInfo!              Show information that is stored by VimTeX about all
                                                        open LaTeX projects (available mostly for debug
                                                        purposes).

    *:VimtexDocPackage*
    *<plug>(vimtex-doc-package)*
    :VimtexDocPackage

        Show documentation for packages.
        The command takes one optional argument,
        which is the name of the package to show docs for.
        If no argument is supplied,
        it parses the command under the cursor and
        opens the most relevant documentation.


    *:VimtexRefreshFolds*
    :VimtexRefreshFolds       Refresh folds, see |vimtex-zx|.

    *:VimtexTocOpen*
    *<plug>(vimtex-toc-open)*
    :VimtexTocOpen            Open table of contents.

    *:VimtexTocToggle*
    *<plug>(vimtex-toc-toggle)*
    :VimtexTocToggle          Toggle table of contents.

    *:VimtexLog*
    *<plug>(vimtex-log)*
    :VimtexLog
        Open a scratch buffer to show message log with
        timestamps and
        traces from where the messages were raised.
            To close the log buffer,
            one may press `q` or `<esc>`.


    *<plug>(vimtex-compile-ss)*
    :VimtexCompileSS  *:VimtexCompileSS*
        Start single shot compilation.

    *<plug>(vimtex-compile)*
    :VimtexCompile  *:VimtexCompile*
        If the compiler supports and
            is set to run in continuous mode,
                then this command works as a ¿compiler¿ toggle.
        If not,
            同VimtexCompileSS

    *<plug>(vimtex-compile-selected)*
    :VimtexCompileSelected  *:VimtexCompileSelected*
        Compile the selected part of the current LaTeX file.
        This always works linewise

        When used as a command,
            it takes a range, e.g.:

                :start,end VimtexCompileSelected

        When used as a  mapping,
            if normal mode
                the mapping will act as an |operator| on the following
                    motion or  text object.

            if   visual mode mapping,
                act on the selected lines.


        Compiles the selected text by
            copying it to a temporary file with the same preamble as the current file.
        It will be compiled similarly to  |:VimtexCompileSS|.
        ¿If there are errors¿,
            they will be shown in the quickfix list.

        One may specify a custom template with a template file in which
            any (single!)  line with the exact content `%%% VIMTEX PLACEHOLDER`
            will be interchanged with the selected lines.
            This allows to customize the preamble and  surrounding content.
            The template file should be named `vimtex-template.tex` or `<head>-vimtex-template.tex`,
            where `<head>` implies the head of the current file name with the extension removed.
            E.g.,
                for a file `foo.tex`,
                one may specify a custom template `foo-vimtex-template.tex`.
                This will have a higher priority than  `vimtex-template.tex`.
                在某文件中 通过 echom "l:file.tex 是: "   l:file.tex
                发现是同一目录下的  '原文件名_vimtex_selected.tex'


    *:VimtexCompileOutput*
    *<plug>(vimtex-compile-output)*
    :VimtexCompileOutput      Open file where compiler output is redirected.

    *:VimtexStop*
    *<plug>(vimtex-stop)*
    :VimtexStop               Stop compilation for the current project.

    *:VimtexStopAll*
    *<plug>(vimtex-stop-all)*
    :VimtexStopAll            Stop compilation for all open projects in the
                                                        current vim instance.

    *:VimtexStatus*
    *<plug>(vimtex-status)*
    :VimtexStatus
        Show compilation status for current project.

    *:VimtexStatus!*
    *<plug>(vimtex-status-all)*
    :VimtexStatus!
        Show compilation status for all open projects in the
                                                        current vim instance.

    *:VimtexClean*
    *<plug>(vimtex-clean)*
    :VimtexClean
        Clean auxiliary files.

        If compilation is running continuously in the background (which is the default behaviour),
            then this command will first temporarily stop compilation,
            then execute the clean command,
            and finally restart the compilation.


    *:VimtexClean!*
    *<plug>(vimtex-clean-full)*
    :VimtexClean!
        As |:VimtexClean|, but also remove output files.

    *<plug>(vimtex-errors)*
    :VimtexErrors
        Open |quickfix| window if there are errors or  warnings.  *:VimtexErrors*

    *<plug>(vimtex-view)*
    :VimtexView
        View `pdf` for current project,
        perform forward search if available.  *:VimtexView*


    *<plug>(vimtex-reload)*
    :VimtexReload         *:VimtexReload*

        Reload VimTeX scripts.
        This is primarily useful when developing and
        debugging VimTeX itself.


    *:VimtexReloadState*
    *<plug>(vimtex-reload-state)*
    :VimtexReloadState
        Reload the state for the current buffer.

    *:VimtexCountLetters*
    *:VimtexCountWords*
    *vimtex#misc#wordcount(opts)*
    :VimtexCountLetters       Shows the number of letters/characters or words in
    :VimtexCountWords         the current project or in the selected region. The
                                                        count is created with `texcount` through a call on
                                                        the main project file similar to:


                                                            texcount -nosub -sum [-letter] -merge -q -1 FILE

                                                        Default arguments may be controlled with
                                                                    |g:vimtex_texcount_custom_arg|.

                                                        One may access the information through the
                                                                    function `vimtex#misc#wordcount(opts)`, where
                                                                    `opts` is a dictionary with the following
                                                                    keys (defaults indicated):


                                                                    'range' : [1, line('$')]
                                                                    'count_letters' : 0/1
                                                                    'detailed' : 0

                                                                    If `detailed` is 0, then it only returns the
                                                                    total count. This makes it possible to use for
                                                                    e.g. statusline functions. If the `opts` dict
                                                                    is not passed, then the defaults are assumed.

    *:VimtexCountLetters!*
    *:VimtexCountWords!*
    :VimtexCountLetters!      Similar to |:VimtexCountLetters|/|:VimtexCountWords|, but
    :VimtexCountWords!        show separate reports for included files.  I.e.
                                                        presents the result of:


                                                            texcount -nosub -sum [-letter] -inc FILE

    *:VimtexImapsList*
    *<plug>(vimtex-imaps-list)*
    :VimtexImapsList          Show the list of insert mode mappings created by the
                                                        |vimtex-imaps| feature. The mappings are displayed
                                                        in a scratch buffer. Press `q` or `<esc>` to close
                                                        the buffer.

    *:VimtexToggleMain*
    *<plug>(vimtex-toggle-main)*
    :VimtexToggleMain         In general, VimTeX detects the main file for the
                                                        current LaTeX project and uses it for compilation
                                                        and many other features. However, in some cases it
                                                        may be useful to instead focus on the current file,
                                                        for instance in large projects. In such cases, one
                                                        can use |:VimtexToggleMain| to change which file to
                                                        use as the "current project". It is easy to toggle
                                                        back and forth, and both the "main project" and the
                                                        "local project" can be used simultaneously if
                                                        desired (e.g. for compilation).

                                                        To compile the current file when it is part of
                                                                    a larger project, one must of course include
                                                                    a preamble and the `\begin/\end{document}`! It is
                                                                    possible to have a working preamble in every
                                                                    file in a multi-file project with `subfiles`,
                                                                    see |vimtex-subfiles|. See also
                                                                    |g:vimtex_subfile_start_local|.

    *:VimtexClearCache*
    :VimtexClearCache {name}  Clear cache files that matches `name`. The cache
                                                        files are located at |g:vimtex_cache_root| and can
                                                        also be deleted manually.

                                                        `:VimtexClearCache ALL` clears all cache files.

------------------------------------------------------------------------------
MAP DEFINITIONS                                               *vimtex-mappings*

    *vimtex-zx*
        When VimTeX folding is enabled and when the manual mode is turned on
        (|g:vimtex_fold_manual|), then VimTeX remaps |zx| and |zX| in such that
        the folds are refreshed appropriately.

    *<plug>(vimtex-env-delete)*
    *<plug>(vimtex-env-delete-math)*
    *<plug>(vimtex-env-change)*
    *<plug>(vimtex-env-change-math)*
        Delete/Change surrounding environment. When changing, there will be
        sensible completion candidates, see |cmdline-completion|. See also
        |g:vimtex_env_change_autofill| and |g:vimtex_echo_verbose_input|.

    *<plug>(vimtex-cmd-delete)*
    *<plug>(vimtex-cmd-delete-math)*
    *<plug>(vimtex-cmd-change)*
        Delete/Change surrounding command. See also |g:vimtex_echo_verbose_input|.

    *<plug>(vimtex-delim-delete)*
    *<plug>(vimtex-delim-change-math)*
        Delete/Change surrounding (math) delimiter. See also
        |g:vimtex_echo_verbose_input|.

    *<plug>(vimtex-cmd-toggle-frac)*
        Toggle fractions between inline mode (`num/den`) and command mode
        (`\frac{num}{den}`).

        In visual mode, the selected text is toggled if it matches either
        a `\frac{}{}` command or a `numerator / denominator` string. In normal mode,
        we try to detect the surrounding fraction command or inline fraction
        expression. If successful, the detected fraction is toggled.

    *<plug>(vimtex-cmd-toggle-star)*
    *<plug>(vimtex-env-toggle-star)*
        Toggle starred command/environment.

    *<plug>(vimtex-env-toggle-math)*
        Toggle between inline math and displayed math, e.g.:


                                                ts$        \[
            $f(x) = 1$         ↔            f(x) = 1
                                                                     \]

        One may change the toggle sequence with |g:vimtex_env_toggle_math_map|.

    *<plug>(vimtex-delim-toggle-modifier)*
    *<plug>(vimtex-delim-toggle-modifier-reverse)*
        Toggle delimiter modifiers, by default alternating between `(...)` and
        `\left(...\right)`.  The normal mode mapping toggles the closest surrounding
        delimiter, whereas the visual mode mapping toggles all delimiters that are
        fully contained in the visual selection.  The visual selection is preserved.

        When |g:vimtex_delim_toggle_mod_list| is set to contain more than one set of
        modifiers, these mappings iterate through the list instead of just toggling.
        For example, one may alternate between `(...)`, `\bigl(...\bigr)`,
        `\Bigl(...\Bigr)`, and so on.  These mappings accept a [count], which allows
        the modifier to be incremented multiple steps at a time.  The `-reverse`
        mapping goes backwards through the modifier list instead of forwards.

        See also |g:vimtex_delim_toggle_mod_list| and |g:vimtex_delim_list|.

    *<plug>(vimtex-cmd-create)*
        This mapping works in both insert mode, normal mode and visual mode. It is
        mapped by default to <f7>. See below for the behaviour in the different
        modes.

        Insert mode:
            Convert the preceding text into a LaTeX command.
            That is,
            it prepends a backslash and adds an opening brace.
            It also moves the cursor to the end of the word.
            If you also want the closing brace (e.g.
            to emulate delimitMate [0] or any of its like),
            you can add the following to your  `~/.vim/after/ftplugin/tex.vim`:


                imap <buffer> <f7> <plug>(vimtex-cmd-create)}<left>

            [0]: https://github.com/Raimondi/delimitMate

        Normal/Visual mode:
            Surrounds the word under the cursor/visual selection by the command
            provided in an input prompt.

    *<plug>(vimtex-delim-close)*
        Close the current environment or delimiter (insert mode), except the
        top-level `document` environment.

    *<plug>(vimtex-delim-add-modifiers)*
        Add `\left` and `\right)` modifiers to all surrounding "unmodified"
        delimiteres in the current math scope.

    *<plug>(vimtex-reverse-search)*
        Do reverse search for the MuPDF viewer, see |vimtex-view-mupdf|.

    *<plug>(vimtex-ac)*   Commands
    *<plug>(vimtex-ic)*
    *<plug>(vimtex-ad)*   Delimiters
    *<plug>(vimtex-id)*
    *<plug>(vimtex-ae)*   Environments (except top-level `document`)
    *<plug>(vimtex-ie)*
    *<plug>(vimtex-a$)*   Math environments
    *<plug>(vimtex-i$)*
    *<plug>(vimtex-aP)*   Sections
    *<plug>(vimtex-iP)*
    *<plug>(vimtex-am)*   Items
    *<plug>(vimtex-im)*
        These are all text object mappings for the indicated types of objects , see
        |vimtex-text-objects| for more info.

    *<plug>(vimtex-%)*
        Find matching pair.

    *<plug>(vimtex-]])*
        go to [count] next end of a section.
        |exclusive| motion.

    *<plug>(vimtex-][)*
        go to [count] next beginning of a section.
        |exclusive| motion.

    *<plug>(vimtex-[])*
        go to [count] previous end of a section.
        |exclusive| motion.

    *<plug>(vimtex-[[)*
        go to [count] previous beginning of a section.
        |exclusive| motion.

    *<plug>(vimtex-]m)*
        go to [count] next start of an environment `\begin`.
        |exclusive| motion.

    *<plug>(vimtex-]M)*
        go to [count] next end of an environment `\end`.
        |exclusive| motion.

    *<plug>(vimtex-[m)*
        go to [count] previous start of an environment `\begin`.
        |exclusive| motion.

    *<plug>(vimtex-[M)*
        go to [count] previous end of an environment `\end`.
        |exclusive| motion.

    *<plug>(vimtex-]n)*
        go to [count] next start of a math zone.
        |exclusive| motion.

    *<plug>(vimtex-]N)*
        go to [count] next end of a math zone.
        |exclusive| motion.

    *<plug>(vimtex-[n)*
        go to [count] previous start of a math zone.
        |exclusive| motion.

    *<plug>(vimtex-[N)*
        go to [count] previous end of a math zone.
        |exclusive| motion.

    *<plug>(vimtex-]r)*
        go to [count] next start of a frame environment.
        |exclusive| motion.

    *<plug>(vimtex-]R)*
        go to [count] next end of a frame environment.
        |exclusive| motion.

    *<plug>(vimtex-[r)*
        go to [count] previous start of a frame environment.
        |exclusive| motion.

    *<plug>(vimtex-[R)*
        go to [count] previous end of a frame environment.
        |exclusive| motion.

    *<plug>(vimtex-]/)*
        go to [count] next start of a LaTeX comment "%".
        |exclusive| motion.

    *<plug>(vimtex-]star)*
        go to [count] next end of a LaTeX comment "%".
        |exclusive| motion.

    *<plug>(vimtex-[/)*
        go to [count] previous start of a LaTeX comment "%".
        |exclusive| motion.

    *<plug>(vimtex-[star)*
        go to [count] previous end of a LaTeX comment "%".
        |exclusive| motion.

------------------------------------------------------------------------------
INSERT MODE MAPPINGS                                             *vimtex-imaps*

    Some LaTeX commands are very common, and so it is both natural and convenient
    to have insert mode mappings/abbreviations for them. VimTeX therefore
    provides a list of such mappings that are enabled by default, see
    |g:vimtex_imaps_list|. The mappings utilize a map leader defined by
    |g:vimtex_imaps_leader|. The default list of maps are all math mode mappings,
    but one may also add mappings that are available and useful outside of math
    mode. To see the list of mappings that are created, one can use the command
    |:VimtexImapsList|, which is by default mapped to `<localleader>lm`.

    It is of course possible to customize the list of mappings. First, one may
    specifically disable the entire imaps feature with |g:vimtex_imaps_enabled| or
    specific default mappings through |g:vimtex_imaps_disabled|. Second, one may
    specify |g:vimtex_imaps_list|, which will overwrite the default list. Finally,
    one may add new maps through calls to the function |vimtex#imaps#add_map|. The
    following are some examples of how to customize the mappings:


        " Disable \alpha and \beta mappings
        let g:vimtex_imaps_disabled = ['a', 'b']

        " Add custom mapping through vimtex#imaps#add_map
        call vimtex#imaps#add_map({
                    \ 'lhs' : 'test',
                    \ 'rhs' : '\tested',
                    \ 'wrapper' : 'vimtex#imaps#wrap_trivial'
                    \})

        " Add custom mapping: #rX -> \mathrm{X}
        call vimtex#imaps#add_map({
                    \ 'lhs' : 'r',
                    \ 'rhs' : 'vimtex#imaps#style_math("mathrm")',
                    \ 'expr' : 1,
                    \ 'leader' : '#',
                    \ 'wrapper' : 'vimtex#imaps#wrap_math'
                    \})

    *vimtex#imaps#add_map*

    This function is used to add new insert mode mappings. It takes a single
    dictionary argument:


        map = {
            \ 'lhs' : lhs,
            \ 'rhs' : rhs,
            \ 'expr' : bool,
            \ 'leader' : leader_key,
            \ 'wrapper' : function_name,
            \ 'context' : value,
            \ }

    Explanation of the keys:

        lhs
            Mandatory argument. The left-hand side part of the map.

        rhs
            Mandatory argument. The right-hand side part of the map. There is one
            utility function that can be useful:

                *vimtex#imaps#style_math*
                    Wraps the RHS inside a specified command, e.g. `\myarg{RHS}`, if the
                    cursor is inside math mode.

        expr
            Either 0/|v:false| or 1/|v:true| (default: 0). If true, then the
            right-hand side is evaluated before it is passed to the wrapper.
            This is necessary e.g. for use with |vimtex#imaps#style_math|.

        leader
            Custom leader key. If the key is not present, then |g:vimtex_imaps_leader|
            is used as leader key.

        wrapper
            The name of a wrapper function that is used to generate the `rhs`. Two
            functions are available from VimTeX:

                *vimtex#imaps#wrap_trivial*
                    Trivial wrapper: Simply returns `rhs`.

                *vimtex#imaps#wrap_math*
                    Only define `rhs` if inside a math environment. This is the default
                    wrapper function and will be used if no other wrapper is supplied.

                *vimtex#imaps#wrap_environment*
                    Only define `rhs` if inside a specified environment. The wrapper works
                    by utilizing the `context` key, which is a list that contains strings
                    and/or dictionaries:

                        i.  If the entry is a string, then the `lhs` is mapped to `rhs`
                                inside the specified environment.
                        ii. If the entry is a dictionary, then we assume it has 2 entries,
                                `envs` and `rhs`, where `envs` is a list of environment names.
                                If inside any environment in this list, then we expand to the
                                corresponding `rhs`. This allows one to create a mapping that
                                expands to different `rhs`s in different environments.

            Of course, one may use custom wrapper functions. To write a custom wrapper
            function, please see the source for examples on how the VimTeX wrappers
            are written.

        context
            A value that can be used by the chosen wrapper function.

    *vimtex-neosnippet*
    *vimtex-UltiSnips*

    His feature is not
    the same as the snippet feature of |UltiSnips| or |neosnippet|.
    The ¿imaps¿ feature of VimTeX previously
        supported `automatic` snippets,
        but these have been removed after careful considerations and
        input from VimTeX users,
        please see VimTeX issue #295:
        https://github.com/lervag/vimtex/issues/295#issuecomment-164262446
        It has been decided that the best approach
        is to only provide basic ¿mappings¿,
        and to let users manually create automatic snippets through
        the anonymous snippet functions in |UltiSnips| and |neosnippet|,
        please see |UltiSnips#Anon| and |neosnippet#anonymous|,  respectively.
        Here are a couple of examples that show how to create such mappings:

            " Using neosnippet#anonymous
            ino  <silent><expr> __ neosnippet#anonymous('_${1}${0}')
            ino  <silent><expr> ^^ neosnippet#anonymous('^${1}${0}')

            " Using UltiSnips#Anon
            ino  <silent> __ __<c-r>=UltiSnips#Anon('_{$1}$0', '__', '', 'i')<cr>
            ino  <silent> ^^ ^^<c-r>=UltiSnips#Anon('^{$1}$0', '^^', '', 'i')<cr>


    A drawback with the anonymous UltiSnips snippets
    is that they do not nest.
    That is,
        if you did `__` twice in a row,
        only the 2nd one could be escaped.
    This allows nesting:
        In recent versions of |UltiSnips|,
            one may set normal snippets to trigger automatically,
            see |UltiSnips-autotrigger|.
        and is therefore a better approach than
        using the anonymous snippet function.


------------------------------------------------------------------------------
EVENTS                                                          *vimtex-events*

    VimTeX defines  (并没有define, 只是有 if exists(#User#VimtexEvent...), 要自己定义  )
    some events (User才是event, 作者定义是是User这个event的pattern?)
        using the |User| autocmd
    that may be used for  further customization.

        *VimtexEventQuit*
            This event is triggered when the last buffer for a particular LaTeX project
            is wiped
            (for example, using `:bwipeout`) and when Vim is quit.
            The event  may be used
                to cleanup up auxiliary build files or
                close  open viewers
                (see Examples below).
            With Vim defaults,
            this event is not  triggered when
            using `:quit` or `:bdelete` since these commands merely hide
            the buffer.
            In multi-file projects,
            the event may be triggered multiple  times.
            The 'b:vimtex' variable contains context data for the quitting
            file or project.
            For example,
                'b:vimtex.tex' identifies the tex file being  wiped,
                or the main tex file of a multi-file project.

            Commands such as |:VimtexClean| cannot be used in this autocommand
            because
            when quitting vim
                the current buffer does not necessarily have  filetype 'tex'.

        *VimtexEventInitPre*
        *VimtexEventInitPost*
            This event is triggered at the start/end of VimTeX initialization.  The
            post event may e.g. be used to automatically start compiling a document.

        *VimtexEventCompileStarted*
            This event is triggered after compilation is started.

        *VimtexEventCompileStopped*
                                    after compilation is stopped.

        *VimtexEventCompiling*
            This event is triggered when the compiler backend triggers a new
            compilation.
            This is only supported by |vimtex-compiler-latexmk|.

        *VimtexEventCompileSuccess*
        *VimtexEventCompileFailed*
            These events are triggered after successful/failed compilation and
            allows users to add custom callback functionality.

        *VimtexEventTocCreated*
            This event is triggered after a ToC window is created.

        *VimtexEventTocActivated*
            This event is triggered when a ToC entry has been activated. This allows
            to add custom behaviour after opening an entry, e.g. positioning the
            buffer window with the |zt| or |zz| mappings.

        *VimtexEventView*
            This event is triggered after the viewer has opened/forward search has
            been performed by the command |:VimtexView| or the related mapping.

        *VimtexEventViewReverse*
            This event is triggered at the end of the |vimtex#view#inverse_search|
            function, which can be used as the callback function for reverse goto from
            a PDF viewer.

    Examples:

        1.

            aug  vimtex_event_1
                au!
                au User VimtexEventInitPost   VimtexCompile
                au User VimtexEventQuit       VimtexClean
            aug  END

        " Close viewers when VimTeX buffers are closed

            aug  vimtex_event_2
                au!
                au User VimtexEventQuit call CloseViewers()
            aug  END

            fun! CloseViewers()
                if executable('xdotool')
                            \ && exists('b:vimtex.viewer.xwin_id')
                            \ && b:vimtex.viewer.xwin_id > 0
                    call system('xdotool windowclose '. b:vimtex.viewer.xwin_id)
                endif
            endf


        " Add custom mappings in ToC buffer
            fun! TocMappings()
                nno  <silent><buffer><nowait>  eee :echo 'hi'
            endf

            aug  vimtex_event_3
                au!
                au User VimtexEventTocCreated   call TocMappings()
            aug  END

        " Specify window position when opening ToC entries
            aug  vimtex_event_4
                au!
                au User VimtexEventTocActivated  normal! zt
            aug  END

        " Specify extra behaviour after reverse goto
            aug  vimtex_event_4
                au!
                au User VimtexEventViewReverse   normal! zMzvzz
            aug  END

------------------------------------------------------------------------------
TEXT OBJECTS                                              *vimtex-text-objects*

    Text objects (and motions) are a fundamental feature in Vim. Operations can be
    combined with motions or text objects in endless ways and can be repeated with
    the dot operator (|repeat.txt|). If you are reading this and do not know about
    these things, then it is strongly advised to read the help section about
    |text-objects| and the famous Stack Overflow post "Your problem with Vim is
    that you don't grok vi":
    http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim/1220118#1220118

    VimTeX defines LaTeX specific text objects (and motions). These are all
    mappings, and as such, they are also described in the sections
    |vimtex-mappings| and |vimtex-default-mappings|.

    The usual convention for text object mappings is to prepend "a" to select "a"n
    object, including the whitespace/delimiters/etc, and to prepend "i" to select
    the corresponding "inner" object. This is the case for VimTeX text objects,
    e.g. by default, `vie` will visually select the inner part of an environment,
    whereas `vae` will select the entire environment including the boundaries.

    VimTeX supports the well known |targets.vim| as a "backend" for the command
    and environment text objects (`ie`/`ae` and `ic`/`ac`). This should work
    automatically, see |g:vimtex_text_obj_variant| for more info.

    Some examples of how to use the text objects can be useful. The following is
    a simple table that shows the original text on the left, the keys that are
    typed in the middle, and the result on the right. The bar "|" indicates the
    cursor position before the operation.


        BEFORE                       KEYS    AFTER
        \comm|and{arg}               dic     \command{}
        \command{a|rg}               gUac    \COMMAND{ARG}

        \lef|t( asd \right)          cid     \left(| \right)

        \begin{x}                    die     \begin{x}
            hello world|                       \end{x}
        \end{x}

        $math | here$                da$

        \begin{itemize}                      \begin{itemize}
            \item hello moon|          cim       \item |
        \end{itemize}                        \end{itemize}

        \begin{itemize}                      \begin{itemize}
            \item hello moon|          dam     \end{itemize}
        \end{itemize}

    Associated settings:
    * |g:vimtex_text_obj_enabled|
    * |g:vimtex_text_obj_linewise_operators|
    * |g:vimtex_text_obj_variant|

==============================================================================
COMPLETION                                                  *vimtex-completion*

    If |g:vimtex_complete_enabled| is 1 (default),
    then VimTeX sets the 'omnifunc' to provide omni completion,
        see |compl-omni|.
        Omni completion is then accessible  with
            |i_ctrl-x_ctrl-o|.



    The omni completion completes
        citations,
        labels,
        glossary entries and
        filenames.


    Associated settings:
        * |g:vimtex_complete_bib|
        *g:vimtex_complete_enabled*
            Default value: 1


        *g:vimtex_complete_ignore_case*
            Default value: Same as your 'ignorecase' value

        *g:vimtex_complete_smart_case*
            if  |g:vimtex_complete_ignore_case| is also enabled.

            Default value:
                Same as your 'smartcase' value

        *g:vimtex_complete_close_braces*
            to append a closing brace after a label or
                    a citation has been completed.

            Default value: 0

------------------------------------------------------------------------------

COMPLETE CITATIONS                                      *vimtex-complete-cites*

    Citation completion is triggered by
    `'\cite{'` commands.
    The completion parses
        included bibliography files (`*.bib`)
        and `thebibliography` environments to gather the completion candidates.


    By default,
    cite completion is "smart" in that
    it allows to complete on author names,
            title,
            and similar
    by  matching against a match string defined by
        |g:vimtex_complete_bib.match_str_fmt|.

    If one prefers,
    one may set the `simple` key of |g:vimtex_complete_bib| to only allow completion on the `bibkeys` directly.
    This should typically work better ¿with autocomplete plugins.¿

        *g:vimtex_complete_bib*
            This option is a dictionary for controlling the citation completion.
            The keys each control a different thing as explained below.

            simple
                Default value: 0

                If 0,
                    then the cite completion is "smart",
                    i.e. not simple.
                    This  behaviour is described in more detail in |vimtex-complete-cites|.

                if you use an autocomplete plugin (|vimtex-complete-auto|).
                    It is usually better to use the "simple" mode

        *g:vimtex_complete_bib.match_str_fmt*
            match_str_fmt
                Default value: `'@key [@type] @author_all (@year), "@title"'`
                The format used for the match string for bib completion candidates.
                That  is,
                the string that the smart mode candidate matching is matched against.
                See |vimtex-complete-cites| for more info.
                The following keys may be used
                to define the string:

                    @author_all    Full author list
                    @author_short  Shortened author list
                    @key           The bibtex key
                    @title         Title
                    @type          Type of entry
                    @year          Publication year


                Since the author list can be large,
                the `@author_all` is truncated to 20 characters.
                This can be modified with the `auth_len` key (see below).


            menu_fmt
                Default value:  `'[@type] @author_short (@year), "@title"'`
                The format used for the `menu` entry for bib completion candidates (see
                |complete-items|). If the key is set to an empty string, then the `menu`
                entry is not added to the completion candidates. See the description of
                `match_str_fmt` for the allowed keys.

            abbr_fmt
                Default value: `''`
                The format used for the `abbr` entry for bib completion candidates (see
                |complete-items|). See the description of `match_str_fmt` for the allowed  keys.


            auth_len
                Default value: 20
                Truncation length for author list with the `@author_all` format key in the
                format strings for `match_str_fmt`, `menu_fmt`, and `abbr_fmt`.

            custom_patterns
                Default value: []
                List of custom trigger patterns that may be used to allow completion for
                e.g. custom macros.

            If one wants to overwrite one of the keys, e.g. the `simple` entry, one can do:


                let g:vimtex_complete_bib = { 'simple': 1 }

            This does not modify the other keys and their default values.

    As an example of the smart completion,
        assume that a bibliography file is
        included with the following entry:


                    @book { knuth1981,
                                    author = "Donald E. Knuth",
                                    title = "Seminumerical Algorithms",
                                    publisher = "Addison-Wesley",
                                    year = "1981" }


    Then,
    with the default configuration,
    the bibliography key `knuth1981` will be completed with e.g.:


                    \cite{Knuth 1981<ctrl-x><ctrl-o>
                    \cite{algo<ctrl-x><ctrl-o>
                    \cite{Don.*Knuth<ctrl-x><ctrl-o>


    As is shown in the last example,
    the search string (e.g.  `Don.*Knuth`)
    is applied as a regular expression.


------------------------------------------------------------------------------
COMPLETE LABELS                                        *vimtex-complete-labels*


    Label completion is triggered by
    `\ref{` commands.
    The completion parses every relevant aux file to gather the completion candidates.
    This is important,
    because
    it means that
    the completion only works when the ¿LaTeX document has been compiled¿.

    *g:vimtex_complete_ref*
        This option is a dictionary for controlling the label completion.
        The keys each control a different thing:

        custom_patterns
            Default value: []
            List of custom trigger patterns that may be used to
            allow completion for  e.g. custom macros.

        For example,
        if one has defined the command `\figref`,
        one could add following custom pattern


            let g:vimtex_complete_ref = {
                    \ 'custom_patterns' = ['\v\\figref\*?\{[^}]*$']
                    \ }

     example:
        \ref{sec:<ctrl-x><ctrl-o>

    offers a list of all matching labels with a menu that contains the associated value and
    page number.

    The completion base
        is matched as a regex in the following order:

                    \ref{<base><ctrl-x><ctrl-o>

            1. The menu, which contains the reference value and page number.
            2. The actual labels.
            3. The menu and label, separated by whitespace. An example:


                    \ref{eq 2<ctrl-x><ctrl-o>

                This matches "eq" in the label and "2" in the menu.


    For `\eqref`,
        only show equation references.


------------------------------------------------------------------------------
COMPLETE COMMANDS AND ENVIRONMENTS                   *vimtex-complete-commands*
*vimtex-complete-environments*

    Command completion is available after `\` and should provide completion candidates for relevant LaTeX commands.

    The document's preamble is analysed,
    and commands will be completed for the ¿loaded packages¿
    as well as those defined within the preamble using
        `\newcommand`,  `\let` and `\def`.

    Environment completion is also available after `\begin{` or `\end{`.
        As with commands,
            the suggested environment names come from the loaded packages and
            `\newenvironment` definitions in the preamble.

    A lot of packages are supported,
        see the path `VIMTEX/autoload/vimtex/complete`
        for a relevant file listing.

------------------------------------------------------------------------------
COMPLETE FILE NAMES                                 *vimtex-complete-filenames*

    File name completion is available for the following macros:

    `\includegraphics{`
                        Completes image file names.

    `\input{`
    `\include{`
    `\includeonly{`
                        Complete `.tex` files.

    `\includepdf{`
                        Complete `.pdf` files.
                        This macro is provided by the `pdfpages` package.

    `\includestandalone{`
                        Complete `.tex` files.
                        This macro is provided by the `standalone` package.

------------------------------------------------------------------------------
COMPLETE INCLUDE GLOSSARY PACKAGE                    *vimtex-complete-glossary*

    Glossary entry completion from the `glossaries` package are triggered by
    the  commands '\gls{', '\glspl{' and their variations.

------------------------------------------------------------------------------
COMPLETE PACKAGE FILES                               *vimtex-complete-packages*  *vimtex-complete-classes*  *vimtex-complete-bibstyle*

    Package,
    documentclass,
    and bibliography style completion are available for
    the `\usepackage{`,
    `\documentclass{`,
     `\bibliographystyle` commands,
    respectively.

    The completion relies on the contents of `ls-R` files that are found with:


        kpsewhich --all ls-R

    Packages and documentclasses installed at `TEXMFHOME` will also be searched.
    The default value can be found with:


        kpsewhich --var-value TEXMFHOME

    If you want to change the default value of `TEXMFHOME` in your shell
    startup file and
    use `gvim` started from the desktop environment,
        please  read |vimtex-faq-texmfhome|.

------------------------------------------------------------------------------
AUTOCOMPLETE                                             *vimtex-complete-auto*

Vim does not provide automatic completion by itself,
but there exist at least several good plugins that provide this:
    |coc-nvim|,
    |deoplete|,
    |neocomplete|,
    |ncm2|,
    |nvim-completion-manager|,
    |youcompleteme|,
    and |nvim-compe|.

Moreover,
there is |VimCompletesMe| that overrides <tab> to trigger different built-in completions,
    such as the omni-completion by VimTeX,
depending on the context.



coc.nvim  *vimtex-complete-coc.nvim*
     https://github.com/neoclide/coc-vimtex.

        :CocInstall coc-vimtex


        coc.source.vimtex.disableSyntaxes    disabled syntax names
        coc.source.vimtex.enable             set to false to disable this source
        coc.source.vimtex.priority           priority of source, default 99
        coc.source.vimtex.shortcut           shortcut used in menu of completion item

    The README of `coc.nvim` suggests
    using `noremap K` to show documentation.
    `K` is also used by
    VimTeX as one of the default maps (see |vimtex-default-mappings|)
    for the same purpose.

    To enable VimTeX's mapping for `.tex` files
    (since `coc.nvim` does not have a doc source),
    do one of the following:


    * Manually remap for `.tex` files:
    * Put the following in your
        `$HOME/.vim/after/ftplugin/tex.vim:`

        map <buffer> K <Plug>(vimtex-doc-package)

    * Use a custom function in your |vimrc| file, something like this:

            nno  <silent> K :call <sid>show_documentation()<cr>
            fun! s:show_documentation()
                if index(['vim', 'help'], &filetype) >= 0
                    exe  'help ' . expand('<cword>')
                elseif &filetype ==# 'tex'
                    VimtexDocPackage
                el
                    call CocAction('doHover')
                en
            endf

deoplete
*vimtex-complete-deoplete*
|deoplete| is a modern remake of |neocomplete|,
and was originally written  specifically for Neovim,
see here: https://github.com/Shougo/deoplete.nvim.
It is a highly customizable and flexible completion manager.

To configure for VimTeX, one may use:


    " This is new style
    call deoplete#custom#var('omni', 'input_patterns', {
                    \ 'tex': g:vimtex#re#deoplete
                    \})

    " This is old style (deprecated)
    if !exists('g:deoplete#omni#input_patterns')
            let g:deoplete#omni#input_patterns = {}
    en
    let g:deoplete#omni#input_patterns.tex = g:vimtex#re#deoplete

neocomplete
*vimtex-complete-neocomplete*
|neocomplete| is also a flexible automatic completion engine for vim,
although  active development has been stopped.
Users are recommended to change to  |deoplete|,
The plugin is available here:
    https://github.com/Shougo/neocomplete.vim.

The following options may be used to enable automatic completion for LaTeX
documents with |neocomplete| and VimTeX's omni completion function:


    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    en
    let g:neocomplete#sources#omni#input_patterns.tex =
                \ g:vimtex#re#neocomplete

ncm2
*vimtex-complete-ncm2*
|ncm2| is a modern remake and replacement of |nvim-completion-manager| and is
supposed to be a
    "Slim, Fast and Hackable Completion Framework for Neovim":
https://github.com/ncm2/ncm2

The following simple configuration should work well with VimTeX:


    " include the following plugins (here using junnegun/vim-plug)
    Plug 'roxma/nvim-yarp'
    Plug 'ncm2/ncm2'

    set completeopt=noinsert,menuone,noselect

    aug  my_cm_setup
        au!
        au BufEnter * call ncm2#enable_for_buffer()
        au Filetype tex call ncm2#register_source({
                        \ 'name': 'vimtex',
                        \ 'priority': 8,
                        \ 'scope': ['tex'],
                        \ 'mark': 'tex',
                        \ 'word_pattern': '\w+',
                        \ 'complete_pattern': g:vimtex#re#ncm2,
                        \ 'on_complete': ['ncm2#on_complete#omni', 'vimtex#complete#omnifunc'],
                        \ })
    aug  END

For more lenient, omni-complete-like, filtering of completion candidates,
use the following setup (in your init.vim or a personal ftplugin) instead:


    aug  my_cm_setup
        au!
        au BufEnter * call ncm2#enable_for_buffer()
        au Filetype tex call ncm2#register_source({
                        \ 'name' : 'vimtex-cmds',
                        \ 'priority': 8,
                        \ 'complete_length': -1,
                        \ 'scope': ['tex'],
                        \ 'matcher': {'name': 'prefix', 'key': 'word'},
                        \ 'word_pattern': '\w+',
                        \ 'complete_pattern': g:vimtex#re#ncm2#cmds,
                        \ 'on_complete': ['ncm2#on_complete#omni', 'vimtex#complete#omnifunc'],
                        \ })
        au Filetype tex call ncm2#register_source({
                        \ 'name' : 'vimtex-labels',
                        \ 'priority': 8,
                        \ 'complete_length': -1,
                        \ 'scope': ['tex'],
                        \ 'matcher': {'name': 'combine',
                        \             'matchers': [
                        \               {'name': 'substr', 'key': 'word'},
                        \               {'name': 'substr', 'key': 'menu'},
                        \             ]},
                        \ 'word_pattern': '\w+',
                        \ 'complete_pattern': g:vimtex#re#ncm2#labels,
                        \ 'on_complete': ['ncm2#on_complete#omni', 'vimtex#complete#omnifunc'],
                        \ })
        au Filetype tex call ncm2#register_source({
                        \ 'name' : 'vimtex-files',
                        \ 'priority': 8,
                        \ 'complete_length': -1,
                        \ 'scope': ['tex'],
                        \ 'matcher': {'name': 'combine',
                        \             'matchers': [
                        \               {'name': 'abbrfuzzy', 'key': 'word'},
                        \               {'name': 'abbrfuzzy', 'key': 'abbr'},
                        \             ]},
                        \ 'word_pattern': '\w+',
                        \ 'complete_pattern': g:vimtex#re#ncm2#files,
                        \ 'on_complete': ['ncm2#on_complete#omni', 'vimtex#complete#omnifunc'],
                        \ })
        au Filetype tex call ncm2#register_source({
                        \ 'name' : 'bibtex',
                        \ 'priority': 8,
                        \ 'complete_length': -1,
                        \ 'scope': ['tex'],
                        \ 'matcher': {'name': 'combine',
                        \             'matchers': [
                        \               {'name': 'prefix', 'key': 'word'},
                        \               {'name': 'abbrfuzzy', 'key': 'abbr'},
                        \               {'name': 'abbrfuzzy', 'key': 'menu'},
                        \             ]},
                        \ 'word_pattern': '\w+',
                        \ 'complete_pattern': g:vimtex#re#ncm2#bibtex,
                        \ 'on_complete': ['ncm2#on_complete#omni', 'vimtex#complete#omnifunc'],
                        \ })
    aug  END

nvim-completion-manager
*vimtex-complete-ncm*
|nvim-completion-manager| has been replaced by |ncm2|, and users are
recommended to change. See |vimtex-complete-ncm2| for hints on how to setup
|ncm2| for VimTeX.

|nvim-completion-manager| is a fast, extensible, async completion framework
for neovim (and Vim version 8.0 and above).  The project is available here:
https://github.com/roxma/nvim-completion-manager

To configure for VimTeX, one can use the following code:


    aug  my_cm_setup
        au!
        au User CmSetup call cm#register_source({
                    \ 'name': 'vimtex',
                    \ 'priority': 8,
                    \ 'scoping': 1,
                    \ 'scopes': ['tex'],
                    \ 'abbreviation': 'tex',
                    \ 'cm_refresh_patterns': g:vimtex#re#ncm,
                    \ 'cm_refresh': {'omnifunc': 'vimtex#complete#omnifunc'},
                    \ })
    aug  END

YouCompleteMe
*vimtex-complete-youcompleteme*
|youcompleteme| is probably the most popular code-completion engine for Vim.  The
github repository is here: https://github.com/ycm-core/YouCompleteMe.
It is described as:

> YouCompleteMe is a fast, as-you-type, fuzzy-search code completion engine
> for Vim. It has several completion engines: an identifier-based engine that
> works with every programming language, a semantic, Clang [3]-based engine
> that provides native semantic code completion for the C-family languages,
> a Jedi [4]-based completion engine for Python, an OmniSharp [5]-based
> completion engine for C# and an omnifunc-based completer that uses data from
> Vim's omnicomplete system to provide semantic completions for many other
> languages (Ruby, PHP etc.).

To enable automatic completion with |youcompleteme|, use the following options:


    if !exists('g:ycm_semantic_triggers')
        let g:ycm_semantic_triggers = {}
    en
    au VimEnter * let g:ycm_semantic_triggers.tex=g:vimtex#re#youcompleteme

VimCompletesMe
*vimtex-complete-vcm*
A plugin that maps <tab> to trigger the built-in completion that is most
suitable to the current context.  The plugin is available here:
https://github.com/ajh17/VimCompletesMe.

The following options may be used to enable completion with the <tab> trigger
for LaTeX documents with |VimCompletesMe| and VimTeX's omni completion function:


    aug  VimCompletesMeTex
        au!
        au FileType tex
                \ let b:vcm_omni_pattern = g:vimtex#re#neocomplete
    aug  END

nvim-cmp
*vimtex-complete-nvim-cmp*
|nvim-cmp| [0] is the successor of |nvim-compe|. It provides completion for
different sources, including omni-completion through the additional `cmp-omni`
package [1]. It is relatively straightforward to configure with VimTeX. First,
both |nvim-cmp| and `cmp-omni` has to be installed, then `cmp-omni` must be
added to the list of sources in your config. For example, in Lua, it should
look something like this:


    cmp = require('cmp')
    cmp.setup {
        sources = cmp.config.sources { { name = 'omni', }, }
    }

One should |nvim-cmp| overrides the standard completion-menu
formatting. To preserve the format as provided by VimTeX, one can supply
a custom format function. One good solution is to put the |nvim-cmp|
configuration for `.tex` files in your `after/ftplugin/tex.lua` with content
similar to this:


    require('cmp').setup.buffer {
        formatting = {
            format = function(entry, vim_item)
                    vim_item.menu = ({
                        omni = (vim.inspect(vim_item.menu):gsub('%"', "")),
                        buffer = "[Buffer]",
                        -- formatting for other sources
                        })[entry.source.name]
                    return vim_item
                end,
        },
        sources = {
            { name = 'omni' },
            { name = 'buffer' },
            -- other sources
        },
    }

[0]: https://github.com/hrsh7th/nvim-cmp
[1]: https://github.com/hrsh7th/cmp-omni

nvim-compe
*vimtex-complete-nvim-compe*
|nvim-compe| is an automatic completion plugin for Neovim. It has support for
many different completion sources, including omni-completion. However,
|nvim-compe| has been deprecated in favor of the more recent |nvim-cmp|, see
|vimtex-complete-nvim-cmp|. The following configuration examples should still
be valid for anyone who for some reason would still wish to use |nvim-compe|.
https://github.com/hrsh7th/nvim-compe.

The omni-completion source can be enabled for TeX/LaTeX files by adding `omni`
to the completion sources and specifying the `tex` filetype. For example, in
Lua, it should look something like this:


    require('compe').setup({
            source = {
                    omni = {
                            filetypes = {'tex'},
                    },
            },
            -- the rest of your compe config...
    })

And in Vimscript, it should look something like this:


    let g:compe.source = {
                \ 'omni': {
                \  'filetypes': ['tex'],
                \ }
                \}



DIY_again
DIY_2  vim:filetype=help:syntax=help:
