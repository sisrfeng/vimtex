==============================================================================
SYNTAX HIGHLIGHTING                                             *vimtex-syntax*

VimTeX provides a core syntax plugin combined with package specific addons.
The syntax plugin aims to be both consistent,
structured
and efficient.
The  package specific addons are generally only loaded when applicable.

LaTeX is a macro expansion language and
it is impossible to write a fully  correct syntax parser  without
running the `tex` compiler itself.
VimTeX aims  to be pragmatic and provide a best-effort syntax highlighting - a decent trade
off between simplicity and completeness.

There will probably always be situations where the parser will fail,
and in  some cases it may be hard to "recover".
It is therefore possible to manually
activate a severely ¿reduced syntax zone¿ to handle such situations.
The zone is  activated with the directive `% VimTeX: SynIgnore on` and
disabled with the  similar directive `% VimTeX: SynIgnore off`, e.g.:


  % VimTeX: SynIgnore on
  \catcode`\$=11
  $
  \catcode`\$=3
  % VimTeX: SynIgnore off

The above LaTeX code will look plain (注释),
    but OK with VimTeX.

The directive  is matched case insensitive,
and the synonyms `enable` and `disable` may be  used instead of `on` and `off`.

Overleaf's magic comment [0] is also supported similarly as the `SynIgnore`
method described above, i.e.:

  %%begin novalidate
  \catcode`\$=11
  $
  \catcode`\$=3
  %%end novalidate

The VimTeX syntax plugin is loosely based on Dr Chip's syntax plugin for LaTeX
which is shipped by default with Vim and neovim (|ft-tex-syntax|) [1].
There  are several major differences that users may want to be aware of:
    * VimTeX syntax use different names for almost all syntax groups.
    * VimTeX syntax does not support syntax based folding.
    * VimTeX syntax does not lint `@` in commands, e.g. `\@cmd` (you should know  what you are doing).

[0]: https://www.overleaf.com/learn/how-to/Code_Check
[1]: http://www.drchip.org/astronaut/vim/index.html#SYNTAX_TEX

Associated settings:
    *g:vimtex_syntax_enabled*
        Use this option to disable/enable syntax highlighting as provided by VimTeX.
        Default value: 1.



    *g:vimtex_syntax_custom_cmds*
        A list of "simple" commands for which to apply custom styling.

        Example

            let g:vimtex_syntax_custom_cmds = [
                        \ {'name': 'vct', 'mathmode': 1, 'argstyle': 'bold'},
                        \ {'name': 'R', 'mathmode': 1, 'concealchar': 'ℝ'},
                        \ {'name': 'mathnote', 'mathmode': 1, 'nextgroup': 'texMathTextArg'},
                        \ {'name': 'nospell', 'argspell': 0},
                        \]

                        • use bolded style on a custom vector macro such as `\vct{v}`.
                        • conceal `\R` with `ℝ`.
                        • may use the `nextgroup` key,
                        • define a command whose argument shoult not be spell checked.

        Each command is expected to be of the following type:

            ¿\cmdname[optional]{argument}¿

        Each element in the list must be a dictionary with the following keys:
            name
                Default: Undefined (REQUIRED)
                The command to highlight (`cmdname`).
                This is also for defining the syntax group names.

            cmdre
                Default: Undefined
                If this is defined,
                    then it is used instead of `name` for matching the
                    `cmdname` part.
                It is interpreted as a regular expression with "very  magic" mode activated (see |/\v|).

            mathmode
                Default: |v:false|
                If true,
                then the command is a ¿math mode command¿.
                源码:
                    " Add to cluster if necessary
                    "     if l:cfg.mathmode
                    "         execute 'syntax cluster texClusterMath add=' . l:group_cmd
                    "     endif
                    "
            conceal
                Default: |v:false|
                If true,
                the `\cmdname` part and delimiters `{` and `}` are concealed.

            concealchar
                Default: Undefined
                Specify a conceal character for the `\cmdname` part.
                With this,
                one can  easily create simple rules to display e.g. `\R` as `ℝ`

            opt
                Default: |v:true|
                If true,
                assumes `\cmdname` can be followed by an `[optional]` group.

            optconceal
                Default: Same as `conceal` key
                If true,
                    the option group `[optional]` is concealed.

            arg
                Default: |v:true|
                If true,
                    assumes `\cmdname` can be followed by an `{argument}` group.

            argstyle
                Default: Undefined.
                Can be set to  apply styling to the command argument. The following are
                currently supported:
                    * `bold`
                    * `ital`
                    * `under`
                    * `boldital`
                    * `boldunder`
                    * `italunder`

                    * `bolditalunder`
                    *
                can not conceal??

            argspell
                Default: |v:true|
                to disable spell checking of the command  argument.
                    Specify this as |v:false| or 0

            arggreedy
                Default: |v:false|
                If |v:true| or 1,
                the syntax rule will "eat" as many arguments as  possible:
                    `\cmdname[opt]{arg1}{arg2}...{argn}`

            nextgroup
                Default: Undefined
                This is a string that,
                    if defined and not empty,
                        specifies  a comma-separated list of possible next syntax groups.

            hlgroup
                Default: Undefined
                A string that can be used to indicate the target highlight group of the  command (`\cmdname`).


        Default value: []

    *g:vimtex_syntax_nested*
        A dictionary for configuring nested syntaxes.

        default:
            let g:vimtex_syntax_nested = {
                        \ 'aliases' : {
                        \   'C' : 'c',
                        \   'csharp' : 'cs',
                        \ },
                        \ 'ignored' : {
                        \   'sh' : ['shSpecial'],
                        \   'bash' : ['shSpecial'],
                        \   'cs' : [
                        \     'csBraces',
                        \   ],
                        \   'python' : [
                        \     'pythonEscape',
                        \     'pythonBEscape',
                        \     'pythonBytesEscape',
                        \   ],
                        \   'java' : [
                        \     'javaError',
                        \   ],
                        \   'haskell' : [
                        \     'hsVarSym',
                        \   ],
                        \ }
                        \}

        The following keys are  available for configuration:

            aliases
                Holds a dictionary of aliases,
                such as mapping `C` to `c`. This is
                useful e.g. because the Vim syntax files are case sensitive.

            ignored
                Holds a dictionary of ignore lists for each language.
                This is useful to  ignore some groups that may conflict in e.g.
                the `\begin{...}` or  `\end{...}` part of the nested syntax regions.

    *g:vimtex_syntax_nospell_comments*
        Set to 1 to disable spell checking in comments.
        Default value: 0

    *g:vimtex_syntax_packages*
        A dictionary for package specific syntax configuration. Each key represent
        a single package and the values are themselves configuration dictionaries.
        All packages share the following options:

            `load`  Specify when to load the package syntax addon.
                0 = disable this syntax package
                1 = enable this syntax package if it is detected (DEFAULT)
                2 = always enable this syntax package

        The following is a list of the available packages and, if applicable, their
        configuration keys or where they deviate from the above specified defaults.

            amsmath
                `load`  is 2 by default
            amssymb
            array
            asymptote
            babel
                `conceal`  whether to enable conceal; enabled by default
            beamer
            biblatex
            booktabs
            breqn
            cases
            circuitikz
            cleveref
            comment
            csquotes
            dot2texi
            geometry
            glossaries_extra
            glossaries
            gnuplottex
            hyperref
                `conceal`  whether to enable conceal; enabled by default
            ieeetrantools
            listings
            luacode
            markdown
            mathtools
            mhequ
            minted
            moreverb
            natbib
            pdfpages
            pgfplots
            pythontex
            siunitx
            subfile
            tabularx
            tcolorbox
            tikz
            todonotes
            url
            varioref
            wiki



------------------------------------------------------------------------------
SYNTAX CONCEAL                                          *vimtex-syntax-conceal*

    VimTeX utilizes the |syn-conceal| feature of Vim to allow displaying commands
    like `\alpha` as `α`. That is, various elements/commands can be concealed or
    substituted with a ¿unicode¿ symbol.

    This feature is mostly enabled by default.
    Various types of concealments can be enabled/disabled with |g:vimtex_syntax_conceal|.
    The entire feature can be fully disabled with |g:vimtex_syntax_conceal_disable|.

    For conceals to work properly,
        one must set the option 'conceallevel' to 2.
        It is also good to be aware of the 'concealcursor' option.

    It is very important to Not all fonts are suitable for this feature.
        That is, for this feature to work well, you should install and use a font that
        includes unicode characters.
        For Vim or Neovim in a terminal,
        this means you  must configure your terminal to use such a font.
        here is a list of some possibly useful links:

        * https://www.programmingfonts.org/
          * A convenient site to test different "programming" fonts. Not always easy
            to see if the unicode support is good,
            but at least you can see examples  of how they look.

        * https://wiki.archlinux.org/index.php/Fonts
          * The Arch Wiki is famous for being useful,
          * and it does not fail.
          * But it is rather technical and of course refers to Arch Linux packages.
          * It may still  be a good source of knowledge and inspiration.

        * https://www.binarytides.com/gorgeous-looking-fonts-ubuntu-linux/
          * This is a blog post on how to install some modern/good looking/better
            fonts on a Ubuntu system.
        * https://github.com/cormullion/juliamono
          * This is the font that I personally use (2021-03-24, @lervag).

    options
        *g:vimtex_syntax_conceal*
            Default value:
                let g:vimtex_syntax_conceal = {
                            \ 'accents': 1,
                            \ 'cites': 1,
                            \ 'fancy': 1,
                            \ 'greek': 1,
                            \ 'math_bounds': 1,
                            \ 'math_delimiters': 1,
                            \ 'math_fracs': 1,
                            \ 'math_super_sub': 1,
                            \ 'math_symbols': 1,
                            \ 'sections': 0,
                            \ 'styles': 1,
                            \}

            It is A dictionary for specifying
                which  core conceal features to activate.
                This mostly implies concealing particular elements with a replacement unicode character.
                For more info,
                        see |vimtex-syntax-conceal|.
                To disable all conceal features in one go,
                        use |g:vimtex_syntax_conceal_disable|.

            The following keys are available:
                accents
                    Conceal accented characters, e.g. `\^a` --> `â`.

                ligatures
                    Conceal ligatures such as `\aa` --> `å` and `''` --> `“`.

                cites
                    Conceal LaTeX cite commands such as `\citet[...]{ref00}`. The conceal
                    style is specified by |g:vimtex_syntax_conceal_cites|.

                fancy
                    Some extra fancy replacements, e.g. `\item` --> ○.

                greek
                    Replace TeX greek letter commands into the equivalent unicode greek
                    letter.

                math_bounds
                    Conceal the TeX math bounds characters: pairs of `$` and `$$`, `\(` ...
                    `\)`, and `\[` ... `\]`.

                math_delimiters
                    Replace possibly modified math delimiters with a single unicode
                    letter. Modified means delimiters prepended with e.g. `\left` or
                    `\bigl`. As an example, this will perform the replacement

                        `\Biggl\langle ... \Biggr\rangle` --> `〈 ... 〉`

                math_fracs
                    Replace some simple fractions like `\frac 1 2` --> ½.

                math_super_sub
                    Replace simple math super and sub operators, e.g. `x^2` --> `x²`.

                math_symbols
                    Replace various math symbol commands to an equivalent unicode character.
                    This includes quite a lot of replacements, so be warned!

                sections
                    Conceal `\(sub)*section` commands. The titles are replaced with Markdown
                    style ATX headers, e.g.:

                        `\section{Test}`    --> `# Test`
                        `\subsection{Test}` --> `## Test`

                styles
                    Conceal the LaTeX command "boundaries" for italicized and bolded style
                    commands, i.e. `\emph`, `\textit`, and `\textbf`. This means that one
                    will see something like:

                        `\emph{text here}` --> `text here`


        *g:vimtex_syntax_conceal_disable*
            This option allows to disable all conceal features at once.
            For more fine  tuned control,
                    see |g:vimtex_syntax_conceal|
            For more info, see  |vimtex-syntax-conceal|.

            Default value: 0

        *g:vimtex_syntax_conceal_cites*
            Default value:
                let g:vimtex_syntax_conceal_cites = {
                            \ 'type': 'brackets',
                            \ 'icon': '📖',
                            \ 'verbose': v:true,
                            \}

            A simple dictionary to control how citation conceal should work. It has
            three keys:


                type
                    Specify the type of concealment. There are two options, and the
                    difference is best explained by example:

                        Value       LaTeX             Concealed
                        -----       -----             ---------
                        `'icon'`      `\cite{Knuth1981}`  `📖`
                        `'brackets'`  `\cite{Knuth1981}`  `[Knuth1981]`

                icon
                    Specify an icon for `icon` conceal.
                    This must be a single  character.  (possibly  multibyte)

                verbose
                    Specify how much to conceal in bracket mode (`type` set to `'bracket'`).
                    The following table shows how the concealed result depending on the
                    `'verbose'` value for `\cite[Figure 1]{Knuth1981}`:

                        Value    Concealed
                        -----    ---------
                        |v:true|   `[Figure 1][Knuth1981]`
                        |v:false|  `[Knuth1981]`

------------------------------------------------------------------------------

SYNTAX CORE SPECIFICATION                                  *vimtex-syntax-core*

As it is relatively common for some users to customize their colorschemes,
it  is useful to describe some of the underlying "philosophy" of the syntax rules.
Note that, for the following information to be useful, the reader should have
at least some basic understanding of how to customize their colorschemes and
syntax highlighting.
The best resources to learn about this are:

  iii) https://github.com/lervag/vimtex/wiki/Syntax
       This wiki page gives an example of how to customize and fine-tune
       syntax highlighting of TeX and BibTeX files.
  iv)  |usr_44|  "Your own syntax highlighted" (ADVANCED)

The main philosophy of the VimTeX syntax plugin is to keep things simple,
structured
and consistent.
There is a small set of ¿primitive syntax elements¿ whose highlighting rules are linked
to conventional highlight groups (see |group-name|).

More specialized syntax elements are then linked to a corresponding primitive syntax element.
This allows a user to change the highlighting of primitives with the effect
that corresponding elements are automatically also updated.

It is also possible to override specialized groups to link them to other conventional groups or set colors directly.
This gives a high degree of flexibility with regards to customizing colorschemes for LaTeX files.

See |vimtex-syntax-reference| for tables of the most important syntax groups with examples and descriptions.
Most of LaTeX syntax is based around the ¿macro expansion¿
where forms are of  the type `\name` + `[optional group(s)]` + `{argument group(s)}`, where there
can often (not always) be white spaces and newlines between the elements.
An  argument group can often consist of other top level elements,
    but not always.
Further, since LaTeX is designed to have very strong support for typing  mathematical equations,
there are several ways to start ¿math mode¿, e.g.

    `$ ... $`,
    `$$ ... $$`,
    `\( ... \)`,
    `\[ ... \]`,
    `\begin{equation}` with `\end{equation}`.
Within math mode, there's a different subset of  commands available,
and it is common to want a slightly different highlighting  of the ¿math mode regions¿.

VimTeX's syntax script is implemented to support these basic structures as  well as ¿a large set¿ of more specific commands and elements.
The more specific  rules define groups whose names are are more specific,
and it is usually  possible to define custom highlighting of specific commands and argument  groups.

Finally, it is useful to explain the naming scheme of specialized groups.
    The  general idea can be described as follows.

  `texCmd{type}`
  `tex{type}Opt`
  `tex{type}Arg`

      A lot of LaTeX macros and commands are specified specifically with
    a given number of optional and real arguments. They may also specify what
    those arguments are. In most cases, the highlighting of `texCmd{type}` is
    linked to `texCmd` and the highlighting of `tex{type}Opt` and
    `tex{type}Arg` are respectively linked to `texOpt` and `texArg`. An
    example of this scheme is `texCmdAuthor`, `texAuthorOpt`, and
    `texAuthorArg` for `\author[...]{...}`.
      Often, but not always, `texCmd{name}` is coupled with `tex{name}*`
    groups. For example, `\include{...}` wants a file argument. The command is
    matched as `texCmdInput`, but it is followed by a `texFileArg` argument
    group.

  `tex{type}Zone`
    Some commands open specific syntax regions that have different rules. Math
    mode is a good example. Math mode is highlighted differently, and the
    syntax regions are name `texMathZone*`. The `tex{type}Zone`s may typically
    contain their own (sub)sets of syntax groups that are only matched within
    the specific region. Another example is the inclusion of nested syntax
    highlighting with e.g. the `minted` or `listings` packages.

  `tex{type}{element}`
    Some regions or commands include other types of elements, e.g. parameters
    like in `\def\name #1` where `#1` is matched as `texDefParm`. For
    completeness: `\def` is matched as `texCmdDef` and `\name` is matched as
    `texDefArgName`.

------------------------------------------------------------------------------
SYNTAX PACKAGE SPECIFICATION                           *vimtex-syntax-packages*

VimTeX provides several package specific syntax addons that provide richer
syntax highlighting. These are built around the same principles as explained
in |vimtex-syntax-core|.

The syntax improvements for a specific package are by default loaded only if
that package is detected in the current document (as explained in
|vimtex-package-detection|). This generally works well when a document is
compiled, but VimTeX may fail to detect packages for new documents or
documents that are not compiled. It is therefore possible to configure that
individual syntax packages should always load. One may also disable individual
syntax packages. See |g:vimtex_syntax_packages| for a full list of which
syntax addons exist and how to configure them.

------------------------------------------------------------------------------
SYNTAX GROUP REFERENCE                                *vimtex-syntax-reference*

The following is a reference of the main syntax groups and its default
highlighting, as well as one or more examples of what it matches. Most of the
primitive groups are linked to conventional syntax groups as listed in
|group-name|. In the examples, capital letters are used to indicate which
parts are matched by the current group. For even more details, please refer to
the code itself:
* Core elements: The `vimtex#syntax#core#init_highlights()` function in the
  file `autoload/vimtex/syntax/core.vim` specifies the default highlighting of
  the core groups.
* Package specific groups and elements are defined in the package specific
  scripts: `autoload/vimtex/syntax/p/*.vim`.

Note:
* This is only a reference of the main groups. There are also other groups
  available. See the source files for the full lists.
* The following lists might not be always completely up to date. If you find
  inconsistencies or errors, please open an issue.

Table 1: A list of groups that are only primitive link targets.~

      GROUP                DEFAULT
      ----------------------------------------------------------------------------
      texCmdType           Type
      texError             Error
      texParm              Special
      texZone              PreCondit
      texSymbol            SpecialChar

Table 2: A list of the most common normal LaTeX groups.~

      GROUP                DEFAULT      EXAMPLE
      ----------------------------------------------------------------------------
      texComment           Comment      % COMMENT
      texCommentTodo       Todo         % TODO
      texDelim             Delimiter    {, }, [, and ]
      texCmd               Statement    \CMD
      texOpt               Identifier   \cmd[OPT]
      texOptSep            NormalNC     [a, b] (commas)
      texOptEqual          texSymbol    [a=b]
      texArg               Include      \cmd[...]{ARG}
      texSpecialChar       SpecialChar  \S, \P, \$, \;, ...
      texCmdInput          texCmd       \INPUT
                                        \INCLUDE
                                        \INCLUDEONLY
                                        \INCLUDEGRAPHICS
      texCmdBib            texCmd       \BIBLIOGRAPHY
                                        \BIBLIOGRAPHYSTYLE
      texCmdClass          texCmd       \DOCUMENTCLASS
      texCmdPackage        texCmd       \USEPACKAGE
                                        \REQUIREPACKAGE
      texFileOpt           texOpt       \includegraphics[PACKAGE OPTIONS]
                                        \documentclass[CLASS OPTIONS]
      texFileArg           texArg       \input{FILE}
                                        \include{FILE}
                                        \includegraphics[...]{FILE}
                                        \bibliographystyle{FILE}
                                        \documentclass[...]{CLASS}
      texFilesOpt          texFileOpt   \usepackage[PACKAGE OPTIONS]
                                        \RequirePackage[PACKAGE OPTIONS]
      texFilesArg          texFileArg   \includeonly{FILE1, FILE2}
                                        \bibliography{FILE1, FILE2}
                                        \usepackage[...]{PACKAGE1, PACKAGE2}
                                        \RequirePackage[...]{PACKAGE1, PACKAGE2}
      texCmdTitle          texCmd       \TITLE
      texTitleArg          Underlined   \title{MAIN TITLE}
      texCmdAuthor         texCmd       \AUTHOR
      texAuthorOpt         texOpt       \author[OPT]
      texAuthorArg         NONE         \author[...]{AUTHOR LIST}
      texCmdPart           texCmd       \(SUB*)SECTION
      texPartArgTitle      String       \(sub*)section{TITLE}
      texCmdEnv            texCmd       \BEGIN; \END
      texEnvArgName        PreCondit    \begin{ENVNAME}
      texCmdRef            texCmd       \CITE; \LABEL
      texRefArg            Special      \cite{REFERENCE}; \label{REF}
      texE3Variable        texCmd       \G_MYFILE_NAME_STR
      texE3Constant        texE3Variable
                                        \C_MYFILE_NAME_STR
      texE3Function        texCmdType   \STR_NEW:n
      texE3Type            texParm      \str_new:N
      texCmdParbox         texCmd       \PARBOX[p][h][i]{w}{c}
      texBoxOptPosVal      texSymbol    \parbox[P][h][i]{w}{c}
                                        \begin{minipage}[P][h][i]{w}
      texBoxOptIPosVal     texBoxOptPosVal
                                        \parbox[p][h][I]{w}{c}
                                        \begin{minipage}[p][h][I]{w}

Table 3: A list of math mode groups.~

  GROUP                    DEFAULT        EXAMPLE
  ----------------------------------------------------------------------------
  texMathZone              Special        \( HERE \); \[ HERE \]
  texMathZoneEnv           texMathZone    \begin{menv}  HERE \end{menv}
  texMathZoneEnvStarred    texMathZone    \begin{menv*} HERE \end{menv*}
  texMathZoneX             texMathZone    $ HERE $
  texMathZoneXX            texMathZone    $$ HERE $$
  texMathZoneEnsured       texMathZone    \ensuremath{HERE}
  texCmdMathEnv            texCmdEnv      \BEGIN; \END (for math environments)
  texMathEnvArgName        Delimiter      \begin{EQUATION}
  texCmdMath               texCmd         \ENSUREMATH
  texMathDelim             Type           \LVERT
  texMathDelimMod          texMathDelim   \LEFT\lvert \RIGHT\rvert
  texMathOper              Operator       Basic operators: +-=/
  texMathSuperSub          texMathOper    Sub and super operators (^, _)
  texMathError             texError       Unmatched region endings

Table 4: A list of other important groups.~

  GROUP                DEFAULT         EXAMPLE
  ----------------------------------------------------------------------------
  texLength            Number          Length units, e.g. "4 cm". Only when
                                       contained e.g. in option groups.
  texLigature          texSymbol       --; ---; ``; ''; ,,
  texCmdAccent         texCmd          \"{a}
  texCmdLigature       texSpecialChar  \ss; \ae
  texCmdSpaceCodeChar  Special         Catcodes. For more info, see:
                                       https://en.wikibooks.org/wiki/TeX/catcode
  texCmdTodo           Todo            \TODOSOMETHING
  texCmdVerb           texCmd          \VERB
  texVerbZoneInline    texZone         \verb+VERB TEXT+
  texVerbZone          texZone         \begin{verbatim} VERB TEXT \end{verbatim}
  texCmdDef            texCmdNew       \DEF
  texDefArgName        texArgNew       \def\NAME
  texDefParm           texParm         \def\name #1
  texCmdItem           texCmd          \item


DIY_again
DIY_2  vim:filetype=help:syntax=help:
