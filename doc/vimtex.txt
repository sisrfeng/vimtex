
            *vimtex.txt*     *VimTeX*  *Vimtex*  *vimtex*

==============================================================================
Contents                                                      *vimtex-contents*

    Introduction                                  |vimtex-introduction|
        Comment on internal tex plugin              |vimtex-comment-internal|
        Feature overview                            |vimtex-features|
        Requirements                                |vimtex-requirements|
        Support for multi-file projects             |vimtex-multi-file|
        Support for TeX specifiers                  |vimtex-tex-directives|
        Package detection                           |vimtex-package-detection|
        Integration with other plugins              |vimtex-and-friends|
    Usage                                         |vimtex-usage|
        Default mappings                            |vimtex-default-mappings|
        Options                                     |vimtex-options|
        Commands                                    |vimtex-commands|
        Map definitions                             |vimtex-mappings|
        Insert mode mappings                        |vimtex-imaps|
        Events                                      |vimtex-events|
        Text objects                                |vimtex-text-objects|

    Completion                                    |vimtex-completion|
        Complete citations                          |vimtex-complete-cites|
        Complete labels                             |vimtex-complete-labels|
        Complete commands                           |vimtex-complete-commands|
        Complete environments                       |vimtex-complete-environments|
        Complete file names                         |vimtex-complete-filenames|
        Complete glossary entries                   |vimtex-complete-glossary|
        Complete packages                           |vimtex-complete-packages|
        Complete documentclasses                    |vimtex-complete-classes|
        Complete bibliographystyles                 |vimtex-complete-bibstyle|
        Autocomplete                                |vimtex-complete-auto|
            coc.nvim                                  |vimtex-complete-coc.nvim|
            deoplete                                  |vimtex-complete-deoplete|
            Neocomplete                               |vimtex-complete-neocomplete|
            ncm2                                      |vimtex-complete-ncm2|
            nvim-completion-manager                   |vimtex-complete-ncm|
            YouCompleteMe                             |vimtex-complete-youcompleteme|
            VimCompletesMe                            |vimtex-complete-vcm|
            nvim-cmp                                  |vimtex-complete-nvim-cmp|
            nvim-compe                                |vimtex-complete-nvim-compe|

    见文件2:
    Folding                                       |vimtex-folding|
    Indentation                                   |vimtex-indent|
    syn  highlighting                           |vimtex-syntax|
        syn  core specification                   |vimtex-syntax-core|
        syn  package specification                |vimtex-syntax-packages|
        syn  conceal                              |vimtex-syntax-conceal|
        syn  group reference                      |vimtex-syntax-reference|
    Navigation                                    |vimtex-navigation|
        Include expression (gf command)             |vimtex-includeexpr|
        Table of contents                           |vimtex-toc|
            Custom mappings                           |vimtex-toc-custom-maps|
        Denite/Unite source                         |vimtex-denite| / |vimtex-unite|
        fzf.vim integration                         |vimtex-fzf|
    Compilation                                   |vimtex-compiler|
        Latexmk                                     |vimtex-compiler-latexmk|
        Latexrun                                    |vimtex-compiler-latexrun|
        Tectonic                                    |vimtex-compiler-tectonic|
        Arara                                       |vimtex-compiler-arara|
        Generic                                     |vimtex-compiler-generic|
    syn  Checking (Linting)                     |vimtex-lint|
    Grammar Checking                              |vimtex-grammar|
        textidote                                   |vimtex-grammar-textidote|
        vlty                                        |vimtex-grammar-vlty|
    View                                          |vimtex-view|
        Viewer configuration                        |vimtex-view-configuration|
            Evince                                    |vimtex-view-evince|
            MuPDF                                     |vimtex-view-mupdf|
            Okular                                    |vimtex-view-okular|
            qpdfview                                  |vimtex-view-qpdfview|
            Sioyek                                    |vimtex-view-sioyek|
            SumatraPDF                                |vimtex-view-sumatrapdf|
            Zathura                                   |vimtex-view-zathura|
        Synctex                                     |vimtex-synctex|
            Forward search                            |vimtex-synctex-forward-search|
            Inverse search                            |vimtex-synctex-inverse-search|
    LaTeX Documentation                           |vimtex-latexdoc|
    Context menu                                  |vimtex-context-menu|
        Citation context                            |vimtex-context-citation|
    Code structure                                |vimtex-code|
        API                                         |vimtex-code-api|
    FAQ                                           |vimtex-faq|
    Troubleshooting                               |vimtex-troubleshooting|
    Credits                                       |vimtex-credits|
    Changelog                                     |vimtex-changelog|

==============================================================================
INTRODUCTION                                              *vimtex-introduction*

VimTeX provides convenient functionality for editing LaTeX documents.  The
main goal of VimTeX is to be simple, functional, and to be easy to customize
and evolve.

The documentation is understandably too long for a full read through. It is
recommended that new users read or skim the entire introduction, as it should
give a clear idea of what VimTeX is and is not. The remaining part of the
documentation should then be considered a reference for the various parts of
the plugin.

------------------------------------------------------------------------------
COMMENT ON INTERNAL TEX PLUGIN                        *vimtex-comment-internal*

        Vim ships with pretty decent LaTeX support out of the box.
        In particular,
        it provides syntax highlighting (|ft-tex-syntax|),
        indentation (see the source file $VIMRUNTIME/indent/tex.vim for the documentation),
        and some sensible options (|ft-tex-plugin|).

        *vimtex-tex-flavor*

                When VimTeX is active,
                it will override the internal TeX plugin for the filetype `tex` (|ft-tex-plugin|),
                        both for syntax highlighting and for filetype specific features.

                To prevent the unexpected behaviour
                        where `.tex` files by default will be recognized as the filetype `plaintex` (|ft-plaintex-syntax|) for e.g.  empty documents,
                        VimTeX overrides the filetype detection for `.tex`.
                The user may prevent this overriding by specifying the |g:tex_flavor| option something different than `'latex'`.

-----------------------------------------------------------------------------
REQUIREMENTS                                              *vimtex-requirements*

The following is a list of specific requirements for running VimTeX and some
of its key features. Windows users should also read |vimtex-faq-windows|, and
neovim users should read |vimtex-faq-neovim|.


Vim configuration

    VimTeX requires |:filetype-plugin-on| and optionally |:filetype-indent-on|.

    There are several features in VimTeX that depend on the syntax parsing used
    for syntax highlighting. Examples include functions like
    |vimtex#syntax#in_mathzone| and text objects like |<plug>(vimtex-i$)|. This
    is important to be aware of especially for neovim users who are interested
    in Tree-sitter. If you use Tree-sitter for syntax highlighting and thus
    disable the normal Vim syntax feature, then you will also loose the VimTeX
    features that depend on the built-in syntax parser.

    Some of the VimTeX scripts contain UTF-8 characters, and as such, it is
    necessary to have the 'encoding' option set to utf8. This is not necessary
    in neovim, only in Vim. Add the following to your vimrc file:


        set encoding=utf8

Compiler backend

    VimTeX uses `latexmk`, `latexrun`, `tectonic` or `arara` to compile the LaTeX document.

        `latexmk`: http://users.phys.psu.edu/~collins/software/latexmk-jcc
        "a perl script for running LaTeX the correct number of times to resolve
    cross references, etc; it also runs auxiliary programs
    (bibtex, makeindex if  necessary, and dvips and/or a previewer as requested).  It has a number of
    other useful capabilities, for example to start a previewer and then run
    latex whenever the source files are updated, so that the previewer gives an
    up-to-date view of the document. The script runs on both UNIX and MS-WINDOWS
    (XP, etc)." [Copied from the latexmk page.]  (|vimtex-compiler-latexmk|)


Clientserver  *vimtex-clientserver*
Neovim does not have this requirement.

    Vim requires |+clientserver| in order to
    allow inverse search from the PDF
    viewer to Vim (see |vimtex-synctex-inverse-search|).
    The clientserver is  used by VimTeX. Thus, if one uses Vim one must ensure that it starts
    a server.

    A server will be started automatically if Vim is running on Windows or if it
    is running in a GUI (gVim). If you use Vim under a terminal in Linux or
    MacOS, a server will not be started by default. Since Vim version 8.0.475,
    one can use |remote_startserver()| to start a server from your `vimrc` file.
    The following vimrc configuration snippet will ensure that Vim starts with
    a server, if possible:


        if empty(v:servername) && exists('*remote_startserver')
            call remote_startserver('VIM')
        en

    Alternatively, Vim can be started with the command line option
    `--servername`, e.g. `vim --servername VIM` . The simplest way to ensure
    this is to add an alias to your `.bashrc` (or similar), that is, add:


        alias vim='vim --servername VIM'

    One can use |serverlist()| to check whether a server was successfully
    started, e.g. with `:echo serverlist()`.

    Neovim does not implement the same clientserver feature. Instead, it
    implements the MessagePack-RPC protocol (see |RPC|). VimTeX relies on this
    protocol in the same fashion as the clientserver. Both Vim and neovim have
    the |v:servername| variable that contains the name/location of the server
    with which we need to communicate.

------------------------------------------------------------------------------
SUPPORT FOR MULTI-FILE PROJECTS                             *vimtex-multi-file*

VimTeX supports most multi-file documents.  The main method uses a recursive
search algorithm that should find the main LaTeX file in most cases.  For
special cases, there are several alternative methods for specifying the main
file.  These alternative methods all require some explicit declaration of the
main file.  Thus, these methods will be tried first, and the recursive search
is tried last if there are no explicit declarations that yield an appropriate
main LaTeX file candidate.

The methods are tried in the following order:
    1. Buffer variable
    2. TeX root directive
    3. Subfiles package
    4. File `.latexmain` specifier
    5. Local `latexmkrc` file specifier (from `@default_files` option)
    6. Recursive search

*b:vimtex_main*
Buffer variable
    The main file may be specified through the buffer variable `b:vimtex_main`.
    To take effect, it has to be set prior to loading the buffer. If set after
    the buffer is already loaded, |:VimtexReloadState| (by default bound to
    |<localleader>lX|) can be used to make VimTeX aware of its new value.
    A convenient way to use this feature is to add an |BufReadPre| |autocmd| in
    ones |vimrc|. An example is warranted:


        aug  VimTeX
            au!
            au BufReadPre /path/to/project/*.tex
                        \ let b:vimtex_main = '/path/to/project/main.tex'
        aug  END

    When writing such rules, one should be aware that the `*` is not the
                same as regular globbing because it also includes directory
                separators. Also, one should use `/` on every OS. See |file-pattern|
                for more info on the |autocmd| file pattern syntax.

    Users may be interested in the concept of project specific vim
                configuration. This is supported in Vim and neovim already, see 'exrc'
                and 'secure'. There are also several plugins to help work with project
                specific settings, such as:

                * https://github.com/embear/vim-localvimrc
                * https://github.com/tpope/vim-projectionist

*vimtex-tex-root*
TeX root directive
    It is also possible to specify the main TeX file with a comment in one of
    the first five lines of the current file. This is often referred to as a TeX
    directive, see |vimtex-tex-directives| for more info. The syntax is best
    described by some examples:


        %! TEX root = /path/to/my-main.tex
        % ! TeX root = ../*.tex
        %!Tex Root=**/main.tex

    As can be seen, the words "tex root" are recognized regardless of casing and
    the spaces are ignored.

    It is allowed to use a globbing pattern (see |wildcards|). If there
                are multiple matches, then VimTeX will ask for input when the buffer
                is opened.

Subfiles package  *vimtex-subfiles*  *vimtex-import*
    VimTeX also supports the `import` [0] and the `subfiles` [1] packages that
    can be used to make it easier to work with multi-file projects.
    If one uses  the `subfiles` package,
        the |:VimtexToggleMain| command is particularly  useful.
       Also note the option |g:vimtex_subfile_start_local|,
       which can be  used to automatically start in the local mode when opening a subfile  document.

    With `subfiles`, included files will typically look like this:


        \documentclass[<main-path>]{subfiles}
        \begin{document}
        ...
        \end{document}

    Here `<main-path>` is the path to the main file. It must be specified as
    relative to the particular subfile. So, given the structure:


        main.tex
        sub/sub.tex

    The header in `sub.tex` should be `\documentclass[../main.tex]{subfiles}`.
    Absolute paths like `/home/user/main.tex` are also allowed and should work
    as expected.

    [0]: https://www.ctan.org/pkg/import
    [1]: https://www.ctan.org/pkg/subfiles

File .latexmain specifier
    In some cases, it might be preferable to specify the main file by creating
    an indicator file.  The indicator file should be an empty file, and the name
    must be the name of the desired main file with `.latexmain` appended.  An
    example should make this clear:


        path/file.tex
        path/file.tex.latexmain
        path/sections/file1.tex
        path/sections/file2.tex

    Here `path/file.tex.latexmain` indicates for `file1.tex` and `file2.tex`
    that `path/file.tex` is the main LaTeX file.

Local latexmkrc file specifier
    It is possible to specify to latexmk which files to compile with the
    `@default_files` option in the `latexmkrc` configuration file. VimTeX
    supports reading this option in any LOCAL `latexmkrc` or `.latexmkrc` file.

    `@default_files` is a list of files, VimTeX will use the first
                entry that is found.

Recursive search
    If no other method provides an appropriate candidate, then the recursive
    search detects the main LaTeX file by searching for a file in the current
    and parent directories that includes the present file and has the
    `\documentclass` line.

    This should work in most cases, but it may fail if for instance the project
    structure is something like this:


        path1/main.tex
        path2/chapter.tex

    That is, the main file detection will not work for the file `chapter.tex`,
    because the main file does not live in the same folder or a parent folder.
    In this particular case, the TeX root directive should work.

    In rare cases, such as if there are _very_ many tex files in the
                directory tree, this method may be slow. One may therefore disable it
                through the option |g:vimtex_disable_recursive_main_file_detection|.

------------------------------------------------------------------------------
SUPPORT FOR TEX DIRECTIVES                              *vimtex-tex-directives*

VimTeX supports two of the commonly used TeX directives [0]: the TeX root and
the TeX program directive. The TeX root directive was already described above,
see |vimtex-tex-root|.

*vimtex-tex-program*
The TeX program directive works by specifying the TeX compiler program in
a comment in one of the first lines of the main project file. It is parsed
only when it is required by a compiler backend.

The syntax is best explained with an example:


        %! TeX program = lualatex
        %! TEX TS-program = xelatex

The left-hand side must contain the text "tex program" or "tex ts-program" and
as for |vimtex-tex-root|, the words are recognized regardless of casing and
the spaces are ignored. The right-hand side must correspond to a key in the
|g:vimtex_compiler_latexmk_engines| or |g:vimtex_compiler_latexrun_engines|
dictionaries. See also [0,1].

[0]: https://tex.stackexchange.com/q/78101/34697
[1]: https://github.com/lervag/vimtex/issues/713

------------------------------------------------------------------------------
PACKAGE DETECTION                                    *vimtex-package-detection*

    VimTeX maintains a list of latex packages that
    are required by the current project.
    This list is used by VimTeX for instance to determine which
        commands to suggest during command completion (see |vimtex-complete-commands|)
        and which  packages to look up documentation for (see |vimtex-doc-package|).
    The list can be viewed with |:VimtexInfo|.

    The package list is determined in two ways:


    1. If a `.fls` file exists having the name of the main file,
            it is scanned.
    This file is created by `latex` (or `pdflatex`, `xelatex`, ...)
            if it is  run with the `-recorder` option
            (which is set by default when using  latexmk,
            unless overridden in an initialization file).

        Parsing the `.fls`  file is done both at VimTeX initialization and
        after each ¿successful¿  compilation,  if possible.

        Parsing after successful compilations
        requires that one uses
            a) single-shot compilation.
        or
            b) continuous compilation with callbacks
                (see the `callback` option  for |g:vimtex_compiler_latexmk|),

    2. Otherwise, the preamble is parsed for `\usepackage` statements.
        This is  slower and less accurate than `.fls` file parsing.
        Therefore, it is only  done during VimTeX initialization.
        If desired, one may manually reload  VimTeX to parse the preamble again
        during an editing session.

        See  |:VimtexReload| and |<plug>(vimtex-reload)| (by default mapped to  `<localleader>lx`).

------------------------------------------------------------------------------
INTEGRATION WITH OTHER PLUGINS                             *vimtex-and-friends*

    VimTeX provides a lot of convenient and useful features for working with LaTeX
    files. However, there are several features that one might expect to be part of
    VimTeX, but that are left out because they are better served by other plugins.
    Let's call them "friends".

    The following is an overview of some such features. We also try to give hints
    and suggestions for how to best integrate with VimTeX experience, if that is
    applicable.

    * Linting and syntax checking                       |vimtex-af-linting|
    * Snippets/Templates                                |vimtex-af-snippets|
    * Tag navigation                                    |vimtex-af-tag-nav|
    * Manipulate surrounding cmds/delims/envs           |vimtex-af-surround|
    * Enhanced matching and highlighting of delimiters  |vimtex-af-enhanced-matchparen|
    * Formatting                                        |vimtex-af-formatting|
    * Filetype plugin for bib files                     |vimtex-af-ftplugin-bib|
    * Language servers (texlab & ltex)                  |vimtex-af-lsp|

    Linting and syntax checking
    *vimtex-af-linting*
        VimTeX has some support for linting through the |:compiler| command, see
        |vimtex-lint|. There exists several more dedicated, automatic linting
        plugins. The following plugins have support for (La)TeX syntax checking
        through `lacheck` [0], `chktex` [1], and `proselint` [2].

            `ale`         https://github.com/dense-analysis/ale
            `neomake`     https://github.com/neomake/neomake
            `syntastic`   https://github.com/vim-syntastic/syntastic

        `neomake` also supports `rubberinfo` [3]. One may also be interested in
        `blacktex` [4], which may be used to clean up/fix LaTeX code.

        [0]: https://www.ctan.org/pkg/lacheck
        [1]: http://www.nongnu.org/chktex/
        [2]: http://proselint.com/
        [3]: https://www.systutorials.com/docs/linux/man/1-rubber-info/
        [4]: https://github.com/nschloe/blacktex

    Snippets/Templates
    *vimtex-af-snippets*
        Snippets and/or templates are provided by for instance `neosnippet` and
        `UltiSnips`. See |vimtex-neosnippet| and |vimtex-UltiSnips| for more info.



    Tag navigation
    *vimtex-af-tag-nav*
        One may navigate by tags with the |ctrl-]| mapping, e.g. from
        `\eqref{eq:example}` to the corresponding `\label{eq:example}`. However,
        this requires that a tag file has been generated with |ctags|. I recommend
        that one uses the maintained version of ctags [0]. In addition,
        I recommend that one uses a plugin that automatically generates the tag
        files as necessary, e.g. |gutentags| [1].


    *vimtex-faq-tags*
        Q: How can I jump from a `\ref{label}` to the corresponding label?
        A: This is not a feature provided by VimTeX itself,
        but vim has very good  support for tag navigation,
        see |tags-and-searches|.


        The |ctags| support for LaTeX is somewhat lacking.
        This can be amended
            by adding some lines to your configuration file  `~/.ctags`  (or
            `.ctags.d/default.ctags` if you use Universal ctags), e.g.:

            --langdef=tex2
            --langmap=tex2:.tex
            --regex-tex2=/\\label[ \t]*\*?\{[ \t]*([^}]*)\}/\1/l,label/

        I also find |gutentags| [2] to be very convenient  for automatically generating and updating tag files.
            [2]: https://github.com/ludovicchabant/vim-gutentags

        References.
        [0]: http://stackoverflow.com/q/8119405/51634
        [1]: https://github.com/lervag/vimtex/issues/348


    *vimtex-faq-tags-bibtex*
        Q: How can I jump from a `\cite{key}` to the corresponding bibtex entry?
        A: This is not a feature provided by VimTeX itself.
            Similar to  |vimtex-faq-tags|,
            the feature is available through |tags-and-searches|.
        The following `~/.ctags` configuration will be useful
        (or  `.ctags.d/default.ctags` if you use Universal ctags):
        我放到  /home/wf/dotF/cfg/ctags/bib.ctags

        --langdef=bib
        --langmap=bib:.bib
        --regex-bib=/^@[A-Za-z]+\{([^,]+),/\1/e,entry/i
        --regex-bib=/^@article\{([^,]*)/\1/a,article/i
        --regex-bib=/^@book\{([^,]*)/\1/b,book/i
        --regex-bib=/^@booklet\{([^,]*)/\1/L,booklet/i
        --regex-bib=/^@conference\{([^,]*)/\1/c,conference/i
        --regex-bib=/^@inbook\{([^,]*)/\1/B,inbook/i
        --regex-bib=/^@incollection\{([^,]*)/\1/C,incollection/i
        --regex-bib=/^@inproceedings\{([^,]*)/\1/P,inproceedings/i
        --regex-bib=/^@manual\{([^,]*)/\1/m,manual/i
        --regex-bib=/^@mastersthesis\{([^,]*)/\1/T,mastersthesis/i
        --regex-bib=/^@misc\{([^,]*)/\1/M,misc/i
        --regex-bib=/^@phdthesis\{([^,]*)/\1/t,phdthesis/i
        --regex-bib=/^@proceedings\{([^,]*)/\1/p,proceedings/i
        --regex-bib=/^@string\{([^ "#%')(,=}{]+)/\1/s,string/i
        --regex-bib=/^@techreport\{([^,]*)/\1/r,techreport/i
        --regex-bib=/^@unpublished\{([^,]*)/\1/u,unpublished/i



    Manipulate surrounding commands/delimiters/environments  *vimtex-af-surround*
        VimTeX provides mappings that change, delete and toggle commands,
        delimiters and environments (see the `ds`, `cs` and `ts` family of
        mappings listed under |vimtex-default-mappings|).  These mappings are
        inspired by the great `surround.vim` [0] (|surround.txt|) by Tim Pope,
        which provides mappings to manipulate surrounding delimiters such as `''`,
        `""`, `()`, `[]`, `{}`, and `<>`.  As such, the mappings from VimTeX
        should work well together with, and as an extension of, `surround.vim`.
        Consider also the customization described under |vimtex-faq-surround|.
        The mappings may be repeated with the dot (|.|) command. See also
        |g:vimtex_delim_list| if you are interested in customizing the delimiter
        pairs that are recognized.

        A different possibility is to use `vim-sandwich` [1] (|sandwich.txt|) by
        Machakann, which may be considered a generalisation of `surround.vim` in
        that it can handle much more complex sets of delimiters.  `vim-sandwich`
        is relatively easy to expand with custom surroundings and has built in
        support for LaTeX-specific surroundings such as quotations, ```text''`,
        and math delimiters, `$\left(a+b\right)$`.  For a list of supported
        delimiters, see |sandwich-filetype-recipes|.  `vim-sandwich` supports
        `vim-repeat` [2] in addition to `visualrepeat.vim` [3].

        The default mappings of `vim-sandwich` differ from those of
            `surround.vim`, in that they use `s` as the prefix.  E.g., to add
            surroundings, one uses `sa{motion/textobject}{type-of-surrounding}`
            instead of `ys{motion/textobject}{type-of-surrounding}`.  If one prefers
            the map variants from `surround.vim`, these are also available as an
            option, see |sandwich-miscellaneous|.  And it is also easy to define
            custom mappings, if one prefers that.

        `vim-sandwich` actually consists of three plugins that work
            together.  One should make sure to read the docs for all of them:
            |sandwich.txt|, |operator-sandwich.txt|, and |textobj-sandwich.txt|.

        [0]: https://github.com/tpope/vim-surround
        [1]: https://github.com/machakann/vim-sandwich
        [2]: https://github.com/tpope/vim-repeat
        [3]: http://www.vim.org/scripts/script.php?script_id=3848


    *g:vimtex_matchparen_enabled*
        Enable highlighting of matching delimiters.

        This is an improved version of |matchparen|.
        It should be possible to  keep |matchparen| activated,
        which matches delimiters listed in  'matchpairs'.
        The VimTeX specific version will also match LaTeX
        specific delimiters,
            which is not possible with |matchparen|.

        If you think this feature is slow,
        see |vimtex-faq-slow-matchparen|.

        Default value: 1

        VimTeX highlights and allows navigation between matching pairs of
        delimiters including those in math mode,
        such as `\bigl(` and `\bigr)`, and
            the `\begin` and `\end` tags of environments.
        However, the implementation  may be slow
            and so one may use
            |g:vimtex_matchparen_enabled| to disable the highlighting).


    Enhanced matching and highlighting of delimiters  *vimtex-af-enhanced-matchparen*

        Alternatively,
        one may use the plugin |match-up| [0],
        which offers enhanced
            |matchparen| highlighting and `matchit.zip` style motions and |text-objects|
            for a variety of file types.
            For LaTeX documents, it:
            - Extends highlighting
              and the `%` motion to
              a number of ¿middle  delimiters¿ including
                - `\bigm` and `\middle` marked delimiters
                - `\item`s in `itemize` and `enumerate` environments
                - `\toprule`, `\midrule`, `\bottomrule` in the `tabular` environment.
                - `\if`, `\else` and `\endif`
            - Adds motions, `g%`, `[%`, and `]%`
               and text objects,
                `a%` and `i%` which move
                between matching delimiters and operate on delimited text.

        For example, with match-up enabled,

            \left( \frac{a}{b} \middle| q \right)

        the motion `%` will cycle through `\left(`, `\middle|`, and `\right)`, whereas
        with VimTeX only `\left(` and `\right)` will be matched.  The motion `g%`
        will do the same, except in reverse.

        To enable the plugin match-up
        add the following to your vimrc:
            let g:matchup_override_vimtex = 1

        Matching may become computationally intensive for complex LaTeX documents.
        If you experience slowdowns while moving the cursor,
        the following option is recommended to delay highlighting slightly while navigating:

            let g:matchup_matchparen_deferred = 1


        The exact set of delimiters recognized may differ between
            match-up and  VimTeX.
                For example,
                    the mappings `da%` and `dad` will not in general be identical,
                    particularly if you have customized VimTeX's delimiters.

        [0]: https://github.com/andymass/vim-matchup

    Formatting
    *vimtex-af-formatting*
        VimTeX has a custom |formatexpr| that may be enabled with the option
        |g:vimtex_format_enabled|. However, there are a lot of different styles for
        formatting LaTeX manuscripts. These are typically much more relevant when
        writing in collaboration with others. A good reference on this topic is [0],
        and note in particular the box "Directives for using LaTeX with version
        control systems".

        The most basic style is to hard wrap lines at a given column, e.g. 80
        columns, and this is exactly the type of formatting that is supported by
        VimTeX. However, this is usually not very friendly when collaborating with
        others, as it tends to mess up diffs between versions of the document.
        Instead, one might want to consider one of these:

            a) keeping each sentence on a line (use soft wrapping)
            b) add additional indentation for split sentences [1]
            c) use semantic line feeds [2]

        In order to make it easier to use one of these styles of formatting, one may
        want to use an external formatter:

            - latexindent.pl [3]
            - vim-bucky [4] (This is an alpha version as of October 2018)

        Further, there are a range of Vim plugins that can be used to format your
        document with external tools. Some of these also allow autoformatting of
        some kind. In no particular order:

            - neoformat [5]
            - vim-codefmt [6]
            - vim-autoformat [7]
            - ale [8]
            - vim-sentence-chopper [9]

        [0]: https://en.wikibooks.org/wiki/LaTeX/Collaborative_Writing_of_LaTeX_Documents
        [1]: http://dustycloud.org/blog/vcs-friendly-patchable-document-line-wrapping/
        [2]: https://rhodesmill.org/brandon/2012/one-sentence-per-line/
        [3]: https://github.com/cmhughes/latexindent.pl
        [4]: https://github.com/dbmrq/vim-bucky
        [5]: https://github.com/sbdchd/neoformat
        [6]: https://github.com/google/vim-codefmt
        [7]: https://github.com/Chiel92/vim-autoformat
        [8]: https://github.com/dense-analysis/ale
        [9]: https://github.com/Konfekt/vim-sentence-chopper

    Filetype plugin for bib files
    *vimtex-af-ftplugin-bib*
        VimTeX is not a full filetype plugin for bibliography (`.bib`) files.
        However,  it does alter the 'comments' and 'commentstring' options


        |g:vimtex_indent_bib_enabled| and
        |g:vimtex_fold_bib_enabled|,
        respectively.


        选项:
            _*g:vimtex_parser_bib_backend*
                This is used e.g. for gathering ¿completion¿ candidates.
                parsing bibliographies.

                    `bibtex`:   The fastest,
                                but most hacky solution.
                                Should work well in most  cases.

                    `bibparse`: Also fast, but might be more robust.

                                Bibparse is an executable provided by
                                the Perl package   https://metacpan.org/dist/Text-BibTeX
                                不好装


                    `bibtexparser`:
                                Also fast and possibly more robust.

                                pip install bibtexparser
                                https://github.com/sciunto-org/python-bibtexparser


                    `vim`:      The slowest but perhaps most robust solution,
                                as it does not  require any external utilities.

                Default value: `bibtex`

            _*g:vimtex_bibliography_commands*

                This option may be useful if one defines custom commands that includes bibliography files.

                A list of command names for commands that include bibliography files.
                Each list entry is interpreted as a pattern (very magic,
                see |/\v|)
                to match a particular command name.


                    Default value:

                            ['%(no)?bibliography', 'add%(bibresource|globalbib|sectionbib)']


        Here are a couple of other related Vim plugins and external tools that might
        be of interest:

        - `bibtool`
            An external tool for formatting, sorting, filtering, merging, and more of  `.bib` files.
            http://www.gerd-neugebauer.de/software/TeX/BibTool/

            in C and perl 先别用

        - `GooseBib`

            https://github.com/tdegeus/GooseBib

        - `tbibtools`
            A set of ruby-based bibtex-related utilities for sorting, reformatting,
            listing contents, and so on.
            Has optional Vim integration.
                https://www.vim.org/scripts/script.php?script_id=1915

        See also https://github.com/lervag/vimtex/issues/1293 for some related
        discussions.

    Language servers
    *vimtex-af-lsp*
        In recent years, language servers (LSPs) [0] have become very popular. There
        is a language server for LaTeX and bibtex called texlab [1]. It may be
        interesting both as an alternative to VimTeX and/or an addition.

        There is currently no known conflict between texlab and VimTeX, although
        there is some feature overlap. E.g., both texlab and VimTeX provides
        advanced completion in various contexts. As texlab is written in Rust and
        runs in a separate thread, it is no surprise that it will have a clear
        performance advantage. However, VimTeX does use caches to speed up
        completion which should in most cases work well.

        To use texlab, one must use an LSP client, e.g. |vim-lsp| [2], neovim's
        built-in LSP client [3], or |coc-nvim| [4, 5]. See also this VimTeX issue
        [6] for more information.

        In addition to texlab, there is also a dedicated grammar and spell checking
        language server called LTeX [7]. It relies on LanguageTool and supports both
        LaTeX and other markup languages. It may be a useful tool to use in
        conjunction with VimTeX as an alternative to |vimtex-grammar|.

        [0]: https://langserver.org/
        [1]: https://texlab.netlify.app/
        [2]: https://github.com/prabirshrestha/vim-lsp
        [3]: https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#texlab
        [4]: https://github.com/neoclide/coc.nvim
        [5]: https://github.com/fannheyward/coc-texlab
        [6]: https://github.com/lervag/vimtex/issues/1371
        [7]: https://valentjn.github.io/ltex/index.html



vim:tw=78:ts=8:ft=help:norl:fdm=marker:
DIY  vim: filetype=leo:syntax=leo:
DIY_again
DIY_2  vim:filetype=help:syntax=help:
