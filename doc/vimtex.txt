vim:filetype=help:syntax=help:

*vimtex.txt*    A modern Vim/neovim filetype and syntax plugin for LaTeX files.
*VimTeX*  *Vimtex*  *vimtex*


==============================================================================
Contents                                                      *vimtex-contents*

    Introduction                                  |vimtex-introduction|
        Comment on internal tex plugin              |vimtex-comment-internal|
        Feature overview                            |vimtex-features|
        Requirements                                |vimtex-requirements|
        Support for multi-file projects             |vimtex-multi-file|
        Support for TeX specifiers                  |vimtex-tex-directives|
        Package detection                           |vimtex-package-detection|
        Integration with other plugins              |vimtex-and-friends|
    Usage                                         |vimtex-usage|
        Default mappings                            |vimtex-default-mappings|
        Options                                     |vimtex-options|
        Commands                                    |vimtex-commands|
        Map definitions                             |vimtex-mappings|
        Insert mode mappings                        |vimtex-imaps|
        Events                                      |vimtex-events|
        Text objects                                |vimtex-text-objects|
    Completion                                    |vimtex-completion|
        Complete citations                          |vimtex-complete-cites|
        Complete labels                             |vimtex-complete-labels|
        Complete commands                           |vimtex-complete-commands|
        Complete environments                       |vimtex-complete-environments|
        Complete file names                         |vimtex-complete-filenames|
        Complete glossary entries                   |vimtex-complete-glossary|
        Complete packages                           |vimtex-complete-packages|
        Complete documentclasses                    |vimtex-complete-classes|
        Complete bibliographystyles                 |vimtex-complete-bibstyle|
        Autocomplete                                |vimtex-complete-auto|
            coc.nvim                                  |vimtex-complete-coc.nvim|
            deoplete                                  |vimtex-complete-deoplete|
            Neocomplete                               |vimtex-complete-neocomplete|
            ncm2                                      |vimtex-complete-ncm2|
            nvim-completion-manager                   |vimtex-complete-ncm|
            YouCompleteMe                             |vimtex-complete-youcompleteme|
            VimCompletesMe                            |vimtex-complete-vcm|
            nvim-cmp                                  |vimtex-complete-nvim-cmp|
            nvim-compe                                |vimtex-complete-nvim-compe|
    见文件2:
    Folding                                       |vimtex-folding|
    Indentation                                   |vimtex-indent|
    Syntax highlighting                           |vimtex-syntax|
        Syntax core specification                   |vimtex-syntax-core|
        Syntax package specification                |vimtex-syntax-packages|
        Syntax conceal                              |vimtex-syntax-conceal|
        Syntax group reference                      |vimtex-syntax-reference|
    Navigation                                    |vimtex-navigation|
        Include expression (gf command)             |vimtex-includeexpr|
        Table of contents                           |vimtex-toc|
            Custom mappings                           |vimtex-toc-custom-maps|
        Denite/Unite source                         |vimtex-denite| / |vimtex-unite|
        fzf.vim integration                         |vimtex-fzf|
    Compilation                                   |vimtex-compiler|
        Latexmk                                     |vimtex-compiler-latexmk|
        Latexrun                                    |vimtex-compiler-latexrun|
        Tectonic                                    |vimtex-compiler-tectonic|
        Arara                                       |vimtex-compiler-arara|
        Generic                                     |vimtex-compiler-generic|
    Syntax Checking (Linting)                     |vimtex-lint|
    Grammar Checking                              |vimtex-grammar|
        textidote                                   |vimtex-grammar-textidote|
        vlty                                        |vimtex-grammar-vlty|
    View                                          |vimtex-view|
        Viewer configuration                        |vimtex-view-configuration|
            Evince                                    |vimtex-view-evince|
            MuPDF                                     |vimtex-view-mupdf|
            Okular                                    |vimtex-view-okular|
            qpdfview                                  |vimtex-view-qpdfview|
            Sioyek                                    |vimtex-view-sioyek|
            SumatraPDF                                |vimtex-view-sumatrapdf|
            Zathura                                   |vimtex-view-zathura|
        Synctex                                     |vimtex-synctex|
            Forward search                            |vimtex-synctex-forward-search|
            Inverse search                            |vimtex-synctex-inverse-search|
    LaTeX Documentation                           |vimtex-latexdoc|
    Context menu                                  |vimtex-context-menu|
        Citation context                            |vimtex-context-citation|
    Code structure                                |vimtex-code|
        API                                         |vimtex-code-api|
    FAQ                                           |vimtex-faq|
    Troubleshooting                               |vimtex-troubleshooting|
    Credits                                       |vimtex-credits|
    Changelog                                     |vimtex-changelog|

==============================================================================
INTRODUCTION                                              *vimtex-introduction*

VimTeX provides convenient functionality for editing LaTeX documents.  The
main goal of VimTeX is to be simple, functional, and to be easy to customize
and evolve.

The documentation is understandably too long for a full read through. It is
recommended that new users read or skim the entire introduction, as it should
give a clear idea of what VimTeX is and is not. The remaining part of the
documentation should then be considered a reference for the various parts of
the plugin.

------------------------------------------------------------------------------
COMMENT ON INTERNAL TEX PLUGIN                        *vimtex-comment-internal*

        Vim ships with pretty decent LaTeX support out of the box.
        In particular,
        it provides syntax highlighting (|ft-tex-syntax|),
        indentation (see the source file $VIMRUNTIME/indent/tex.vim for the documentation),
        and some sensible options (|ft-tex-plugin|).

        *vimtex-tex-flavor*

                When VimTeX is active,
                it will override the internal TeX plugin for the filetype `tex` (|ft-tex-plugin|),
                        both for syntax highlighting and for filetype specific features.

                To prevent the unexpected behaviour
                        where `.tex` files by default will be recognized as the filetype `plaintex` (|ft-plaintex-syntax|) for e.g.  empty documents,
                        VimTeX overrides the filetype detection for `.tex`.
                The user may prevent this overriding by specifying the |g:tex_flavor| option something different than `'latex'`.

-----------------------------------------------------------------------------
FEATURE OVERVIEW                                              *vimtex-features*

- Document compilation with `latexmk`, `latexrun`, `tectonic` or `arara`
- LaTeX log parsing for quickfix entries using
    - internal method
    - `pplatex`
- Compilation of selected part of document
- Support for several PDF viewers with forward search
    - `MuPDF`
    - `Zathura`
    - `Okular`
    - `qpdfview`
    - `SumatraPDF`
    - Other viewers are supported through a general interface
- Completion of
    - citations
    - labels
    - commands
    - file names for figures, input/include, includepdf, includestandalone
    - glossary entries
    - package and documentclass names based on available `.sty` and `.cls` files

- Document navigation through
    - table of content
    - proper settings for |'include'|, |'includeexpr'|, |'suffixesadd'| and
        |'define'|, which among other things
        - allow |include-search| and |definition-search|
        - give enhanced |gf| command
- Easy access to (online) documentation of packages
- Word count (through `texcount`)
- Motions                                                      *vimtex-motions*
    - Move between section boundaries with `[[`, `[]`, `][`, and `]]`
    - Move between environment boundaries with `[m`, `[M`, `]m`, and `]M`
    - Move between math environment boundaries with `[n`, `[N`, `]n`, and `]N`
    - Move between frame environment boundaries with `[r`, `[R`, `]r`, and `]R`
    - Move between comment boundaries with `[*` and `]*`
    - Move between matching delimiters with `%`
- Text objects
    - `ic` `ac` Commands
    - `id` `ad` Delimiters
    - `ie` `ae` LaTeX environments
    - `i$` `a$` Math environments
    - `iP` `aP` Sections
    - `im` `am` Items
- Other mappings
    - Delete the surrounding command, environment or delimiter with
        `dsc`/`dse`/`ds$`/`dsd`
    - Change the surrounding command, environment or delimiter with
        `csc`/`cse`/`cs$`/`csd`
    - Toggle starred command or environment with `tsc`/`tse`
    - Toggle inline and displaymath with `ts$`
    - Toggle between e.g. `()` and `\left(\right)` with `tsd`/`tsD`
    - Toggle (inline) fractions with `tsf`
    - Close the current environment/delimiter in insert mode with `]]`
    - Add `\left ... \right)` modifiers to surrounding delimiters with `<F8>`
    - Insert new command with `<F7>`
    - Convenient insert mode mappings for faster typing of e.g. maths
    - Context menu on citations (e.g. `\cite{...}`) mapped to `<cr>`
- Folding
- Indentation
- Syntax highlighting
    - A consistent core syntax specification
    - General syntax highlighting for several popular LaTeX packages
    - Nested syntax highlighting for several popular LaTeX packages
    - Highlight matching delimiters
- Support for multi-file project packages
    - `import`
    - `subfiles`

------------------------------------------------------------------------------
REQUIREMENTS                                              *vimtex-requirements*

The following is a list of specific requirements for running VimTeX and some
of its key features. Windows users should also read |vimtex-faq-windows|, and
neovim users should read |vimtex-faq-neovim|.

Vim version
*vimtex_version_check*
    VimTeX requires Vim version 8.0.1453 or neovim version 0.4.3.  It will not
    load for older versions, unless one adds


        let g:vimtex_version_check = 0

    to one's `vimrc` file.  This might work, but issues due to older versions
    than the mentioned here will be ignored.

Vim configuration

    VimTeX requires |:filetype-plugin-on| and optionally |:filetype-indent-on|.

    There are several features in VimTeX that depend on the syntax parsing used
    for syntax highlighting. Examples include functions like
    |vimtex#syntax#in_mathzone| and text objects like |<plug>(vimtex-i$)|. This
    is important to be aware of especially for neovim users who are interested
    in Tree-sitter. If you use Tree-sitter for syntax highlighting and thus
    disable the normal Vim syntax feature, then you will also loose the VimTeX
    features that depend on the built-in syntax parser.

    Some of the VimTeX scripts contain UTF-8 characters, and as such, it is
    necessary to have the 'encoding' option set to utf8. This is not necessary
    in neovim, only in Vim. Add the following to your vimrc file:


        set encoding=utf8

Compiler backend

    VimTeX uses `latexmk`, `latexrun`, `tectonic` or `arara` to compile the LaTeX document.

        `latexmk`: http://users.phys.psu.edu/~collins/software/latexmk-jcc
        "a perl script for running LaTeX the correct number of times to resolve
    cross references, etc; it also runs auxiliary programs (bibtex, makeindex if
    necessary, and dvips and/or a previewer as requested).  It has a number of
    other useful capabilities, for example to start a previewer and then run
    latex whenever the source files are updated, so that the previewer gives an
    up-to-date view of the document. The script runs on both UNIX and MS-WINDOWS
    (XP, etc)." [Copied from the latexmk page.]  (|vimtex-compiler-latexmk|)

        `latexrun`: https://github.com/aclements/latexrun
        Similar to `latexmk` in that it runs the desired LaTeX engine an
    appropriate number of times, including `bibtex`/`biber`. However, it differs
    in philosophy in that it only does the build part. It does not support
    continuous builds, nor automatic starting of the viewer. However, it does
    parse the output log in order to provide a more concise list of relevant
    warnings and error messages (this has currently not been adapted to VimTeX,
    as of yet). (|vimtex-compiler-latexrun|)

        `tectonic`: https://tectonic-typesetting.github.io/
        `tectonic` is a complete, self-contained TeX/LaTeX engine, powered by XeTeX
    and TeXLive. It doesn't support continuous build like `latexmk` but it
    presents other worth mentioning features such as automatic support file
    downloading along with reproducible builds and full Unicode and OpenType
    fonts support thanks to the power of XeTeX. (|vimtex-compiler-tectonic|)

        `arara`: https://github.com/cereda/arara
        `arara` is a TeX automation tool similar to the above mentioned tools,
    but where the compilation behaviour is typically defined in the preamble
    of the document. (|vimtex-compiler-arara|)

Clientserver
*vimtex-clientserver*
    Vim requires |+clientserver| in order to allow inverse search from the PDF
    viewer to Vim (see |vimtex-synctex-inverse-search|). The clientserver is
    used by VimTeX. Thus, if one uses Vim one must ensure that it starts
    a server. Neovim does not have this requirement.

    A server will be started automatically if Vim is running on Windows or if it
    is running in a GUI (gVim). If you use Vim under a terminal in Linux or
    MacOS, a server will not be started by default. Since Vim version 8.0.475,
    one can use |remote_startserver()| to start a server from your `vimrc` file.
    The following vimrc configuration snippet will ensure that Vim starts with
    a server, if possible:


        if empty(v:servername) && exists('*remote_startserver')
            call remote_startserver('VIM')
        endif

    Alternatively, Vim can be started with the command line option
    `--servername`, e.g. `vim --servername VIM` . The simplest way to ensure
    this is to add an alias to your `.bashrc` (or similar), that is, add:


        alias vim='vim --servername VIM'

    One can use |serverlist()| to check whether a server was successfully
    started, e.g. with `:echo serverlist()`.

    Neovim does not implement the same clientserver feature. Instead, it
    implements the MessagePack-RPC protocol (see |RPC|). VimTeX relies on this
    protocol in the same fashion as the clientserver. Both Vim and neovim have
    the |v:servername| variable that contains the name/location of the server
    with which we need to communicate.

------------------------------------------------------------------------------
SUPPORT FOR MULTI-FILE PROJECTS                             *vimtex-multi-file*

VimTeX supports most multi-file documents.  The main method uses a recursive
search algorithm that should find the main LaTeX file in most cases.  For
special cases, there are several alternative methods for specifying the main
file.  These alternative methods all require some explicit declaration of the
main file.  Thus, these methods will be tried first, and the recursive search
is tried last if there are no explicit declarations that yield an appropriate
main LaTeX file candidate.

The methods are tried in the following order:
    1. Buffer variable
    2. TeX root directive
    3. Subfiles package
    4. File `.latexmain` specifier
    5. Local `latexmkrc` file specifier (from `@default_files` option)
    6. Recursive search

*b:vimtex_main*
Buffer variable
    The main file may be specified through the buffer variable `b:vimtex_main`.
    To take effect, it has to be set prior to loading the buffer. If set after
    the buffer is already loaded, |:VimtexReloadState| (by default bound to
    |<localleader>lX|) can be used to make VimTeX aware of its new value.
    A convenient way to use this feature is to add an |BufReadPre| |autocmd| in
    ones |vimrc|. An example is warranted:


        augroup VimTeX
            autocmd!
            autocmd BufReadPre /path/to/project/*.tex
                        \ let b:vimtex_main = '/path/to/project/main.tex'
        augroup END

    When writing such rules, one should be aware that the `*` is not the
                same as regular globbing because it also includes directory
                separators. Also, one should use `/` on every OS. See |file-pattern|
                for more info on the |autocmd| file pattern syntax.

    Users may be interested in the concept of project specific vim
                configuration. This is supported in Vim and neovim already, see 'exrc'
                and 'secure'. There are also several plugins to help work with project
                specific settings, such as:

                * https://github.com/embear/vim-localvimrc
                * https://github.com/tpope/vim-projectionist

*vimtex-tex-root*
TeX root directive
    It is also possible to specify the main TeX file with a comment in one of
    the first five lines of the current file. This is often referred to as a TeX
    directive, see |vimtex-tex-directives| for more info. The syntax is best
    described by some examples:


        %! TEX root = /path/to/my-main.tex
        % ! TeX root = ../*.tex
        %!Tex Root=**/main.tex

    As can be seen, the words "tex root" are recognized regardless of casing and
    the spaces are ignored.

    It is allowed to use a globbing pattern (see |wildcards|). If there
                are multiple matches, then VimTeX will ask for input when the buffer
                is opened.

Subfiles package  *vimtex-subfiles*  *vimtex-import*
    VimTeX also supports the `import` [0] and the `subfiles` [1] packages that
    can be used to make it easier to work with multi-file projects.
    If one uses  the `subfiles` package,
        the |:VimtexToggleMain| command is particularly  useful.
       Also note the option |g:vimtex_subfile_start_local|,
       which can be  used to automatically start in the local mode when opening a subfile  document.

    With `subfiles`, included files will typically look like this:


        \documentclass[<main-path>]{subfiles}
        \begin{document}
        ...
        \end{document}

    Here `<main-path>` is the path to the main file. It must be specified as
    relative to the particular subfile. So, given the structure:


        main.tex
        sub/sub.tex

    The header in `sub.tex` should be `\documentclass[../main.tex]{subfiles}`.
    Absolute paths like `/home/user/main.tex` are also allowed and should work
    as expected.

    [0]: https://www.ctan.org/pkg/import
    [1]: https://www.ctan.org/pkg/subfiles

File .latexmain specifier
    In some cases, it might be preferable to specify the main file by creating
    an indicator file.  The indicator file should be an empty file, and the name
    must be the name of the desired main file with `.latexmain` appended.  An
    example should make this clear:


        path/file.tex
        path/file.tex.latexmain
        path/sections/file1.tex
        path/sections/file2.tex

    Here `path/file.tex.latexmain` indicates for `file1.tex` and `file2.tex`
    that `path/file.tex` is the main LaTeX file.

Local latexmkrc file specifier
    It is possible to specify to latexmk which files to compile with the
    `@default_files` option in the `latexmkrc` configuration file. VimTeX
    supports reading this option in any LOCAL `latexmkrc` or `.latexmkrc` file.

    `@default_files` is a list of files, VimTeX will use the first
                entry that is found.

Recursive search
    If no other method provides an appropriate candidate, then the recursive
    search detects the main LaTeX file by searching for a file in the current
    and parent directories that includes the present file and has the
    `\documentclass` line.

    This should work in most cases, but it may fail if for instance the project
    structure is something like this:


        path1/main.tex
        path2/chapter.tex

    That is, the main file detection will not work for the file `chapter.tex`,
    because the main file does not live in the same folder or a parent folder.
    In this particular case, the TeX root directive should work.

    In rare cases, such as if there are _very_ many tex files in the
                directory tree, this method may be slow. One may therefore disable it
                through the option |g:vimtex_disable_recursive_main_file_detection|.

------------------------------------------------------------------------------
SUPPORT FOR TEX DIRECTIVES                              *vimtex-tex-directives*

VimTeX supports two of the commonly used TeX directives [0]: the TeX root and
the TeX program directive. The TeX root directive was already described above,
see |vimtex-tex-root|.

*vimtex-tex-program*
The TeX program directive works by specifying the TeX compiler program in
a comment in one of the first lines of the main project file. It is parsed
only when it is required by a compiler backend.

The syntax is best explained with an example:


        %! TeX program = lualatex
        %! TEX TS-program = xelatex

The left-hand side must contain the text "tex program" or "tex ts-program" and
as for |vimtex-tex-root|, the words are recognized regardless of casing and
the spaces are ignored. The right-hand side must correspond to a key in the
|g:vimtex_compiler_latexmk_engines| or |g:vimtex_compiler_latexrun_engines|
dictionaries. See also [0,1].

[0]: https://tex.stackexchange.com/q/78101/34697
[1]: https://github.com/lervag/vimtex/issues/713

------------------------------------------------------------------------------
PACKAGE DETECTION                                    *vimtex-package-detection*

VimTeX maintains a list of latex packages that
are required by the current project.
This list is used by VimTeX for instance to determine which
commands to suggest during command completion (see |vimtex-complete-commands|)
and which  packages to look up documentation for (see |vimtex-doc-package|).
The list can be viewed with |:VimtexInfo|.

The package list is determined in two ways:


1. If a `.fls` file exists having the name of the main file,
        it is scanned.
   This file is created by `latex` (or `pdflatex`, `xelatex`, ...)
        if it is  run with the `-recorder` option
        (which is set by default when using  latexmk,
        unless overridden in an initialization file).

    Parsing the `.fls`  file is done both at VimTeX initialization and
    after each ¿successful¿  compilation,  if possible.

    Parsing after successful compilations requires that one uses
        a) continuous compilation with callbacks
            (see the `callback` option  for |g:vimtex_compiler_latexmk|), or
        b) single-shot compilation.

2. Otherwise, the preamble is parsed for `\usepackage` statements.
    This is  slower and less accurate than `.fls` file parsing.
    Therefore, it is only  done during VimTeX initialization.
    If desired, one may manually reload  VimTeX to parse the preamble again
    during an editing session.

    See  |:VimtexReload| and |<plug>(vimtex-reload)| (by default mapped to  `<localleader>lx`).

------------------------------------------------------------------------------
INTEGRATION WITH OTHER PLUGINS                             *vimtex-and-friends*

    VimTeX provides a lot of convenient and useful features for working with LaTeX
    files. However, there are several features that one might expect to be part of
    VimTeX, but that are left out because they are better served by other plugins.
    Let's call them "friends".

    The following is an overview of some such features. We also try to give hints
    and suggestions for how to best integrate with VimTeX experience, if that is
    applicable.

    * Linting and syntax checking                       |vimtex-af-linting|
    * Snippets/Templates                                |vimtex-af-snippets|
    * Tag navigation                                    |vimtex-af-tag-nav|
    * Manipulate surrounding cmds/delims/envs           |vimtex-af-surround|
    * Enhanced matching and highlighting of delimiters  |vimtex-af-enhanced-matchparen|
    * Formatting                                        |vimtex-af-formatting|
    * Filetype plugin for bib files                     |vimtex-af-ftplugin-bib|
    * Language servers (texlab & ltex)                  |vimtex-af-lsp|

    Linting and syntax checking
    *vimtex-af-linting*
        VimTeX has some support for linting through the |:compiler| command, see
        |vimtex-lint|. There exists several more dedicated, automatic linting
        plugins. The following plugins have support for (La)TeX syntax checking
        through `lacheck` [0], `chktex` [1], and `proselint` [2].

            `ale`         https://github.com/dense-analysis/ale
            `neomake`     https://github.com/neomake/neomake
            `syntastic`   https://github.com/vim-syntastic/syntastic

        `neomake` also supports `rubberinfo` [3]. One may also be interested in
        `blacktex` [4], which may be used to clean up/fix LaTeX code.

        [0]: https://www.ctan.org/pkg/lacheck
        [1]: http://www.nongnu.org/chktex/
        [2]: http://proselint.com/
        [3]: https://www.systutorials.com/docs/linux/man/1-rubber-info/
        [4]: https://github.com/nschloe/blacktex

    Snippets/Templates
    *vimtex-af-snippets*
        Snippets and/or templates are provided by for instance `neosnippet` and
        `UltiSnips`. See |vimtex-neosnippet| and |vimtex-UltiSnips| for more info.



    Tag navigation
    *vimtex-af-tag-nav*
        One may navigate by tags with the |ctrl-]| mapping, e.g. from
        `\eqref{eq:example}` to the corresponding `\label{eq:example}`. However,
        this requires that a tag file has been generated with |ctags|. I recommend
        that one uses the maintained version of ctags [0]. In addition,
        I recommend that one uses a plugin that automatically generates the tag
        files as necessary, e.g. |gutentags| [1].


    *vimtex-faq-tags*
        Q: How can I jump from a `\ref{label}` to the corresponding label?
        A: This is not a feature provided by VimTeX itself,
        but vim has very good  support for tag navigation,
        see |tags-and-searches|.


        The |ctags| support for LaTeX is somewhat lacking.
        This can be amended
            by adding some lines to your configuration file  `~/.ctags`  (or
            `.ctags.d/default.ctags` if you use Universal ctags), e.g.:

            --langdef=tex2
            --langmap=tex2:.tex
            --regex-tex2=/\\label[ \t]*\*?\{[ \t]*([^}]*)\}/\1/l,label/

        I also find |gutentags| [2] to be very convenient  for automatically generating and updating tag files.
            [2]: https://github.com/ludovicchabant/vim-gutentags

        References.
        [0]: http://stackoverflow.com/q/8119405/51634
        [1]: https://github.com/lervag/vimtex/issues/348


    *vimtex-faq-tags-bibtex*
        Q: How can I jump from a `\cite{key}` to the corresponding bibtex entry?
        A: This is not a feature provided by VimTeX itself.
            Similar to  |vimtex-faq-tags|,
            the feature is available through |tags-and-searches|.
        The following `~/.ctags` configuration will be useful
        (or  `.ctags.d/default.ctags` if you use Universal ctags):
        我放到  /home/wf/dotF/cfg/ctags/bib.ctags

        --langdef=bib
        --langmap=bib:.bib
        --regex-bib=/^@[A-Za-z]+\{([^,]+),/\1/e,entry/i
        --regex-bib=/^@article\{([^,]*)/\1/a,article/i
        --regex-bib=/^@book\{([^,]*)/\1/b,book/i
        --regex-bib=/^@booklet\{([^,]*)/\1/L,booklet/i
        --regex-bib=/^@conference\{([^,]*)/\1/c,conference/i
        --regex-bib=/^@inbook\{([^,]*)/\1/B,inbook/i
        --regex-bib=/^@incollection\{([^,]*)/\1/C,incollection/i
        --regex-bib=/^@inproceedings\{([^,]*)/\1/P,inproceedings/i
        --regex-bib=/^@manual\{([^,]*)/\1/m,manual/i
        --regex-bib=/^@mastersthesis\{([^,]*)/\1/T,mastersthesis/i
        --regex-bib=/^@misc\{([^,]*)/\1/M,misc/i
        --regex-bib=/^@phdthesis\{([^,]*)/\1/t,phdthesis/i
        --regex-bib=/^@proceedings\{([^,]*)/\1/p,proceedings/i
        --regex-bib=/^@string\{([^ "#%')(,=}{]+)/\1/s,string/i
        --regex-bib=/^@techreport\{([^,]*)/\1/r,techreport/i
        --regex-bib=/^@unpublished\{([^,]*)/\1/u,unpublished/i



    Manipulate surrounding commands/delimiters/environments
    *vimtex-af-surround*
        VimTeX provides mappings that change, delete and toggle commands,
        delimiters and environments (see the `ds`, `cs` and `ts` family of
        mappings listed under |vimtex-default-mappings|).  These mappings are
        inspired by the great `surround.vim` [0] (|surround.txt|) by Tim Pope,
        which provides mappings to manipulate surrounding delimiters such as `''`,
        `""`, `()`, `[]`, `{}`, and `<>`.  As such, the mappings from VimTeX
        should work well together with, and as an extension of, `surround.vim`.
        Consider also the customization described under |vimtex-faq-surround|.
        The mappings may be repeated with the dot (|.|) command. See also
        |g:vimtex_delim_list| if you are interested in customizing the delimiter
        pairs that are recognized.

        A different possibility is to use `vim-sandwich` [1] (|sandwich.txt|) by
        Machakann, which may be considered a generalisation of `surround.vim` in
        that it can handle much more complex sets of delimiters.  `vim-sandwich`
        is relatively easy to expand with custom surroundings and has built in
        support for LaTeX-specific surroundings such as quotations, ```text''`,
        and math delimiters, `$\left(a+b\right)$`.  For a list of supported
        delimiters, see |sandwich-filetype-recipes|.  `vim-sandwich` supports
        `vim-repeat` [2] in addition to `visualrepeat.vim` [3].

        The default mappings of `vim-sandwich` differ from those of
            `surround.vim`, in that they use `s` as the prefix.  E.g., to add
            surroundings, one uses `sa{motion/textobject}{type-of-surrounding}`
            instead of `ys{motion/textobject}{type-of-surrounding}`.  If one prefers
            the map variants from `surround.vim`, these are also available as an
            option, see |sandwich-miscellaneous|.  And it is also easy to define
            custom mappings, if one prefers that.

        `vim-sandwich` actually consists of three plugins that work
            together.  One should make sure to read the docs for all of them:
            |sandwich.txt|, |operator-sandwich.txt|, and |textobj-sandwich.txt|.

        [0]: https://github.com/tpope/vim-surround
        [1]: https://github.com/machakann/vim-sandwich
        [2]: https://github.com/tpope/vim-repeat
        [3]: http://www.vim.org/scripts/script.php?script_id=3848

    Enhanced matching and highlighting of delimiters
    *vimtex-af-enhanced-matchparen*
        VimTeX highlights and allows navigation between matching pairs of
        delimiters including those in math mode, such as `\bigl(` and `\bigr)`, and
        the `\begin` and `\end` tags of environments. However, the implementation
        may be slow (see also |vimtex-faq-slow-matchparen|, and so one may use
        |g:vimtex_matchparen_enabled| to disable the highlighting).

        Alternatively, one may use the plugin |match-up| [0], which offers enhanced
        |matchparen| highlighting and `matchit.zip` style motions and |text-objects|
        for a variety of file types.  For LaTeX documents, it:
            - Extends highlighting and the `%` motion to a number of middle
                delimiters including
                    - `\bigm` and `\middle` marked delimiters
                    - `\item`s in `itemize` and `enumerate` environments
                    - `\toprule`, `\midrule`, `\bottomrule` in the `tabular` environment.
                    - `\if`, `\else` and `\endif`
                VimTeX does not support highlighting the middle delimiters.
            - Adds motions, `g%`, `[%`, and `]%` and text objects, `a%` and `i%` which move
                between matching delimiters and operate on delimited text.

        For example, with match-up enabled,


            \left( \frac{a}{b} \middle| q \right)

        the motion `%` will cycle through `\left(`, `\middle|`, and `\right)`, whereas
        with VimTeX only `\left(` and `\right)` will be matched.  The motion `g%`
        will do the same, except in reverse.

        To enable the plugin match-up after installation, add the following to
        your vimrc:


            let g:matchup_override_vimtex = 1

        Matching may become computationally intensive for complex LaTeX documents.
        If you experience slowdowns while moving the cursor, the following option
        is recommended to delay highlighting slightly while navigating:


            let g:matchup_matchparen_deferred = 1

        The exact set of delimiters recognized may differ between match-up
            and VimTeX.  For example, the mappings `da%` and `dad` will not in general
            be identical, particularly if you have customized VimTeX's delimiters.

        [0]: https://github.com/andymass/vim-matchup

    Formatting
    *vimtex-af-formatting*
        VimTeX has a custom |formatexpr| that may be enabled with the option
        |g:vimtex_format_enabled|. However, there are a lot of different styles for
        formatting LaTeX manuscripts. These are typically much more relevant when
        writing in collaboration with others. A good reference on this topic is [0],
        and note in particular the box "Directives for using LaTeX with version
        control systems".

        The most basic style is to hard wrap lines at a given column, e.g. 80
        columns, and this is exactly the type of formatting that is supported by
        VimTeX. However, this is usually not very friendly when collaborating with
        others, as it tends to mess up diffs between versions of the document.
        Instead, one might want to consider one of these:

            a) keeping each sentence on a line (use soft wrapping)
            b) add additional indentation for split sentences [1]
            c) use semantic line feeds [2]

        In order to make it easier to use one of these styles of formatting, one may
        want to use an external formatter:

            - latexindent.pl [3]
            - vim-bucky [4] (This is an alpha version as of October 2018)

        Further, there are a range of Vim plugins that can be used to format your
        document with external tools. Some of these also allow autoformatting of
        some kind. In no particular order:

            - neoformat [5]
            - vim-codefmt [6]
            - vim-autoformat [7]
            - ale [8]
            - vim-sentence-chopper [9]

        [0]: https://en.wikibooks.org/wiki/LaTeX/Collaborative_Writing_of_LaTeX_Documents
        [1]: http://dustycloud.org/blog/vcs-friendly-patchable-document-line-wrapping/
        [2]: https://rhodesmill.org/brandon/2012/one-sentence-per-line/
        [3]: https://github.com/cmhughes/latexindent.pl
        [4]: https://github.com/dbmrq/vim-bucky
        [5]: https://github.com/sbdchd/neoformat
        [6]: https://github.com/google/vim-codefmt
        [7]: https://github.com/Chiel92/vim-autoformat
        [8]: https://github.com/dense-analysis/ale
        [9]: https://github.com/Konfekt/vim-sentence-chopper

    Filetype plugin for bib files
    *vimtex-af-ftplugin-bib*
        VimTeX is not a full filetype plugin for bibliography (`.bib`) files. However,
        it does alter the 'comments' and 'commentstring' options and provide basic
        indentation and folding; see |g:vimtex_indent_bib_enabled| and
        |g:vimtex_fold_bib_enabled|, respectively.

        Here are a couple of other related Vim plugins and external tools that might
        be of interest:

        - `bibtool`
            An external tool for formatting, sorting, filtering, merging, and more of
            `.bib` files.
            http://www.gerd-neugebauer.de/software/TeX/BibTool/
        - `GooseBib`
            Some simple command-line tools to clean-up / modify BibTeX files.
            https://github.com/tdegeus/GooseBib
        - `tbibtools`
            A set of ruby-based bibtex-related utilities for sorting, reformatting,
            listing contents, and so on. Has optional Vim integration.
            https://www.vim.org/scripts/script.php?script_id=1915

        See also https://github.com/lervag/vimtex/issues/1293 for some related
        discussions.

    Language servers
    *vimtex-af-lsp*
        In recent years, language servers (LSPs) [0] have become very popular. There
        is a language server for LaTeX and bibtex called texlab [1]. It may be
        interesting both as an alternative to VimTeX and/or an addition.

        There is currently no known conflict between texlab and VimTeX, although
        there is some feature overlap. E.g., both texlab and VimTeX provides
        advanced completion in various contexts. As texlab is written in Rust and
        runs in a separate thread, it is no surprise that it will have a clear
        performance advantage. However, VimTeX does use caches to speed up
        completion which should in most cases work well.

        To use texlab, one must use an LSP client, e.g. |vim-lsp| [2], neovim's
        built-in LSP client [3], or |coc-nvim| [4, 5]. See also this VimTeX issue
        [6] for more information.

        In addition to texlab, there is also a dedicated grammar and spell checking
        language server called LTeX [7]. It relies on LanguageTool and supports both
        LaTeX and other markup languages. It may be a useful tool to use in
        conjunction with VimTeX as an alternative to |vimtex-grammar|.

        [0]: https://langserver.org/
        [1]: https://texlab.netlify.app/
        [2]: https://github.com/prabirshrestha/vim-lsp
        [3]: https://github.com/neovim/nvim-lspconfig/blob/master/doc/server_configurations.md#texlab
        [4]: https://github.com/neoclide/coc.nvim
        [5]: https://github.com/fannheyward/coc-texlab
        [6]: https://github.com/lervag/vimtex/issues/1371
        [7]: https://valentjn.github.io/ltex/index.html

==============================================================================
USAGE                                                            *vimtex-usage*

    Default mappings        |vimtex-default-mappings|
    Options                 |vimtex-options|
    Commands                |vimtex-commands|
    Map definitions         |vimtex-mappings|
    Insert mode mappings    |vimtex-imaps|
    Events                  |vimtex-events|

------------------------------------------------------------------------------
DEFAULT MAPPINGS                                      *vimtex-default-mappings*

    VimTeX is designed to be controlled by a selection of mappings.
    Note,
    that most of the mappings are also available as commands,
    see  |vimtex-commands|.

    Many of the mappings utilize the |maplocalleader|.
    The right-hand sides are provided as <plug>-mappings,
    see |using-<plug>|.
    For any given <plug> map,
    the  default mapping will only be created if it does not already exist. This means
    that  if a user defines a custom mapping, e.g. with
        nmap <space>li <plug>(vimtex-info)

        then the corresponding default left-hand side will not be mapped.

    If one prefers,
    one may disable all the default mappings through the option |g:vimtex_mappings_enabled|.
    Custom mappings for all desired features must then be defined through the listed RHS <plug>-maps or
    by mapping the available  commands.

    In the below list of mappings,
    LHS is the default mapping,
    RHS is the corresponding <plug>-maps,
    and MODE indicates in which
    vim mode the mappings are valid.
    See |map-modes| for an explanation of the various modes.
    The indicator refers to the prefix of the corresponding map command,  e.g.
    `n`  refers to an |nmap|, `nx` refers to both |nmap| and |xmap|, and so on.

    In addition to the mappings listed below,
    VimTeX provides convenient insert mode mappings to make it easier and faster to type mathematical equations.
    This feature is explained in more detail later,
    see |vimtex-imaps|.

        ---------------------------------------------------------------------
         LHS              RHS                                          MODE
        ---------------------------------------------------------------------
         <localleader>li  |<plug>(vimtex-info)|                           `n`
         <localleader>lI  |<plug>(vimtex-info-full)|                      `n`
         <localleader>lt  |<plug>(vimtex-toc-open)|                       `n`
         <localleader>lT  |<plug>(vimtex-toc-toggle)|                     `n`
         <localleader>lq  |<plug>(vimtex-log)|                            `n`
         <localleader>lv  |<plug>(vimtex-view)|                           `n`
         <localleader>lr  |<plug>(vimtex-reverse-search)|                 `n`
         <localleader>ll  |<plug>(vimtex-compile)|                        `n`
         <localleader>lL  |<plug>(vimtex-compile-selected)|               `nx`
         <localleader>lk  |<plug>(vimtex-stop)|                           `n`
         <localleader>lK  |<plug>(vimtex-stop-all)|                       `n`
         <localleader>le  |<plug>(vimtex-errors)|                         `n`
         <localleader>lo  |<plug>(vimtex-compile-output)|                 `n`
         <localleader>lg  |<plug>(vimtex-status)|                         `n`
         <localleader>lG  |<plug>(vimtex-status-all)|                     `n`
         <localleader>lc  |<plug>(vimtex-clean)|                          `n`
         <localleader>lC  |<plug>(vimtex-clean-full)|                     `n`
         <localleader>lm  |<plug>(vimtex-imaps-list)|                     `n`
         <localleader>lx  |<plug>(vimtex-reload)|                         `n`
         <localleader>lX  |<plug>(vimtex-reload-state)|                   `n`
         <localleader>ls  |<plug>(vimtex-toggle-main)|                    `n`
         <localleader>la  |<plug>(vimtex-context-menu)|                   `n`
         dse              |<plug>(vimtex-env-delete)|                     `n`
         dsc              |<plug>(vimtex-cmd-delete)|                     `n`
         ds$              |<plug>(vimtex-env-delete-math)|                `n`
         dsd              |<plug>(vimtex-delim-delete)|                   `n`
         cse              |<plug>(vimtex-env-change)|                     `n`
         csc              |<plug>(vimtex-cmd-change)|                     `n`
         cs$              |<plug>(vimtex-env-change-math)|                `n`
         csd              |<plug>(vimtex-delim-change-math)|              `n`
         tsf              |<plug>(vimtex-cmd-toggle-frac)|                `nx`
         tsc              |<plug>(vimtex-cmd-toggle-star)|                `n`
         tse              |<plug>(vimtex-env-toggle-star)|                `n`
         ts$              |<plug>(vimtex-env-toggle-math)|                `n`
         tsd              |<plug>(vimtex-delim-toggle-modifier)|          `nx`
         tsD              |<plug>(vimtex-delim-toggle-modifier-reverse)|  `nx`
         <F7>             |<plug>(vimtex-cmd-create)|                     `nxi`
         ]]               |<plug>(vimtex-delim-close)|                    `i`
         <F8>             |<plug>(vimtex-delim-add-modifiers)|            `n`
         ac               |<plug>(vimtex-ac)|                             `xo`
         ic               |<plug>(vimtex-ic)|                             `xo`
         ad               |<plug>(vimtex-ad)|                             `xo`
         id               |<plug>(vimtex-id)|                             `xo`
         ae               |<plug>(vimtex-ae)|                             `xo`
         ie               |<plug>(vimtex-ie)|                             `xo`
         a$               |<plug>(vimtex-a$)|                             `xo`
         i$               |<plug>(vimtex-i$)|                             `xo`
         aP               |<plug>(vimtex-aP)|                             `xo`
         iP               |<plug>(vimtex-iP)|                             `xo`
         am               |<plug>(vimtex-am)|                             `xo`
         im               |<plug>(vimtex-im)|                             `xo`
         %                |<plug>(vimtex-%)|                              `nxo`
         ]]               |<plug>(vimtex-]])|                             `nxo`
         ][               |<plug>(vimtex-][)|                             `nxo`
         []               |<plug>(vimtex-[])|                             `nxo`
         [[               |<plug>(vimtex-[[)|                             `nxo`
         ]m               |<plug>(vimtex-]m)|                             `nxo`
         ]M               |<plug>(vimtex-]M)|                             `nxo`
         [m               |<plug>(vimtex-[m)|                             `nxo`
         [M               |<plug>(vimtex-[M)|                             `nxo`
         ]n               |<plug>(vimtex-]n)|                             `nxo`
         ]N               |<plug>(vimtex-]N)|                             `nxo`
         [n               |<plug>(vimtex-[n)|                             `nxo`
         [N               |<plug>(vimtex-[N)|                             `nxo`
         ]r               |<plug>(vimtex-]r)|                             `nxo`
         ]R               |<plug>(vimtex-]R)|                             `nxo`
         [r               |<plug>(vimtex-[r)|                             `nxo`
         [R               |<plug>(vimtex-[R)|                             `nxo`
         ]/               |<plug>(vimtex-]/|                              `nxo`
         ]*               |<plug>(vimtex-]star|                           `nxo`
         [/               |<plug>(vimtex-[/|                              `nxo`
         [*               |<plug>(vimtex-[star|                           `nxo`
         K                |<plug>(vimtex-doc-package)|                    `n`
        ---------------------------------------------------------------------

------------------------------------------------------------------------------
OPTIONS                                                        *vimtex-options*

    *g:vimtex_enabled*
        Set to 0 to disable VimTeX.
        Default value: Undefined.

    *g:vimtex_cache_root*
        Specify the cache directory for VimTeX.

        Default value:
            `'$XDG_CACHE_HOME/vimtex'`   if `$XDG_CACHE_HOME` is defined
            `'~/.cache/vimtex'`          otherwise

    *g:vimtex_cache_persistent*
        Specify whether to use persistent caching.

        Default value: 1


    *g:vimtex_compiler_latexrun*
        This dictionary allows customization of the |vimtex-compiler-latexrun|
        compiler. The values set by the user will take precedence over the default
        values.

        Default value:


            let g:vimtex_compiler_latexrun = {
                    \ 'build_dir' : '',
                    \ 'options' : [
                    \   '-verbose-cmds',
                    \   '--latex-args="-synctex=1"',
                    \ ],
                    \}

        The default value shows which entries may be changed. Here the different
        keys are explained in more detail:

        build_dir
            Same as |g:vimtex_compiler_latexmk| / `build_dir`.

        options
            This is a list of options that are passed to `latexrun`. The default
            options should work well for most people.

            By default, the option `-pdf` is also supplied to indicate the LaTeX
                        engine. This may be changed on a per project basis with TeX
                        directives, see |vimtex-tex-program| or the two compiler-specific
                        options |g:vimtex_compiler_latexmk_engines| and
                        |g:vimtex_compiler_latexrun_engines|. The latter two options may
                        also be used to change the default engine.

    *g:vimtex_compiler_latexrun_engines*
        Defines a map between TeX program directive (|vimtex-tex-program|) and
        compiler engine, i.e. as should be specified to the `--latex-cmd` argument
        to `latexrun`. This is used by |vimtex-compiler-latexrun| to define the
        LaTeX program. The `_` key defines the default engine.

        Default value:


            let g:vimtex_compiler_latexrun_engines = {
                    \ '_'                : 'pdflatex',
                    \ 'pdflatex'         : 'pdflatex',
                    \ 'lualatex'         : 'lualatex',
                    \ 'xelatex'          : 'xelatex',
                    \}

    *g:vimtex_compiler_tectonic*
        This dictionary allows customization of the |vimtex-compiler-tectonic|
        compiler. The values set by the user will take precedence over the default
        values.

        Default value:


            let g:vimtex_compiler_tectonic = {
                    \ 'build_dir' : '',
                    \ 'options' : [
                    \   '--keep-logs',
                    \   '--synctex'
                    \ ],
                    \}

        The default value shows which entries may be changed. Here the different
        keys are explained in more detail:

        build_dir
            Same as |g:vimtex_compiler_latexmk| / `build_dir`.

        options
            This is a list of options that are passed to `tectonic`. The default
            options should work well for most people. For anyone who wishes to modify
            these, please note:
            - Don't use `--outdir` or `-o` here. Use the `build_dir` option instead.
            - Without `--keep-logs` (or `--keep-intermediates` or `-k)`,
                you won't see  errors/warnings in the quickfix list when compilations finish.
            - By default, `tectonic` cleans all auxiliary files (such as `.aux`,
                `.toc`, etc.). If you omit the `--keep-logs` (or similar) options that
                specify to keep these files, |:VimtexClean| and |<plug>(vimtex-clean)|
                won't delete anything (as there is nothing to delete).

    *g:vimtex_compiler_arara*
        This dictionary allows customization of the |vimtex-compiler-arara|
        compiler. The values set by the user will take precedence over the default
        values.

        Default value:


            let g:vimtex_compiler_arara = {
                    \ 'options' : ['--log'],
                    \}

        The default value shows which entries may be changed. Here the different
        keys are explained in more detail:

        options
            This is a list of options that are passed to `arara`. The default options
            should work well for most people.

    *g:vimtex_compiler_generic*
        This dictionary allows customization of the |vimtex-compiler-generic|
        compiler. This compiler is, as the name hints, generic. It allows to specify
        a custom command to run for compilation. As for the other compilers, the
        configuration values set by the user will take precedence over the default
        values.

        This could be used e.g. to run `make` or something like that.

        Default value:


            let g:vimtex_compiler_generic = {
                    \ 'command' : '',
                    \}

        The default value shows which entries may be changed. Here the different
        keys are explained in more detail:

        command
            This is the command to run to start compilation. This can be any command,
            and the command is run from the project root.

    *g:vimtex_complete_enabled*
        Use this option to disable/enable VimTeX completion.

        Default value: 1

    *g:vimtex_complete_smart_case*
        If enabled, then VimTeX will filter case sensitive if there is a capital
        letter in the completion input. This is only relevant if
        |g:vimtex_complete_ignore_case| is also enabled.

        Default value: Same as your 'smartcase' value

    *g:vimtex_complete_ignore_case*
        If enabled, then VimTeX will filter case insensitive.

        Default value: Same as your 'ignorecase' value

    *g:vimtex_complete_close_braces*

        This option controls whether to append a closing brace after a label or
        a citation has been completed.

        Default value: 0

    *g:vimtex_parser_bib_backend*
        This option sets the desired default backend for parsing bibliographies.
        This is used e.g. for gathering completion candidates. Possible values:

            `bibtex`:   The fastest, but most hacky solution. Should work well in most
                                cases.

            `bibparse`: Also fast, but might be more robust.

                                Bibparse is an executable provided by the Perl package
                                            Text-BibTeX [0]. It should not be confused with the
                                            similarly named Python project [1]. The latter is
                                            deprecated in favor of GooseBib [2]. The Python projects
                                            bibparse and GooseBib are both based on the Python library
                                            `bibtexparser`.

                                            [0]: https://metacpan.org/dist/Text-BibTeX
                                            [1]: https://github.com/tdegeus/bibparse
                                            [2]: https://github.com/tdegeus/GooseBib

            `bibtexparser`:
                                Also fast and possibly more robust. See the project Github
                                page for more details:
                                https://github.com/sciunto-org/python-bibtexparser

                                This requires that Python 3 is available to Vim/neovim
                                            (see |if_pyth| and |py3|) and that the `bibtexparser`
                                            Python module is installed and available.

            `vim`:      The slowest but perhaps most robust solution, as it does not
                                require any external utilities.

        Default value: `bibtex`

    *g:vimtex_bibliography_commands*
            A list of command names for commands that include bibliography files.
            Each list entry is interpreted as a pattern (very magic, see |/\v|) to
            match a particular command name. This option may be useful if one defines
            custom commands that includes bibliography files.

            Default value:

                    ['%(no)?bibliography', 'add%(bibresource|globalbib|sectionbib)']

    *g:vimtex_complete_bib*
        This option is a dictionary for controlling the citation completion. The
        keys each control a different thing as explained below.

        simple
            Default value: 0
            If zero, then the cite completion is "smart", i.e. not simple. This
            behaviour is described in more detail in |vimtex-complete-cites|.

            It is usually better to use the "simple" mode if you use an
                        autocomplete plugin (|vimtex-complete-auto|).

    *g:vimtex_complete_bib.match_str_fmt*
        match_str_fmt
            Default value: `'@key [@type] @author_all (@year), "@title"'`
            The format used for the match string for bib completion candidates. That
            is, the string that the smart mode candidate matching is matched against.
            See |vimtex-complete-cites| for more info. The following keys may be used
            to define the string:


                @author_all    Full author list
                @author_short  Shortened author list
                @key           The bibtex key
                @title         Title
                @type          Type of entry
                @year          Publication year

            Since the author list can be large, the `@author_all` is truncated to 20
            characters. This can be modified with the `auth_len` key (see below).

        menu_fmt
            Default value: `'[@type] @author_short (@year), "@title"'`
            The format used for the `menu` entry for bib completion candidates (see
            |complete-items|). If the key is set to an empty string, then the `menu`
            entry is not added to the completion candidates. See the description of
            `match_str_fmt` for the allowed keys.

        abbr_fmt
            Default value: `''`
            The format used for the `abbr` entry for bib completion candidates (see
            |complete-items|). See the description of `match_str_fmt` for the allowed
            keys.

        auth_len
            Default value: 20
            Truncation length for author list with the `@author_all` format key in the
            format strings for `match_str_fmt`, `menu_fmt`, and `abbr_fmt`.

        custom_patterns
            Default value: []
            List of custom trigger patterns that may be used to allow completion for
            e.g. custom macros.

        If one wants to overwrite one of the keys, e.g. the `simple` entry, one can do:


            let g:vimtex_complete_bib = { 'simple': 1 }

        This does not modify the other keys and their default values.

    *g:vimtex_complete_ref*
        This option is a dictionary for controlling the label completion. The
        keys each control a different thing:

        custom_patterns
            Default value: []
            List of custom trigger patterns that may be used to allow completion for
            e.g. custom macros.

        For example, if one has defined the command `\figref`, one could add following
        custom pattern


             let g:vimtex_complete_ref = {
                    \ 'custom_patterns' = ['\\figref\*\?{[^}]*$']
                    \ }

    *g:vimtex_context_pdf_viewer*
        Specify PDF viewer to use to open PDF files with the |vimtex-context-menu|, for
        instance for citations with the `file` key (see |vimtex-context-citation|).

        The default value is based on the |vimtex-view| and is determined as follows:

            * If |g:vimtex_view_method| is not `general`, then the specified viewer is
                used. However, the viewer will by default start without any of the
                regular options.

            * Else fall back to the value of |g:vimtex_view_general_viewer|.

    *g:vimtex_delim_list*
        A dictionary that defines the pairs of delimiters that are recognized by
        VimTeX for various commands and functions. The dictionary contains 5 sub
        dictionaries:

            `env_tex`     Pairs of environment delimiters in normal TeX mode
            `env_math`    Pairs of special math environment delimiters
            `delim_tex`   Pairs of delimiters in normal TeX mode
            `delim_math`  Pairs of delimiters in math mode
            `mods`        Pairs of modifiers for math mode delimiters

        Each entry is a dictionary with the following format:


            {
            \ 'name' : [
            \   ['\(', '\)'],
            \   ['\[', '\]'],
            \   ['$$', '$$'],
            \   ['$', '$'],
            \ ],
            \ 're' : [
            \   ['\\(', '\\)'],
            \   ['\\\@<!\\\[', '\\\]'],
            \   ['\$\$', '\$\$'],
            \   ['\$', '\$'],
            \ ],
            \}

        Here the `name` entry is a list of delimiter pairs as they are typed, and the
        `re` entry is a corresponding list of regexes that matches the delimiters.

        The default value should generally suffice for most people. If one wants to
        overwrite one of the main entries, e.g. the `mods` entry, one can do:


            let g:vimtex_delim_list = {
                        \ 'mods' : {
                        \   'name' : [ ... ],
                        \ }
                        \}

        Here the `re` entry was not provided, in which case it will be automatically
        generated based on the `name` entry. The remaining four entries will remain
        the default value.

        Some people may be interested in adding support for e.g. german or french
        quotation marks. These may be added by extending the default `delim_tex`
        entries, like this:


            let g:vimtex_delim_list = {
                    \ 'delim_tex' : {
                    \   'name' : [
                    \     ['[', ']'],
                    \     ['{', '}'],
                    \     ['\glq', '\grq'],
                    \     ['\glqq', '\grqq'],
                    \     ['\flq', '\frq'],
                    \     ['\flqq', '\frqq'],
                    \    ]
                    \  }
                    \}

    *g:vimtex#delim#lists*
    *g:vimtex#delim#re*
        This option is parsed on plugin initialization into a new variable,
                    |g:vimtex#delim#lists| where the `re` entries are added and that also
                    contains some combinations such as `tex_all`, `delim_all`, and `all`.
                    Further, the option is also used as a basis for the variable
                    |g:vimtex#delim#re|, which contains full regexes for matching opening
                    and/or closing delimiters of the desired type.

        Default value: See `s:init_delim_lists()` in `autoload/vimtex/delim.vim`.

    *g:vimtex_delim_toggle_mod_list*
        Defines a list of delimiter modifiers to toggle through using the maps:

            |<plug>(vimtex-delim-toggle-modifier)|
            |<plug>(vimtex-delim-toggle-modifier-reverse)|

        The list must be a subset of the `mods` entry of |g:vimtex_delim_list|,
        otherwise the toggle will not work properly.  Thus, if one wants to toggle
        non-standard delimiters, then one must also update the above option.

        Example 1: to toggle between no modifiers, the `\left/\right` pair, and the
        `\mleft/\mright` pair, one may use the following options:


            let g:vimtex_delim_list = {'mods' : {}}
            let g:vimtex_delim_list.mods.name = [
                        \ ['\left', '\right'],
                        \ ['\mleft', '\mright'],
                        \ ['\bigl', '\bigr'],
                        \ ['\Bigl', '\Bigr'],
                        \ ['\biggl', '\biggr'],
                        \ ['\Biggl', '\Biggr'],
                        \ ['\big', '\big'],
                        \ ['\Big', '\Big'],
                        \ ['\bigg', '\bigg'],
                        \ ['\Bigg', '\Bigg'],
                        \]
            let g:vimtex_delim_toggle_mod_list = [
                \ ['\left', '\right'],
                \ ['\mleft', '\mright'],
                \]

        Example 2: to step through no modifiers, and the pairs `\bigl/\bigr`,
        `\Bigl/\Bigr`, `\biggl/\biggr`, and `\Biggl/\Biggr`, one may use:


            let g:vimtex_delim_toggle_mod_list = [
                \ ['\bigl', '\bigr'],
                \ ['\Bigl', '\Bigr'],
                \ ['\biggl', '\biggr'],
                \ ['\Biggl', '\Biggr'],
                \]

        Default value: `[['\left', '\right']]`

    *g:vimtex_delim_timeout*
    *g:vimtex_delim_insert_timeout*
        Timeout (in milliseconds) when searching for matching delimiters. It is used
        for the {timeout} argument of |search()|-like function calls. If the option
        is increased it will make the matching more accurate, at the expense of
        potential lags. The default value should work well for most people.

        Default values: 300, 60 (respectively)

    *g:vimtex_delim_stopline*
        A tolerance for the number of lines to search for matching delimiters in
        each direction. It is used in an expression for the {stopline} argument of
        |search()| function calls. If the option is increased it will make the
        matching more accurate, at the expense of potential lags. The default value
        should work well for most people.

        Default value: 500

    *g:vimtex_disable_recursive_main_file_detection*
        In rare cases, the recursive method of finding the main file in multi file
        projects may be slow. This might happen for instance when there are _very_
        many tex files in the directory tree that is searched. In such cases, one
        may disable the recursive method by setting this variable to a nonzero
        value.

        Default value: 0

    *g:vimtex_doc_handlers*
        With this option, one may specify a list of custom documentation handlers.
        The following pre-made handlers are available:

            'vimtex#doc#handler#texdoc'  Open documentation with local `texdoc`.
            Fallback                     Open documentation online through
                                                                     http://texdoc.net/pkg/packagename.

        To use the local `texdoc`, set:


            let g:vimtex_doc_handlers = ['vimtex#doc#handlers#texdoc']

        A handler is a function that takes a single |Dict| argument with the
        following keys:

            type
                One of `documentclass`, `usepackage`, `command` or `word`.

            candidates
                A list of detected packages (for the types `command` and `usepackage`,
                this list may be larger than 1.

            selected
                The currently selected entry. This is the package name that will
                ultimately be passed to the lookup function.

            name
                If the type is `command`, this is the name of the command. Else it is
                not defined.

        Each handler in the list will be tried until a handler provides a return
        value of 1 or |v:true|. One may thus add handlers that only makes minor
        modifications of the context and passes it on to the next handler.

        The context may have multiple candidates and the handlers are applied before
        any internal selection is made. Thus the `selected` key may be not defined.
        This allows the handler to perform the selection itself. One may manually
        call the selection function `vimtex#doc#make_selection` to get a simple
        selection menu.

        The following shows a generic example of how to write a custom handler:


            let g:vimtex_doc_handlers = ['MyHandler']

            function! MyHandler(context)
                call vimtex#doc#make_selection(a:context)
                if empty(a:context.selected) | return 0 | endif

                execute '!myhandler' a:context.selected '&'
                return 1
            endfunction

        Default value: []

    *g:vimtex_echo_verbose_input*
        For the set of operator mappings that change a surrounding type [0],
        VimTeX by default prints some information about what you are doing while
        waiting for user input. For advanced/experienced users, one will not need
        this info and can get a slightly cleaner UI by disabling this feature (set
        the option 0).

        Default value: 1

        [0]: This affects the following mappings:
            |<plug>(vimtex-env-change)|        (default map: `cse`)
            |<plug>(vimtex-env-change-math)|   (default map: `cs$`)
            |<plug>(vimtex-cmd-change)|        (default map: `csc`)
            |<plug>(vimtex-delim-change-math)| (default map: `csd`)

    *g:vimtex_env_change_autofill*
        If enabled, the current environment value is used as a default input for
        |<plug>(vimtex-env-change)| and |<plug>(vimtex-env-change-math)|. Some users
        may find this useful in order to quickly change from things like `align` to
        `aligned`.

        If enabled, one may erase the autofilled content with |c_ctrl-u| (i.e.
                    `<c-u>`).

        Default: 0

    *g:vimtex_env_toggle_math_map*
        Specify toggle map for |<plug>(vimtex-env-toggle-math)|. You can use this to
        change the desired toggle sequence.

        Default value:


            let g:vimtex_env_toggle_math_map = {
                        \ '$': '\[',
                        \ '\[': 'equation',
                        \ '$$': '\[',
                        \ '\(': '$',
                        \}

    *g:vimtex_fold_enabled*
        Use this option to enable folding. More detailed info can be found in the
        section |vimtex-folding|.

        Default value: 0

    *g:vimtex_fold_manual*
        With this option enabled, VimTeX uses |fold-manual| as the main
        |foldmethod|.  It still uses the |foldexpr| function to compute the fold
        levels, but it only computes the fold levels on demand, see
        |:VimtexRefreshFolds| and |vimtex-zx|.

        The reasoning behind this option is that the |fold-expr| method of folding
        may sometimes be slow, e.g. for long lines and large files. |fold-manual| is
        very fast.

        An alternative to this method of speeding up is to use a dedicated plugin
        for optimizing the fold functionality, see e.g.
        https://github.com/Konfekt/FastFold.

        Default value: 0

    *g:vimtex_fold_levelmarker*

        Use custom section symbol for folding.

        Default value: '*'

    *g:vimtex_fold_types*
    *g:vimtex_fold_types_defaults*
        This is a dictionary where each key configures the corresponding fold type.
        One may disable the fold types by setting the key `enabled` to 0. If a type
        can be configured with a list of patterns or similar, the patterns assume
        that one uses very magic regexes (see |\v|).

        Each entry in |g:vimtex_fold_types| is combined with the corresponding entry
        of |g:vimtex_fold_types_defaults|. If there are conflicting entries, then
        |g:vimtex_fold_types| take precedence. This way, it is easy to customize
        various fold types without touching those that can stay with default
        configuration.

        The available fold types (and keys) are listed below, and the default
        configurations are listed at the bottom.

            <preamble>          Fold the preamble.

            <sections>          Fold sections and parts of documents. Can be
                                                    configured with the following extra keys:
                                                    - `parse_levels`: Whether to use detailed parsing to
                                                                                    set fold text levels similar to how
                                                                                    they are displayed in |vimtex-toc|.
                                                                                    Disabled by default, because it uses
                                                                                    more resources and may be slow.
                                                    - `sections`:     List of sections that should be folded.
                                                    - `parts`:        List of parts that should be folded.

                                                    When a LaTeX document is opened, the document is
                                                    parsed in order to define the highest fold level based
                                                    on which parts (such as frontmatter, backmatter, and
                                                    appendix) and section types (parts, chapter, section,
                                                    etc.) are present. This parsing is done automatically
                                                    every time the folds are recomputed, if there are any
                                                    changes to the file.

                                                    The fold function also recognizes "fake" sections.
                                                    That is, it parses comments similar to:


                                                        % Fakepart title
                                                        % Fakechapter title
                                                        % Fakesection title
                                                        % Fakesubsection title

                                                    The fake sections are folded at the same level as the
                                                    corresponding "real" sections. The fold title is the
                                                    provided title with the `Fake...` part prepended.

            <comments>          Fold multiline comments. This is disabled by default.

            <markers>           Fold on vim-style markers inside comments, that is,
                                                    pairs of e.g. `{{{` and `}}}` (the default markers).
                                                    |regex| patterns for the opening and closing markers
                                                    may be customized with the keys:
                                                    - `open`
                                                    - `close`

                                                    Patterns are only searched inside comments!

            <envs>              Fold environments.
                                                    Can be further configured with a blacklist and
                                                    whitelist of environments to be folded.

                                                    The `document` environment will never be folded.

            <env_options>       This fold type allows to fold the `\begin` command if
                                                    it contains a long optional argument. Consider the
                                                    following example:


                                                        \begin{axis}[    --->    \begin{axis}[...]
                                                                width=6cm,
                                                                height=8cm,
                                                                ...,
                                                        ]

                                                    Here the `axis` environment must not be otherwise
                                                    folded through the <envs> fold type.

            <items>             `\item` blocks in itemize like environments. The
                                                    recognized environments are the same as specified by
                                                    |g:vimtex_indent_lists|.

            <cmd_single>        Fold long commands with a single argument. E.g.:


                                                        \hypersetup{    --->    \hypersetup{...}
                                                            option 1,
                                                            ...,
                                                            option n
                                                            }

            <cmd_single_opt>    Fold commands that opens with a single long optional
                                                    argument that is followed by a short "real" argument.
                                                    E.g.:


                                                        \usepackage[    --->    \usepackage[...]{name}
                                                            option 1,
                                                            ...,
                                                            option n
                                                            ]{name}

            <cmd_multi>         Fold commands that start with a short regular argument
                                                    and continue with long optional and/or regular
                                                    arguments. E.g.:


                                                        \newcommand{\xx}[3]{    --->    \newcommand{\xx} ...
                                                            Hello #1, #2, and #3.
                                                        }

            <cmd_addplot>       Folding of the `\addplot` series of commands from the
                                                    `pgfplots` package. E.g.:


                                                        \addplot+[] table[] {    --->    \addplot+[] table[] {...};
                                                            table data
                                                        };

        As an example, the following configuration will disable folding of the
        preamble, as well as the `figure` and `table` environments.


            let  g:vimtex_fold_types = {
                         \ 'preamble' : {'enabled' : 0},
                         \ 'envs' : {
                         \   'blacklist' : ['figure', 'table'],
                         \ },
                         \}

        Default value:

            let g:vimtex_fold_types = {}
            let g:vimtex_fold_types_defaults = {
                        \ 'preamble' : {},
                        \ 'items' : {},
                        \ 'comments' : {'enabled' : 0},
                        \ 'envs' : {
                        \   'blacklist' : [],   !!! This is a list of strings
                        \   'whitelist' : [],   !!! This is a list of strings
                        \ },
                        \ 'env_options' : {},
                        \ 'markers' : {},
                        \ 'sections' : {
                        \   'parse_levels' : 0,
                        \   'sections' : [      !!! This is a list of (very magic) regexes
                        \     '%(add)?part',
                        \     '%(chapter|addchap)',
                        \     '%(section|addsec)',
                        \     'subsection',
                        \     'subsubsection',
                        \   ],
                        \   'parts' : [         !!! This is a list of regexes
                        \     'appendix',
                        \     'frontmatter',
                        \     'mainmatter',
                        \     'backmatter',
                        \   ],
                        \ },
                        \ 'cmd_single' : {
                        \   'cmds' : [          !!! This is a list of regexes
                        \     'hypersetup',
                        \     'tikzset',
                        \     'pgfplotstableread',
                        \     'lstset',
                        \   ],
                        \ },
                        \ 'cmd_single_opt' : {
                        \   'cmds' : [          !!! This is a list of regexes
                        \     'usepackage',
                        \     'includepdf',
                        \   ],
                        \ },
                        \ 'cmd_multi' : {
                        \   'cmds' : [          !!! This is a list of regexes
                        \     '%(re)?new%(command|environment)',
                        \     'providecommand',
                        \     'presetkeys',
                        \     'Declare%(Multi|Auto)?CiteCommand',
                        \     'Declare%(Index)?%(Field|List|Name)%(Format|Alias)',
                        \   ],
                        \ },
                        \ 'cmd_addplot' : {
                        \   'cmds' : [          !!! This is a list of regexes
                        \     'addplot[+3]?',
                        \   ],
                        \ },
                        \}

    *g:vimtex_fold_bib_enabled*
        Use this option to enable/disable folding in .bib files.

        The default value is the same as |g:vimtex_fold_enabled|. Thus, it
                    suffices to enabled folds for tex files to also enable for bib files.
                    But if you want to enable in tex files but keep bib folding disabled,
                    then you must set this option to 0 or |v:false|.

        Default value: |g:vimtex_fold_enabled|

    *g:vimtex_fold_bib_max_key_width*
        This option is used to specify a length to truncate identifiers (e.g.
        `@article{Key}`) to, in the foldtext for bib files. The default of 0
        indicates no truncation, i.e. VimTeX will parse the bib file to determine
        the longest such identifier and align all foldtext titles such that they
        come after the identifiers.

        If you have a handful of cite keys that are exceptionally long, setting this
        manually may be useful as it makes sure that there is some space for the
        titles in the foldtext.

        Default value: 0

    *g:vimtex_format_enabled*
        If enabled, VimTeX uses a custom |formatexpr| that should handle inline
        comments and environments. That is, if it is enabled, comments at end of
        lines will not be joined with the |gq| command, and environments like
        `equation` will not be joined/changed.

        Default value: 0

    *g:vimtex_format_border_begin*
    *g:vimtex_format_border_end*
        Regular expressions that define the "borders" of a region that should be
        formatted. The defaults should be more or less OK for most people, but some
        people may be interested in adjusting to handle more complex LaTeX code.

        Default value: See source in `/autoload/vimtex/options.vim`

    *g:vimtex_grammar_textidote*
        This option is used to configure the `textidote` grammar and document checker,
        see |vimtex-grammar-textidote|. It is a dictionary with the following keys

            jar
                The path to `textidote.jar`. This key must be defined if you want to use
                the TeXtidote wrapper! Please If one installs `textidote` with
                a package manager e.g. in some common Linux distributions, the `.jar`
                file might be missing. If so, it should be possible to download it
                manually.

            args
                 Specify arguments to be passed to the TeXtidote grammar checker.

        Default:


                let g:vimtex_grammar_textidote = {
                            \ 'jar': '',
                            \ 'args': '',
                            \}

    *g:vimtex_grammar_vlty*
        This option is used to configure the `vlty` grammar checker. This checker
        relies on the Python package `YaLafi` in combination with the proofreading
        software `LanguageTool` (see |vimtex-grammar-vlty| for more details). The
        option is a dictionary with the following keys :

            lt_directory
                Path to the `LanguageTool` software, if installed manually.

            lt_command
                Name of `LanguageTool` executable, if installed via package manager. Note
                that this has precedence over `lt_directory`!

            lt_disable
            lt_enable
            lt_disablecategories
            lt_enablecategories
                Options for `LanguageTool` that control application of rules and rule
                categories. For more info, see:
                http://wiki.languagetool.org/command-line-options

            server
                Specify whether an HTTP server should be used. This may be faster for
                short texts. Possible values are:

                `no`    Do not use a server.
                `my`    Use a local `LanguageTool` server. If not yet running, it is
                                started.
                `lt`    Contact the Web server provided by `LanguageTool`. In this case,
                            no local installation is necessary. Please see the following page
                            for conditions and restrictions:
                            https://dev.languagetool.org/public-http-api

            shell_options
                Pass additional options to `YaLafi`, e.g., `--equation-punctuation displ`;
                for more info, see:
                https://github.com/matze-dd/YaLafi

            show_suggestions
                If set to 1, then `LanguageTool's` replacement suggestions are included
                in the |quickfix| or |location-list| messages.

            encoding
                Encoding of the (La)TeX source file. For default value `auto`, the
                encoding is taken from |fileencoding| or |encoding|.

        Default:


                let g:vimtex_grammar_vlty = {
                            \ 'lt_directory': '~/lib/LanguageTool',
                            \ 'lt_command': '',
                            \ 'lt_disable': 'WHITESPACE_RULE',
                            \ 'lt_enable': '',
                            \ 'lt_disablecategories': '',
                            \ 'lt_enablecategories': '',
                            \ 'server': 'no',
                            \ 'shell_options': '',
                            \ 'show_suggestions': 0,
                            \ 'encoding': 'auto',
                            \}

    *g:vimtex_imaps_enabled*
        Use this option to disable/enable the insert mode mappings.

        Default value: 1

    *g:vimtex_imaps_leader*
        The default leader key for insert mode mappings.

        Default value: '`'

    *g:vimtex_imaps_disabled*
        A list of mappings to disable. That is, any left-hand side that matches
        a string in this list will not be mapped to its corresponding right-hand
        side. This may be used to selectively disable one or more from the default
        list of mappings.

        Default value: []

    *g:vimtex_imaps_list*
        The list of mappings to generate on start up. The list of activated mappings
        can be viewed with |:VimtexImapsList|.

        Default value: See `autoload/vimtex/options.vim` (it's a long list)

    *g:vimtex_include_indicators*
        VimTeX will recognize included files for a lot of different purposes. Most
        of these come from e.g. `\input{file}` or `\include{file}`. This option
        allows to add more commands that are used to include files, e.g. custom
        macros.

        This option is read during initialization of VimTeX, and so it must be
        set early. I.e., it can not be set in `after/ftplugin/tex.vim`.

        Default value: ['input', 'include']

    *g:vimtex_include_search_enabled*
        VimTeX sets 'includeexpr' to recognize included files. If a file isn't found
        in the current directory, VimTeX uses `kpsewhich` to search for it in the
        system TeX distribution. If the 'complete' option includes "i", invoking
        keyword completion with |i_ctrl-n| will search included files for completion
        possibilities. In this case, there may be a lot of calls to `kpsewhich`
        while scanning for included files during the first invocation of keyword
        completion, and this may introduce a significant delay. Subsequent keyword
        completions should be faster, as the calls to `kpsewhich` are cached.

        This option allows to disable searching for included files with `kpsewhich`,
        and with that prevent the above explained delay.

        Default value: 1

    *g:vimtex_indent_enabled*
        Use this option to disable/enable VimTeX indentation.

        Default value: 1

    *g:vimtex_indent_bib_enabled*
        Use this option to disable/enable VimTeX indentation of bibliography files.

        Default value: 1

    *g:vimtex_indent_conditionals*
        This is a dictionary that defines regexes for indenting conditionals. Set it
        to an empty dictionary to disable this type of indentation.

        Default value:

            let g:vimtex_indent_conditionals = {
                        \ 'open': '\v%(\\newif)@<!\\if%(f>|field|name|numequal|thenelse)@!',
                        \ 'else': '\\else\>',
                        \ 'close': '\\fi\>',
                        \}

    *g:vimtex_indent_delims*
        A dictionary that specifies how to indent delimiters. The dictionary has
        four keys:

            open
                List of regexes for opening delimiters that should add indents.

            close
                List of regexes for closing delimiters that should reduce indents.

            close_indented
                Set this to 1 if you want the line with the closing delimiter to stay
                indented.

            include_modified_math
                Set this to 0 if you do not want modified math delimiters such as
                `\left(` and `\right)` to add/reduce indents.

        VimTeX does not allow indents for parentheses only in math mode or any
                    similar kind of context aware delimiter indents.

        If one of the keys of the dictionary is not specified, the default
                    value is assumed.

        Default value:

            let g:vimtex_indent_delims = {
                        \ 'open' : ['{'],
                        \ 'close' : ['}'],
                        \ 'close_indented' : 0,
                        \ 'include_modified_math' : 1,
                        \}

    *g:vimtex_indent_ignored_envs*
        List of environments that should not add/reduce indentation.

        Default value: ['document']

    *g:vimtex_indent_lists*
        List of environments that act like lists with `\item` entries.

        Default value: [
                \ 'itemize',
                \ 'description',
                \ 'enumerate',
                \ 'thebibliography',
                \]

    *g:vimtex_indent_on_ampersands*
        By default, VimTeX will align on `leading` ampersands e.g. in math aligned
        environments or in tabular environments. If this feature is not wanted it
        may be disabled through this option.

        To get a more advanced tabular like alignment feature, you may be
                    interested in something like |vim-easy-align|:
                    https://github.com/junegunn/vim-easy-align

        Default value: 1

    *g:vimtex_indent_tikz_commands*
        Use this option to disable/enable VimTeX indentation of multi-line commands
        in TikZ pictures.

        Default value: 1

    *g:vimtex_mappings_enabled*
        Control whether or not to load the default mappings.

        Default value: 1

    *g:vimtex_mappings_disable*
        A dictionary that can be used to disable specific mappings.  The dictionary
        keys are the mapping modes, and the values are lists of default mappings
        that should be disabled.  The following example will ensure that the default
        `tse` and `tsd` mappings are disabled:


            let g:vimtex_mappings_disable = {
                    \ 'n': ['tse', 'tsd'],
                    \ 'x': ['tsd'],
                    \}

        Default value: {}

    *g:vimtex_mappings_override_existing*
        Control behaviour on mapping conflicts, in particular whether or not to
        override pre-existing mappings. By default, VimTeX does not override existing
        mappings. If this option is enabled, then VimTeX will override existing
        mappings on conflict.

        Default value: 0

    *g:vimtex_matchparen_enabled*
        Enable highlighting of matching delimiters.

        This is an improved version of |matchparen|. It should be possible to
                    keep |matchparen| activated, which matches delimiters listed in
                    'matchpairs'. The VimTeX specific version will also match LaTeX
                    specific delimiters, which is not possible with |matchparen|.

        If you think this feature is slow, see |vimtex-faq-slow-matchparen|.

        Default value: 1

    *g:vimtex_motion_enabled*
        This option enables the motion mappings, see |vimtex-motions|. It also
        enables the highlighting of matching delimiters.

        Default value: 1

    *g:vimtex_lint_chktex_ignore_warnings*
        A string variable of options to pass for `chktex` to specify to ignore
        certain warning messages.

        Default value: `'-n1 -n3 -n8 -n25 -n36'`

    *g:vimtex_lint_chktex_parameters*
        A string variable of parameters to pass to `chktex`.

        VimTeX will look for a configuration file at `$XDG_CONFIG_HOME/chktexrc`, or
        `$HOME/.config/chktexrc` if `$XDG_CONFIG_HOME` is undefined. If this file
        exists, it is specified by default with `--localrc=...`.

        Default value: `'--localrc=PATH/chktexrc'` or `''` (see above)

    *g:vimtex_log_ignore*
        A list of regexes to filter info, warning, and error messages. If a logged
        message matches any of the regexes in this list, the message will not be
        printed to screen.

        All messages may still be viewed with |:VimtexLog|.

        Default: []

    *g:vimtex_log_verbose*
        Whether or not to print messages to screen. Should generally be on, but may
        be turned off e.g. for debugging or testing purposes.

        Default: 1
    quick fix / quickfix
    *g:vimtex_subfile_start_local*
        This option allows to specify that one should start with the local file for
        subfile'd documents instead of the main project file. See |vimtex-subfiles|
        for further info.

        Default value: 0.


    *g:vimtex_texcount_custom_arg*
        Option that makes it possible to add custom arguments to `texcount` for
        |:VimtexCountWords| and |:VimtexCountLetters|.

        Default value: ''

    *g:vimtex_text_obj_enabled*
        Use this option to disable the text object mappings.

        Default value: 1

    *g:vimtex_text_obj_linewise_operators*
        List of operators that will act linewise on the delimiter text objects (i.e.
        `ie/ae`, `i$/a$`, and `id/ad`). Note, for inline regions the operators will not
        act linewise, since that would lead to side effects.

        Default value: ['d', 'y']

    *g:vimtex_text_obj_variant*
        Select text object variants for command and environment text objects. The
        choice is either VimTeX or |targets.vim|. Possible configuration options
        are:

            1. `'auto'`     (select `'targets'` if |targets.vim| is installed)
            2. `'vimtex'`
            3. `'targets'`

        When using `'targets'`, the following additional text object kinds are
        available:

        - Prefix `I` and `A` instead of `i` and `a` for excluding inner whitespace or
            including outer whitespace, respectively.
        - Modifier `n` and `l` for next or previous (mnemonic: last).

        For more details, see `doc/targets-textobj-cheatsheet.md`.

        Default value: `'auto'`

    *g:vimtex_toc_enabled*
        Use this option to disable/enable table of contents (ToC).

        Default value: 1

    *g:vimtex_toc_config*
        This is a dictionary that can be used to configure the ToC. Each key
        specifies a configuration option that can be changed. For configuration of
        specific matchers, see |g:vimtex_toc_config_matchers|.

        In the following, the possible configuration keys are explained briefly and
        the default values are indicated.

            `name` : `Table of contents (VimTeX)`
                The name of the ToC buffer.

            `mode` : 1
                The ToC display mode, one of:
                    1: Separate window.
                    2: Separate window and location list.
                    3: Location list (and don't open it).
                    4: Location list (and open it).

            `fold_enable` : 0
                Whether to enable folding in the ToC window.

            `fold_level_start` : -1
                The starting fold level. The value -1 indicates that the start level is
                the same as the `tocdepth` value.

            `hide_line_numbers` : 1
                If enabled, then line numbers will be hidden in the ToC window by
                setting |nonumber| and |norelativenumber| locally.

            `hotkeys_enabled` : 0
                Set to 1 to enable individual hotkeys for ToC entries.

            `hotkeys` : `abcdegijklmnopuvxyz`
                A string of keys that are used to create individual hotkeys.

            `hotkeys_leader` : `;`
                The hotkey leader. Set to empty string to disable the leader.

            `indent_levels` : 0
                Set to 1 to indent the section levels in the ToC window.

            `layers` : Undefined
            `layer_status` : Dictionary

                    { 'content': 1,
                        'label': 1,
                        'todo': 1,
                        'include': 1 }
                The initial state of the layers (1 for active, 0 for inactive). The
                `layers` key may be used as a shorthand: it accepts a list of layers
                that should be active.

            `layer_keys` : Dictionary

                    { 'content': 'C',
                        'label': 'L',
                        'todo': 'T',
                        'include': 'I'}
                Specify hotkeys for enabling/disabling the different layers.

            `resize` : 0
                Whether or not to automatically resize vim when index windows are
                opened.

                This option makes sense if the index window is vertically split.

            `refresh_always` : 1
                Set to 0 to manually refresh ToC entries. This may be useful for very
                large projects where generating the ToC entries becomes slow.

                It may be useful to combine manually refreshing with a |BufWritePost|
                autocommand, e.g.:


                    augroup VimTeX
                        autocmd!
                        autocmd BufWritePost *.tex call vimtex#toc#refresh()
                    augroup END

                Or, if preferred, one may use a mapping such as:


                    nnoremap <silent> <localleader>lf :call vimtex#toc#refresh()

            `show_help` : 1
                Whether to display the index help text.

            `show_numbers` : 1
                Set whether or not to show section numbers in ToC.

            `split_pos` : `vert leftabove`
                Define where index windows should be opened. This is a string that
                contains either the word 'full' to open in the current window, or
                a position command. Use |:vert| if a vertical split is desired, and one
                of |:leftabove|, |:rightbelow|, |:topleft|, and |:botright| to specify
                the desired split position.

            `split_width` : 30
                For vertically split windows: Set width of index window.

            `tocdepth` : 3
                Define the depth of section levels to display. This attempts to mimic
                the corresponding latex variable `tocdepth`. For more info, see:
                https://en.wikibooks.org/w/index.php?title=LaTeX/Document_Structure

                This will also change the width of the number column according to
                            the space needed to show the section numbers.

            `todo_sorted` : 1
                Whether or not to sort the TODOs at the top of the ToC window.

    *g:vimtex_toc_config_matchers*
        This is a dictionary that can be used to configure the built-in ToC
        matchers. See below for a specification of the ToC matcher "objects" and the
        various keys that can be defined/changed (|toc_matcher_specification|).

        To configure/alter a built-in matcher, one can do this:


            let g:vimtex_toc_config_matchers = {
                        \ 'MATCHER1': {OPTIONS},
                        \ 'MATCHER2': {OPTIONS},
                        \}

        The available options are described in |toc_matcher_specification|. Please
        The built-in matchers should generally just work well for most
        people. However, this option allows at least two useful things: to disable
        a built-in matcher and to change the priority of a built-in matcher. The
        following is a full example that shows how this could be used:


            let g:vimtex_toc_config_matchers = {
                        \ 'beamer_frame': {'disable': 1},
                        \ 'todo_fixme': {'priority': -1},
                        \ 'index': {'title': 'MyFancy Index Title'},
                        \}

        The available built-in matchers are defined in separate files under
                    `autoload/vimtex/parser/toc/*.vim`.

        Default value: {}

    *toc_matcher_specification*
        A ToC matcher is defined as a |Dictionary| where the possible keys are
        specified below. In order to write a matcher, one should also be aware of
        the `context` argument that is passed to the matcher functions, as well as
        the specification of the `toc entry` return value. However, since this kind
        of customization is advanced I refer users to the source file for further
        specification of these objects. In particular, see the function
        `s:toc.parse(...)` in `autoload/vimtex/toc.vim`.

            re
                Type: |String|
                Required: `yes`
                This specifies a regular expression that should match the current line
                for the desired ToC entry.

            prefilter_re
                Type: |String|
                Required: `maybe` (this or `prefilter_cmds` should be specified)
                This specifies a regular expression that must match the current line for
                the desired ToC entry. This is used as a prefilter to make things
                faster, and it does not need to be a perfect match. The `re` key may
                often be a complex and therefore slow regular expression. This key
                should represent a simple and fast regular expression that may match
                more than the desired entry.

            prefilter_cmds
                Type: List of |String|
                Required: `maybe` (this or `prefilter_re` should be specified)
                This is similar to `prefilter_re`, except it specifies a list of command
                names (regular expressions). For instance, it should contain `todo` for
                a ToC matcher for `\todo` commands.

            priority
                Type: |expr-number| (default: 0)
                Required: `no`
                Priority is used for sorting the ToC matchers. High priority matchers
                will be tried first, and only one matcher will match a given line. Note
                that the built-in matchers have priority values between 0 and 2.

            in_preamble
                Type: 0 or 1 (default: 0)
                Required: `no`
                If the entry may appear in the preamble.

            in_content
                Type: 0 or 1 (default: 1)
                Required: `no`
                If the entry may appear in the main content.

            title
                Type: |String|
                Required: `no`
                If the matcher does not have a `get_entry` key, then it will use
                a simple, general matcher function to generate the entry. In this case,
                the `title` key should be specified to give the title of the ToC entry.

            get_entry
                Type: |Dictionary-function|
                Arguments: `context`
                Returns: `toc entry`
                Required: `no`
                This is the general way to define ToC entries. It allows to define the
                ToC entry based on the context. See `autoload/vimtex/parser/toc.vim` for
                examples on how to use this.

            continue
                Type: |Dictionary-function|
                Arguments: `context`
                Returns: `toc entry`
                Required: `no`
                Some entries may be specified over several lines, in which case this key
                becomes necessary in combination with the `get_entry` key. See the built
                in `s:matcher_section` matcher for an example on how to use this.

            name
                Type: |String|
                Required: `no`
                Mostly for making it easier to debug a specific matcher. Without a name,
                the matcher will be registered with a semi random numbered name like
                `custom1`.

            disable
                Type: |Boolean| (default: |v:false|)
                Required: `no`
                If true, then the matcher will be disabled.

    *g:vimtex_toc_custom_matchers*
        This option is a list of custom ToC matchers, see |toc_matcher_specification|.

        As an example, one can use this option to add ToC entries for a custom
        environment. Say you have defined an environment `mycustomenv`, then
        instances of this environment could be added to the ToC with the following
        configuration:


            let g:vimtex_toc_custom_matchers = [
                            \ { 'title' : 'My Custom Environment',
                            \   're' : '\v^\s*\\begin\{mycustomenv\}' }
                            \]

        Default value: []

    *g:vimtex_toc_todo_labels*
        Dictionary of keywords that should be recognized in comments for the todo
        layer. The values represent the labels used in the ToC.

        Default value: `{'TODO': 'TODO: ', 'FIXME': 'FIXME: '}`

    *g:vimtex_toc_show_preamble*
        Whether to include the preamble in the ToC.

        Default value: 1

    *g:vimtex_view_enabled*
        Use this option to disable/enable the VimTeX viewer interface.

        Default value: 1

    *g:vimtex_view_automatic*
        If enabled, the viewer should open automatically when compilation has
        started in `continuous` mode and if `callback` is enabled, or if
        `continuous` mode is disabled. This should work for the following compilers:
        * |vimtex-compiler-latexmk|
        * |vimtex-compiler-latexrun|
        * |vimtex-compiler-arara|
        * |vimtex-compiler-tectonic|

        Default value: 1

    *g:vimtex_view_use_temp_files*
        If nonzero, this will copy output files to a corresponding set of files
        with `_vimtex` prepended to the name. If one combines this with the callback
        feature, this may provide a very convenient way to avoid that the pdf
        becomes unavailable during compilation, as it will only update the viewer
        output file after a successful compilation.

        The behaviour depends on the value:

            1: Copy output files after successful compilations and then update.
            2: Copy output files after all compilations and then update.

        This is only relevant for the `latexmk` compiler backend. `latexrun`
                    already ensures that the output file is updated only after the
                    compilation is completed.

        This will disable the viewer from the `latexmk` end. That is, if this
                    option is enabled, opening and updating the pdf viewer will have to be
                    done by the user or by VimTeX, even if `latexmk` is chosen as the
                    compiler.

        This works best with the 'mupdf' and 'zathura' viewers. In particular,
                    these viewers should update automatically after the pdf is updated.
                    For general viewers, one has to create a callback function and connect
                    it through the |VimtexEventCompileSuccess| event to update the viewer.

        Default value: 0

    *g:vimtex_view_forward_search_on_start*
        If disabled, the first invocation of the viewer will not perform a forward
        search to the current cursor position.

        This option is only relevant when |g:vimtex_view_method| is set to
                    either `mupdf` or `zathura`. See also the specific viewer sections for
                    more info: |vimtex-view-mupdf|, |vimtex-view-zathura|.

        Default value: 1

    *g:vimtex_view_reverse_search_edit_cmd*
        When working in a multi-file project, initiating inverse search (see
        |vimtex-synctex-inverse-search|) may require opening a file that is not
        currently open in a window. This option controls the command that is used to
        open files as a result of an inverse search.

        Examples:
            * `edit`     open buffer in current window
            * `tabedit`  open buffer in new tab page
            * `split`    split current window to open buffer

        Default value: `edit`

    *g:vimtex_view_method*
        Set the viewer method. By default, a generic viewer is used through the
        general view method (e.g. `xdg-open` on Linux).

        Possible values:
            * `'general'`
            * `'mupdf'`      |vimtex-view-mupdf|
            * `'skim'`       |vimtex-view-skim|
            * `'zathura'`    |vimtex-view-zathura|

        See |vimtex-view-configuration| for more information on various popular
        viewers and on how to configure them.

        Default: `general`

    *g:vimtex_view_general_options*
        Set options for the specified general viewer, see |vimtex-view-general|.
        The options are parsed to substitute the following keywords:

            `@pdf`    Path to pdf file
            `@tex`    Path to tex file
            `@line`   Current line number
            `@col`    Current column number

        Default value: '@pdf'

    *g:vimtex_view_mupdf_options*
    *g:vimtex_view_zathura_options*
        Set options for mupdf (|vimtex-view-mupdf|) and Zathura
        (|vimtex-view-zathura|), respectively.

        Default value: ''

    *g:vimtex_view_general_viewer*
        Use generic viewer application, see |vimtex-view-general|.

        Default value:
            Linux:   `xdg-open`
            macOS:   `open`
            Windows: `SumatraPDF` or `mupdf` if available, else `start ""`

    *g:vimtex_view_mupdf_send_keys*
        A string of keys that will be sent to MuPDF just after the PDF file has been
        opened.

        Default value: ''

    *g:vimtex_view_sioyek_exe*
        The name or path of the Sioyek executable. The default should usually work,
        but in some cases it can be useful or necessary to specify the executable
        directly. E.g., if one downloads a release version, it may be named
        something like `'Sioyek-x86_64.AppImage'`. Unless the executable location is
        available in `PATH` one must use an absolute path here.

        Default value: `'sioyek'`

    *g:vimtex_view_skim_activate*
        Set this option to 1 to make Skim have focus after command |:VimtexView| in
        addition to being moved to the foreground.

        Default value: 0

    *g:vimtex_view_skim_sync*
        Set this option to 1 to make Skim perform a forward search after successful
        compilation.

        Default value: 0

    *g:vimtex_view_skim_reading_bar*
        Set this option to 1 to highlight current line in PDF after command
        |:VimtexView| or compiler callback.

        Default value: 0

    *g:vimtex_view_zathura_check_libsynctex*
        Check on startup if Zathura is compiled with libsynctex. This is done by
        default because Zathura on some systems is compiled without libsynctex
        support, in which case forward and inverse search will not work. When this
        is the case, the startup check will provide a notification to the user.

        If this option is set to 0 or |v:false|, then the check is skipped.

        Default value: 1

    *g:vimtex_callback_progpath*
        The path to the Vim/neovim executable. This is currently passed to Zathura
        (|vimtex-view-zathura|) for use with synctex callbacks.

        You usually don't have to touch this variable; VimTeX will |v:progpath| if
        the option is not defined. But some people may use wrappers and similar to
        load Vim/neovim, in which case one may want to specify the executable
        directly.

        Default value: Undefined

------------------------------------------------------------------------------
COMMANDS                                                      *vimtex-commands*

    *:VimtexContextMenu*
    *<plug>(vimtex-context-menu)*
    :VimtexContextMenu        Show a context menu on the item below cursor.
                              See  |vimtex-context-menu| for more information.

    *:VimtexInfo*
    *<plug>(vimtex-info)*
    :VimtexInfo               Show information that is stored by VimTeX about the
                            current LaTeX project (available mostly for debug  purposes).

    *:VimtexInfo!*
    *<plug>(vimtex-info-full)*
    :VimtexInfo!              Show information that is stored by VimTeX about all
                                                        open LaTeX projects (available mostly for debug
                                                        purposes).

    *:VimtexDocPackage*
    *<plug>(vimtex-doc-package)*
    :VimtexDocPackage         Show documentation for packages. The command takes
                                                        one optional argument, which is the name of the
                                                        package to show docs for. If no argument is
                                                        supplied, it parses the command under the cursor and
                                                        opens the most relevant documentation.

    *:VimtexRefreshFolds*
    :VimtexRefreshFolds       Refresh folds, see |vimtex-zx|.

    *:VimtexTocOpen*
    *<plug>(vimtex-toc-open)*
    :VimtexTocOpen            Open table of contents.

    *:VimtexTocToggle*
    *<plug>(vimtex-toc-toggle)*
    :VimtexTocToggle          Toggle table of contents.

    *:VimtexLog*
    *<plug>(vimtex-log)*
    :VimtexLog                Open a scratch buffer to show message log with
                                                        timestamps and traces from where the messages were
                                                        raised. To close the log buffer, one may press `q`
                                                        or `<esc>`.

    *<plug>(vimtex-compile-ss)*
    :VimtexCompileSS  *:VimtexCompileSS*
        Start single shot compilation.

    *<plug>(vimtex-compile)*
    :VimtexCompile  *:VimtexCompile*
        If the compiler supports and
            is set to run in continuous mode,
                then this command works as a ¿compiler¿ toggle.
        If not,
            同VimtexCompileSS


    *<plug>(vimtex-compile-selected)*
    :VimtexCompileSelected  *:VimtexCompileSelected*
        Compile the selected part of the current LaTeX file.
        This always works linewise

        When used as a command,
        it takes a range, e.g.:

            :start,end VimtexCompileSelected

        When used as a normal mode mapping,
            the mapping will act as an |operator| on the following motion or  text object.

        when used as a visual mode mapping,
            it will act on the selected lines.


        Compiles the selected text by
        copying it to a temporary file with the same preamble as the current file.
        It will be compiled similarly to a single shot compile,
        see |:VimtexCompileSS|.
        ¿If there are errors¿,
            they will be shown in the quickfix list.


        One may specify a custom template with a template file in which
            any (single!)  line with the exact content `%%% VIMTEX PLACEHOLDER`
            will be interchanged with the selected lines.
            This allows to customize the preamble and  surrounding content.
            The template file should be named `vimtex-template.tex` or `<head>-vimtex-template.tex`,
            where `<head>` implies the head of the current file name with the extension removed.
            E.g.,
                for a file `foo.tex`,
                one may specify a custom template `foo-vimtex-template.tex`.
                This will have a higher priority than  `vimtex-template.tex`.
                在某文件中 通过 echom "l:file.tex 是: "   l:file.tex
                发现是同一目录下的  '原文件名_vimtex_selected.tex'


    *:VimtexCompileOutput*
    *<plug>(vimtex-compile-output)*
    :VimtexCompileOutput      Open file where compiler output is redirected.

    *:VimtexStop*
    *<plug>(vimtex-stop)*
    :VimtexStop               Stop compilation for the current project.

    *:VimtexStopAll*
    *<plug>(vimtex-stop-all)*
    :VimtexStopAll            Stop compilation for all open projects in the
                                                        current vim instance.

    *:VimtexStatus*
    *<plug>(vimtex-status)*
    :VimtexStatus             Show compilation status for current project.

    *:VimtexStatus!*
    *<plug>(vimtex-status-all)*
    :VimtexStatus!            Show compilation status for all open projects in the
                                                        current vim instance.

    *:VimtexClean*
    *<plug>(vimtex-clean)*
    :VimtexClean              Clean auxiliary files.

                                                        If compilation is running continuously in the
                                                                    background (which is the default behaviour),
                                                                    then this command will first temporarily stop
                                                                    compilation, then execute the clean command,
                                                                    and finally restart the compilation.

    *:VimtexClean!*
    *<plug>(vimtex-clean-full)*
    :VimtexClean!             As |:VimtexClean|, but also remove output files.

    *<plug>(vimtex-errors)*
    :VimtexErrors
        Open |quickfix| window if there are errors or  warnings.  *:VimtexErrors*

    *:VimtexView*
    *<plug>(vimtex-view)*
    :VimtexView               View `pdf` for current project, perform forward
                                                        search if available.

    *:VimtexReload*
    *<plug>(vimtex-reload)*
    :VimtexReload             Reload VimTeX scripts. This is primarily useful
                                                        when developing and debugging VimTeX itself.

    *:VimtexReloadState*
    *<plug>(vimtex-reload-state)*
    :VimtexReloadState        Reload the state for the current buffer.

    *:VimtexCountLetters*
    *:VimtexCountWords*
    *vimtex#misc#wordcount(opts)*
    :VimtexCountLetters       Shows the number of letters/characters or words in
    :VimtexCountWords         the current project or in the selected region. The
                                                        count is created with `texcount` through a call on
                                                        the main project file similar to:


                                                            texcount -nosub -sum [-letter] -merge -q -1 FILE

                                                        Default arguments may be controlled with
                                                                    |g:vimtex_texcount_custom_arg|.

                                                        One may access the information through the
                                                                    function `vimtex#misc#wordcount(opts)`, where
                                                                    `opts` is a dictionary with the following
                                                                    keys (defaults indicated):


                                                                    'range' : [1, line('$')]
                                                                    'count_letters' : 0/1
                                                                    'detailed' : 0

                                                                    If `detailed` is 0, then it only returns the
                                                                    total count. This makes it possible to use for
                                                                    e.g. statusline functions. If the `opts` dict
                                                                    is not passed, then the defaults are assumed.

    *:VimtexCountLetters!*
    *:VimtexCountWords!*
    :VimtexCountLetters!      Similar to |:VimtexCountLetters|/|:VimtexCountWords|, but
    :VimtexCountWords!        show separate reports for included files.  I.e.
                                                        presents the result of:


                                                            texcount -nosub -sum [-letter] -inc FILE

    *:VimtexImapsList*
    *<plug>(vimtex-imaps-list)*
    :VimtexImapsList          Show the list of insert mode mappings created by the
                                                        |vimtex-imaps| feature. The mappings are displayed
                                                        in a scratch buffer. Press `q` or `<esc>` to close
                                                        the buffer.

    *:VimtexToggleMain*
    *<plug>(vimtex-toggle-main)*
    :VimtexToggleMain         In general, VimTeX detects the main file for the
                                                        current LaTeX project and uses it for compilation
                                                        and many other features. However, in some cases it
                                                        may be useful to instead focus on the current file,
                                                        for instance in large projects. In such cases, one
                                                        can use |:VimtexToggleMain| to change which file to
                                                        use as the "current project". It is easy to toggle
                                                        back and forth, and both the "main project" and the
                                                        "local project" can be used simultaneously if
                                                        desired (e.g. for compilation).

                                                        To compile the current file when it is part of
                                                                    a larger project, one must of course include
                                                                    a preamble and the `\begin/\end{document}`! It is
                                                                    possible to have a working preamble in every
                                                                    file in a multi-file project with `subfiles`,
                                                                    see |vimtex-subfiles|. See also
                                                                    |g:vimtex_subfile_start_local|.

    *:VimtexClearCache*
    :VimtexClearCache {name}  Clear cache files that matches `name`. The cache
                                                        files are located at |g:vimtex_cache_root| and can
                                                        also be deleted manually.

                                                        `:VimtexClearCache ALL` clears all cache files.

------------------------------------------------------------------------------
MAP DEFINITIONS                                               *vimtex-mappings*

    *vimtex-zx*
        When VimTeX folding is enabled and when the manual mode is turned on
        (|g:vimtex_fold_manual|), then VimTeX remaps |zx| and |zX| in such that
        the folds are refreshed appropriately.

    *<plug>(vimtex-env-delete)*
    *<plug>(vimtex-env-delete-math)*
    *<plug>(vimtex-env-change)*
    *<plug>(vimtex-env-change-math)*
        Delete/Change surrounding environment. When changing, there will be
        sensible completion candidates, see |cmdline-completion|. See also
        |g:vimtex_env_change_autofill| and |g:vimtex_echo_verbose_input|.

    *<plug>(vimtex-cmd-delete)*
    *<plug>(vimtex-cmd-delete-math)*
    *<plug>(vimtex-cmd-change)*
        Delete/Change surrounding command. See also |g:vimtex_echo_verbose_input|.

    *<plug>(vimtex-delim-delete)*
    *<plug>(vimtex-delim-change-math)*
        Delete/Change surrounding (math) delimiter. See also
        |g:vimtex_echo_verbose_input|.

    *<plug>(vimtex-cmd-toggle-frac)*
        Toggle fractions between inline mode (`num/den`) and command mode
        (`\frac{num}{den}`).

        In visual mode, the selected text is toggled if it matches either
        a `\frac{}{}` command or a `numerator / denominator` string. In normal mode,
        we try to detect the surrounding fraction command or inline fraction
        expression. If successful, the detected fraction is toggled.

    *<plug>(vimtex-cmd-toggle-star)*
    *<plug>(vimtex-env-toggle-star)*
        Toggle starred command/environment.

    *<plug>(vimtex-env-toggle-math)*
        Toggle between inline math and displayed math, e.g.:


                                                ts$        \[
            $f(x) = 1$         ↔            f(x) = 1
                                                                     \]

        One may change the toggle sequence with |g:vimtex_env_toggle_math_map|.

    *<plug>(vimtex-delim-toggle-modifier)*
    *<plug>(vimtex-delim-toggle-modifier-reverse)*
        Toggle delimiter modifiers, by default alternating between `(...)` and
        `\left(...\right)`.  The normal mode mapping toggles the closest surrounding
        delimiter, whereas the visual mode mapping toggles all delimiters that are
        fully contained in the visual selection.  The visual selection is preserved.

        When |g:vimtex_delim_toggle_mod_list| is set to contain more than one set of
        modifiers, these mappings iterate through the list instead of just toggling.
        For example, one may alternate between `(...)`, `\bigl(...\bigr)`,
        `\Bigl(...\Bigr)`, and so on.  These mappings accept a [count], which allows
        the modifier to be incremented multiple steps at a time.  The `-reverse`
        mapping goes backwards through the modifier list instead of forwards.

        See also |g:vimtex_delim_toggle_mod_list| and |g:vimtex_delim_list|.

    *<plug>(vimtex-cmd-create)*
        This mapping works in both insert mode, normal mode and visual mode. It is
        mapped by default to <f7>. See below for the behaviour in the different
        modes.

        Insert mode:
            Convert the preceding text into a LaTeX command.
            That is,
            it prepends a backslash and adds an opening brace.
            It also moves the cursor to the end of the word.
            If you also want the closing brace (e.g.
            to emulate delimitMate [0] or any of its like),
            you can add the following to your  `~/.vim/after/ftplugin/tex.vim`:


                imap <buffer> <f7> <plug>(vimtex-cmd-create)}<left>

            [0]: https://github.com/Raimondi/delimitMate

        Normal/Visual mode:
            Surrounds the word under the cursor/visual selection by the command
            provided in an input prompt.

    *<plug>(vimtex-delim-close)*
        Close the current environment or delimiter (insert mode), except the
        top-level `document` environment.

    *<plug>(vimtex-delim-add-modifiers)*
        Add `\left` and `\right)` modifiers to all surrounding "unmodified"
        delimiteres in the current math scope.

    *<plug>(vimtex-reverse-search)*
        Do reverse search for the MuPDF viewer, see |vimtex-view-mupdf|.

    *<plug>(vimtex-ac)*   Commands
    *<plug>(vimtex-ic)*
    *<plug>(vimtex-ad)*   Delimiters
    *<plug>(vimtex-id)*
    *<plug>(vimtex-ae)*   Environments (except top-level `document`)
    *<plug>(vimtex-ie)*
    *<plug>(vimtex-a$)*   Math environments
    *<plug>(vimtex-i$)*
    *<plug>(vimtex-aP)*   Sections
    *<plug>(vimtex-iP)*
    *<plug>(vimtex-am)*   Items
    *<plug>(vimtex-im)*
        These are all text object mappings for the indicated types of objects , see
        |vimtex-text-objects| for more info.

    *<plug>(vimtex-%)*
        Find matching pair.

    *<plug>(vimtex-]])*
        go to [count] next end of a section.
        |exclusive| motion.

    *<plug>(vimtex-][)*
        go to [count] next beginning of a section.
        |exclusive| motion.

    *<plug>(vimtex-[])*
        go to [count] previous end of a section.
        |exclusive| motion.

    *<plug>(vimtex-[[)*
        go to [count] previous beginning of a section.
        |exclusive| motion.

    *<plug>(vimtex-]m)*
        go to [count] next start of an environment `\begin`.
        |exclusive| motion.

    *<plug>(vimtex-]M)*
        go to [count] next end of an environment `\end`.
        |exclusive| motion.

    *<plug>(vimtex-[m)*
        go to [count] previous start of an environment `\begin`.
        |exclusive| motion.

    *<plug>(vimtex-[M)*
        go to [count] previous end of an environment `\end`.
        |exclusive| motion.

    *<plug>(vimtex-]n)*
        go to [count] next start of a math zone.
        |exclusive| motion.

    *<plug>(vimtex-]N)*
        go to [count] next end of a math zone.
        |exclusive| motion.

    *<plug>(vimtex-[n)*
        go to [count] previous start of a math zone.
        |exclusive| motion.

    *<plug>(vimtex-[N)*
        go to [count] previous end of a math zone.
        |exclusive| motion.

    *<plug>(vimtex-]r)*
        go to [count] next start of a frame environment.
        |exclusive| motion.

    *<plug>(vimtex-]R)*
        go to [count] next end of a frame environment.
        |exclusive| motion.

    *<plug>(vimtex-[r)*
        go to [count] previous start of a frame environment.
        |exclusive| motion.

    *<plug>(vimtex-[R)*
        go to [count] previous end of a frame environment.
        |exclusive| motion.

    *<plug>(vimtex-]/)*
        go to [count] next start of a LaTeX comment "%".
        |exclusive| motion.

    *<plug>(vimtex-]star)*
        go to [count] next end of a LaTeX comment "%".
        |exclusive| motion.

    *<plug>(vimtex-[/)*
        go to [count] previous start of a LaTeX comment "%".
        |exclusive| motion.

    *<plug>(vimtex-[star)*
        go to [count] previous end of a LaTeX comment "%".
        |exclusive| motion.

------------------------------------------------------------------------------
INSERT MODE MAPPINGS                                             *vimtex-imaps*

    Some LaTeX commands are very common, and so it is both natural and convenient
    to have insert mode mappings/abbreviations for them. VimTeX therefore
    provides a list of such mappings that are enabled by default, see
    |g:vimtex_imaps_list|. The mappings utilize a map leader defined by
    |g:vimtex_imaps_leader|. The default list of maps are all math mode mappings,
    but one may also add mappings that are available and useful outside of math
    mode. To see the list of mappings that are created, one can use the command
    |:VimtexImapsList|, which is by default mapped to `<localleader>lm`.

    It is of course possible to customize the list of mappings. First, one may
    specifically disable the entire imaps feature with |g:vimtex_imaps_enabled| or
    specific default mappings through |g:vimtex_imaps_disabled|. Second, one may
    specify |g:vimtex_imaps_list|, which will overwrite the default list. Finally,
    one may add new maps through calls to the function |vimtex#imaps#add_map|. The
    following are some examples of how to customize the mappings:


        " Disable \alpha and \beta mappings
        let g:vimtex_imaps_disabled = ['a', 'b']

        " Add custom mapping through vimtex#imaps#add_map
        call vimtex#imaps#add_map({
                    \ 'lhs' : 'test',
                    \ 'rhs' : '\tested',
                    \ 'wrapper' : 'vimtex#imaps#wrap_trivial'
                    \})

        " Add custom mapping: #rX -> \mathrm{X}
        call vimtex#imaps#add_map({
                    \ 'lhs' : 'r',
                    \ 'rhs' : 'vimtex#imaps#style_math("mathrm")',
                    \ 'expr' : 1,
                    \ 'leader' : '#',
                    \ 'wrapper' : 'vimtex#imaps#wrap_math'
                    \})

    *vimtex#imaps#add_map*

    This function is used to add new insert mode mappings. It takes a single
    dictionary argument:


        map = {
            \ 'lhs' : lhs,
            \ 'rhs' : rhs,
            \ 'expr' : bool,
            \ 'leader' : leader_key,
            \ 'wrapper' : function_name,
            \ 'context' : value,
            \ }

    Explanation of the keys:

        lhs
            Mandatory argument. The left-hand side part of the map.

        rhs
            Mandatory argument. The right-hand side part of the map. There is one
            utility function that can be useful:

                *vimtex#imaps#style_math*
                    Wraps the RHS inside a specified command, e.g. `\myarg{RHS}`, if the
                    cursor is inside math mode.

        expr
            Either 0/|v:false| or 1/|v:true| (default: 0). If true, then the
            right-hand side is evaluated before it is passed to the wrapper.
            This is necessary e.g. for use with |vimtex#imaps#style_math|.

        leader
            Custom leader key. If the key is not present, then |g:vimtex_imaps_leader|
            is used as leader key.

        wrapper
            The name of a wrapper function that is used to generate the `rhs`. Two
            functions are available from VimTeX:

                *vimtex#imaps#wrap_trivial*
                    Trivial wrapper: Simply returns `rhs`.

                *vimtex#imaps#wrap_math*
                    Only define `rhs` if inside a math environment. This is the default
                    wrapper function and will be used if no other wrapper is supplied.

                *vimtex#imaps#wrap_environment*
                    Only define `rhs` if inside a specified environment. The wrapper works
                    by utilizing the `context` key, which is a list that contains strings
                    and/or dictionaries:

                        i.  If the entry is a string, then the `lhs` is mapped to `rhs`
                                inside the specified environment.
                        ii. If the entry is a dictionary, then we assume it has two entries,
                                `envs` and `rhs`, where `envs` is a list of environment names.
                                If inside any environment in this list, then we expand to the
                                corresponding `rhs`. This allows one to create a mapping that
                                expands to different `rhs`s in different environments.

            Of course, one may use custom wrapper functions. To write a custom wrapper
            function, please see the source for examples on how the VimTeX wrappers
            are written.

        context
            A value that can be used by the chosen wrapper function.

    *vimtex-neosnippet*
    *vimtex-UltiSnips*
    That this feature is not the same as the snippet feature of |UltiSnips|
    or |neosnippet|. The imaps feature of VimTeX previously supported `automatic`
    snippets, but these have been removed after careful considerations and input
    from VimTeX users, please see VimTeX issue #295:
    https://github.com/lervag/vimtex/issues/295#issuecomment-164262446
    It has been decided that the best approach is to only provide basic mappings,
    and to let users manually create automatic snippets through the anonymous
    snippet functions in |UltiSnips| and |neosnippet|, please see |UltiSnips#Anon|
    and |neosnippet#anonymous|, respectively. Here are a couple of examples that
    show how to create such mappings:


            " Using neosnippet#anonymous
            inoremap <silent><expr> __ neosnippet#anonymous('_${1}${0}')
            inoremap <silent><expr> ^^ neosnippet#anonymous('^${1}${0}')

            " Using UltiSnips#Anon
            inoremap <silent> __ __<c-r>=UltiSnips#Anon('_{$1}$0', '__', '', 'i')<cr>
            inoremap <silent> ^^ ^^<c-r>=UltiSnips#Anon('^{$1}$0', '^^', '', 'i')<cr>

    A drawback with the anonymous UltiSnips snippets is that they do not nest.
    That is, if you did `__` twice in a row, only the second one could be escaped.
    In recent versions of |UltiSnips|, one may set normal snippets to trigger
    automatically, see |UltiSnips-autotrigger|. This allows nesting, and is
    therefore a better approach than using the anonymous snippet function.

------------------------------------------------------------------------------
EVENTS                                                          *vimtex-events*

VimTeX defines some events using the |User| autocmd that may be used for
further customization.

    *VimtexEventQuit*
        This event is triggered when the last buffer for a particular LaTeX project
        is wiped (for example, using `:bwipeout`) and when Vim is quit.  The event
        may be used, for instance, to cleanup up auxiliary build files or close
        open viewers (see Examples below).  With Vim defaults, this event is not
        triggered when using `:quit` or `:bdelete` since these commands merely hide
        the buffer.  In multi-file projects, the event may be triggered multiple
        times.  The 'b:vimtex' variable contains context data for the quitting
        file or project.  For example, 'b:vimtex.tex' identifies the tex file being
        wiped, or the main tex file of a multi-file project.

        Commands such as |:VimtexClean| cannot be used in this autocommand
        because when quitting vim the current buffer does not necessarily have
        filetype 'tex'.

    *VimtexEventInitPre*
    *VimtexEventInitPost*
        This event is triggered at the start/end of VimTeX initialization.  The
        post event may e.g. be used to automatically start compiling a document.

    *VimtexEventCompileStarted*
        This event is triggered after compilation is started.

    *VimtexEventCompileStopped*
        This event is triggered after compilation is stopped.

    *VimtexEventCompiling*
        This event is triggered when the compiler backend triggers a new
        compilation. This is only supported by |vimtex-compiler-latexmk|.

    *VimtexEventCompileSuccess*
    *VimtexEventCompileFailed*
        These events are triggered after successful/failed compilation and
        allows users to add custom callback functionality.

    *VimtexEventTocCreated*
        This event is triggered after a ToC window is created.

    *VimtexEventTocActivated*
        This event is triggered when a ToC entry has been activated. This allows
        to add custom behaviour after opening an entry, e.g. positioning the
        buffer window with the |zt| or |zz| mappings.

    *VimtexEventView*
        This event is triggered after the viewer has opened/forward search has
        been performed by the command |:VimtexView| or the related mapping.

    *VimtexEventViewReverse*
        This event is triggered at the end of the |vimtex#view#inverse_search|
        function, which can be used as the callback function for reverse goto from
        a PDF viewer.

Examples:


    " Compile on initialization, cleanup on quit
    augroup vimtex_event_1
        au!
        au User VimtexEventQuit     VimtexClean
        au User VimtexEventInitPost VimtexCompile
    augroup END

    " Close viewers when VimTeX buffers are closed
    function! CloseViewers()
        if executable('xdotool')
                    \ && exists('b:vimtex.viewer.xwin_id')
                    \ && b:vimtex.viewer.xwin_id > 0
            call system('xdotool windowclose '. b:vimtex.viewer.xwin_id)
        endif
    endfunction

    augroup vimtex_event_2
        au!
        au User VimtexEventQuit call CloseViewers()
    augroup END

    " Add custom mappings in ToC buffer
    function! TocMappings()
        " You probably don't want to do this, though...
        nnoremap <silent><buffer><nowait> q :quitall!
    endfunction

    augroup vimtex_event_3
        au!
        au User VimtexEventTocCreated call TocMappings()
    augroup END

    " Specify window position when opening ToC entries
    augroup vimtex_event_4
        au!
        au User VimtexEventTocActivated normal! zt
    augroup END

    " Specify extra behaviour after reverse goto
    augroup vimtex_event_4
        au!
        au User VimtexEventViewReverse normal! zMzvzz
    augroup END

------------------------------------------------------------------------------
TEXT OBJECTS                                              *vimtex-text-objects*

    Text objects (and motions) are a fundamental feature in Vim. Operations can be
    combined with motions or text objects in endless ways and can be repeated with
    the dot operator (|repeat.txt|). If you are reading this and do not know about
    these things, then it is strongly advised to read the help section about
    |text-objects| and the famous Stack Overflow post "Your problem with Vim is
    that you don't grok vi":
    http://stackoverflow.com/questions/1218390/what-is-your-most-productive-shortcut-with-vim/1220118#1220118

    VimTeX defines LaTeX specific text objects (and motions). These are all
    mappings, and as such, they are also described in the sections
    |vimtex-mappings| and |vimtex-default-mappings|.

    The usual convention for text object mappings is to prepend "a" to select "a"n
    object, including the whitespace/delimiters/etc, and to prepend "i" to select
    the corresponding "inner" object. This is the case for VimTeX text objects,
    e.g. by default, `vie` will visually select the inner part of an environment,
    whereas `vae` will select the entire environment including the boundaries.

    VimTeX supports the well known |targets.vim| as a "backend" for the command
    and environment text objects (`ie`/`ae` and `ic`/`ac`). This should work
    automatically, see |g:vimtex_text_obj_variant| for more info.

    Some examples of how to use the text objects can be useful. The following is
    a simple table that shows the original text on the left, the keys that are
    typed in the middle, and the result on the right. The bar "|" indicates the
    cursor position before the operation.


        BEFORE                       KEYS    AFTER
        \comm|and{arg}               dic     \command{}
        \command{a|rg}               gUac    \COMMAND{ARG}

        \lef|t( asd \right)          cid     \left(| \right)

        \begin{x}                    die     \begin{x}
            hello world|                       \end{x}
        \end{x}

        $math | here$                da$

        \begin{itemize}                      \begin{itemize}
            \item hello moon|          cim       \item |
        \end{itemize}                        \end{itemize}

        \begin{itemize}                      \begin{itemize}
            \item hello moon|          dam     \end{itemize}
        \end{itemize}

    Associated settings:
    * |g:vimtex_text_obj_enabled|
    * |g:vimtex_text_obj_linewise_operators|
    * |g:vimtex_text_obj_variant|

    ==============================================================================
    COMPLETION                                                  *vimtex-completion*

    If |g:vimtex_complete_enabled| is 1 (default), then VimTeX sets the
    'omnifunc' to provide omni completion, see |compl-omni|.  Omni completion is
    then accessible with |i_ctrl-x_ctrl-o|.

    The omni completion completes citations, labels, glossary entries and
    filenames. If desired, one may set |g:vimtex_complete_close_braces|, which
    makes the completion include closing braces.

    Associated settings:
    * |g:vimtex_complete_bib|
    * |g:vimtex_complete_close_braces|
    * |g:vimtex_complete_enabled|
    * |g:vimtex_complete_ignore_case|
    * |g:vimtex_complete_ref|
    * |g:vimtex_complete_smart_case|

------------------------------------------------------------------------------
COMPLETE CITATIONS                                      *vimtex-complete-cites*

    Citation completion is triggered by `'\cite{'` commands. The completion parses
    included bibliography files (`*.bib`) and `thebibliography` environments to
    gather the completion candidates.

    By default, cite completion is "smart" in that it allows to complete on author
    names, title, and similar by matching against a match string defined by
    |g:vimtex_complete_bib.match_str_fmt|. If one prefers, one may set the
    `simple` key of |g:vimtex_complete_bib| to only allow completion on the
    bibkeys directly. This should typically work better with autocomplete plugins.

    As an example of the smart completion, assume that a bibliography file is
    included with the following entry:


                    @book { knuth1981,
                                    author = "Donald E. Knuth",
                                    title = "Seminumerical Algorithms",
                                    publisher = "Addison-Wesley",
                                    year = "1981" }

    Then, with the default configuration, the bibliography key `knuth1981` will be
    completed with e.g.:


                    \cite{Knuth 1981<ctrl-x><ctrl-o>
                    \cite{algo<ctrl-x><ctrl-o>
                    \cite{Don.*Knuth<ctrl-x><ctrl-o>

    As is shown in the last example, the search string (e.g. `Don.*Knuth`) is
    applied as a regular expression.

------------------------------------------------------------------------------
COMPLETE LABELS                                        *vimtex-complete-labels*

Label completion is triggered by `\ref{` commands.  The completion parses every
relevant aux file to gather the completion candidates.  This is important,
because it means that the completion only works when the LaTeX document has
been compiled.

As an example:


                \ref{sec:<ctrl-x><ctrl-o>

offers a list of all matching labels with a menu that contains the associated
value and page number.

The completion base is matched as a regex in the following order:


                \ref{<base><ctrl-x><ctrl-o>

        1. The menu, which contains the reference value and page number.
        2. The actual labels.
        3. The menu and label, separated by whitespace. An example:


                \ref{eq 2<ctrl-x><ctrl-o>

             This matches "eq" in the label and "2" in the menu.

Finally, it should also be mentioned that for `\eqref`, the candidates will
automatically be filtered to only show equation references.

------------------------------------------------------------------------------
COMPLETE COMMANDS AND ENVIRONMENTS                   *vimtex-complete-commands*
*vimtex-complete-environments*

Command completion is available after `\` and should provide completion
candidates for relevant LaTeX commands.  The document's preamble is analysed,
and commands will be completed for the loaded packages as well as those
defined within the preamble using `\newcommand`, `\let` and `\def`.  Environment
completion is also available after `\begin{` or `\end{`.  As with commands, the
suggested environment names come from the loaded packages and `\newenvironment`
definitions in the preamble.

A lot of packages are supported, see the path `VIMTEX/autoload/vimtex/complete`
for a relevant file listing.

------------------------------------------------------------------------------
COMPLETE FILE NAMES                                 *vimtex-complete-filenames*

File name completion is available for the following macros:

    `\includegraphics{`
        Completes image file names.

    `\input{`
    `\include{`
    `\includeonly{`
        Complete `.tex` files.

    `\includepdf{`
        Complete `.pdf` files. This macro is provided by the `pdfpages` package.

    `\includestandalone{`
        Complete `.tex` files. This macro is provided by the `standalone` package.

------------------------------------------------------------------------------
COMPLETE INCLUDE GLOSSARY ENTRIES                    *vimtex-complete-glossary*

Glossary entry completion from the `glossaries` package are triggered by the
commands '\gls{', '\glspl{' and their variations.

------------------------------------------------------------------------------
COMPLETE PACKAGE FILES                               *vimtex-complete-packages*
*vimtex-complete-classes*
*vimtex-complete-bibstyle*

Package, documentclass, and bibliography style completion are available for
the `\usepackage{`, `\documentclass{`, and `\bibliographystyle` commands,
respectively.

The completion relies on the contents of `ls-R` files that are found with:


    kpsewhich --all ls-R

Packages and documentclasses installed at `TEXMFHOME` will also be searched.
The default value can be found with:


    kpsewhich --var-value TEXMFHOME

If you want to change the default value of `TEXMFHOME` in your shell
            startup file and use `gvim` started from the desktop environment, please
            read |vimtex-faq-texmfhome|.

------------------------------------------------------------------------------
AUTOCOMPLETE                                             *vimtex-complete-auto*

Vim does not provide automatic completion by itself, but there exist at least
several good plugins that provide this: |coc-nvim|, |deoplete|, |neocomplete|,
|ncm2|, |nvim-completion-manager|, |youcompleteme|, and |nvim-compe|.
Moreover, there is |VimCompletesMe| that overrides <tab> to trigger different
built-in completions, such as the omni-completion by VimTeX, depending on the
context. See below for descriptions on how to setup these with VimTeX.

coc.nvim
*vimtex-complete-coc.nvim*
|coc-nvim| is an intellisense engine for Vim8 & Neovim. It's a completion
framework and language server client which supports extension features of
Visual Studio Code. The project is here: https://github.com/neoclide/coc.nvim.

|coc-nvim| can be installed using vim-plug:


    Plug 'neoclide/coc.nvim'

However, it does require some more steps, and users are recommended to read
the installation instructions in the `coc.nvim` wiki:
https://github.com/neoclide/coc.nvim/wiki/Install-coc.nvim

To configure for VimTeX, one should use the extension plugin |coc-vimtex|,
which may be found here: https://github.com/neoclide/coc-vimtex. To use it,
first make sure you have |coc-nvim| installed, then just run:


    :CocInstall coc-vimtex

The `coc-vimtex` extension has a few options that can be configured in the
`coc-settings.json` file. See the documentation for |coc-nvim| to learn how to
apply the configurations. The following is a list of the options with a short
description as it is specified on the project web page:


    coc.source.vimtex.disableSyntaxes    disabled syntax names
    coc.source.vimtex.enable             set to false to disable this source
    coc.source.vimtex.priority           priority of source, default 99
    coc.source.vimtex.shortcut           shortcut used in menu of completion item

The README of `coc.nvim` suggests using `noremap K` to show
documentation. `K` is also used by VimTeX as one of the default maps (see
|vimtex-default-mappings|) for the same purpose. To enable VimTeX's mapping
for `.tex` files (since `coc.nvim` does not have a doc source), do one of the
following:

* Manually remap for `.tex` files: Put the following in your
    `$HOME/.vim/after/ftplugin/tex.vim:`


        map <buffer> K <Plug>(vimtex-doc-package)

* Use a custom function in your |vimrc| file, something like this:


        nnoremap <silent> K :call <sid>show_documentation()<cr>
        function! s:show_documentation()
            if index(['vim', 'help'], &filetype) >= 0
                execute 'help ' . expand('<cword>')
            elseif &filetype ==# 'tex'
                VimtexDocPackage
            else
                call CocAction('doHover')
            endif
        endfunction

deoplete
*vimtex-complete-deoplete*
|deoplete| is a modern remake of |neocomplete|, and was originally written
specifically for Neovim, see here: https://github.com/Shougo/deoplete.nvim. It
is a highly customizable and flexible completion manager.

To configure for VimTeX, one may use:


    " This is new style
    call deoplete#custom#var('omni', 'input_patterns', {
                    \ 'tex': g:vimtex#re#deoplete
                    \})

    " This is old style (deprecated)
    if !exists('g:deoplete#omni#input_patterns')
            let g:deoplete#omni#input_patterns = {}
    endif
    let g:deoplete#omni#input_patterns.tex = g:vimtex#re#deoplete

neocomplete
*vimtex-complete-neocomplete*
|neocomplete| is also a flexible automatic completion engine for vim, although
active development has been stopped. Users are recommended to change to
|deoplete|, see also |vimtex-complete-deoplete|. The plugin is available here:
https://github.com/Shougo/neocomplete.vim.

The following options may be used to enable automatic completion for LaTeX
documents with |neocomplete| and VimTeX's omni completion function:


    if !exists('g:neocomplete#sources#omni#input_patterns')
        let g:neocomplete#sources#omni#input_patterns = {}
    endif
    let g:neocomplete#sources#omni#input_patterns.tex =
                \ g:vimtex#re#neocomplete

ncm2
*vimtex-complete-ncm2*
|ncm2| is a modern remake and replacement of |nvim-completion-manager| and is
supposed to be a "Slim, Fast and Hackable Completion Framework for Neovim":
https://github.com/ncm2/ncm2

The following simple configuration should work well with VimTeX:


    " include the following plugins (here using junnegun/vim-plug)
    Plug 'roxma/nvim-yarp'
    Plug 'ncm2/ncm2'

    set completeopt=noinsert,menuone,noselect

    augroup my_cm_setup
        autocmd!
        autocmd BufEnter * call ncm2#enable_for_buffer()
        autocmd Filetype tex call ncm2#register_source({
                        \ 'name': 'vimtex',
                        \ 'priority': 8,
                        \ 'scope': ['tex'],
                        \ 'mark': 'tex',
                        \ 'word_pattern': '\w+',
                        \ 'complete_pattern': g:vimtex#re#ncm2,
                        \ 'on_complete': ['ncm2#on_complete#omni', 'vimtex#complete#omnifunc'],
                        \ })
    augroup END

For more lenient, omni-complete-like, filtering of completion candidates,
use the following setup (in your init.vim or a personal ftplugin) instead:


    augroup my_cm_setup
        autocmd!
        autocmd BufEnter * call ncm2#enable_for_buffer()
        autocmd Filetype tex call ncm2#register_source({
                        \ 'name' : 'vimtex-cmds',
                        \ 'priority': 8,
                        \ 'complete_length': -1,
                        \ 'scope': ['tex'],
                        \ 'matcher': {'name': 'prefix', 'key': 'word'},
                        \ 'word_pattern': '\w+',
                        \ 'complete_pattern': g:vimtex#re#ncm2#cmds,
                        \ 'on_complete': ['ncm2#on_complete#omni', 'vimtex#complete#omnifunc'],
                        \ })
        autocmd Filetype tex call ncm2#register_source({
                        \ 'name' : 'vimtex-labels',
                        \ 'priority': 8,
                        \ 'complete_length': -1,
                        \ 'scope': ['tex'],
                        \ 'matcher': {'name': 'combine',
                        \             'matchers': [
                        \               {'name': 'substr', 'key': 'word'},
                        \               {'name': 'substr', 'key': 'menu'},
                        \             ]},
                        \ 'word_pattern': '\w+',
                        \ 'complete_pattern': g:vimtex#re#ncm2#labels,
                        \ 'on_complete': ['ncm2#on_complete#omni', 'vimtex#complete#omnifunc'],
                        \ })
        autocmd Filetype tex call ncm2#register_source({
                        \ 'name' : 'vimtex-files',
                        \ 'priority': 8,
                        \ 'complete_length': -1,
                        \ 'scope': ['tex'],
                        \ 'matcher': {'name': 'combine',
                        \             'matchers': [
                        \               {'name': 'abbrfuzzy', 'key': 'word'},
                        \               {'name': 'abbrfuzzy', 'key': 'abbr'},
                        \             ]},
                        \ 'word_pattern': '\w+',
                        \ 'complete_pattern': g:vimtex#re#ncm2#files,
                        \ 'on_complete': ['ncm2#on_complete#omni', 'vimtex#complete#omnifunc'],
                        \ })
        autocmd Filetype tex call ncm2#register_source({
                        \ 'name' : 'bibtex',
                        \ 'priority': 8,
                        \ 'complete_length': -1,
                        \ 'scope': ['tex'],
                        \ 'matcher': {'name': 'combine',
                        \             'matchers': [
                        \               {'name': 'prefix', 'key': 'word'},
                        \               {'name': 'abbrfuzzy', 'key': 'abbr'},
                        \               {'name': 'abbrfuzzy', 'key': 'menu'},
                        \             ]},
                        \ 'word_pattern': '\w+',
                        \ 'complete_pattern': g:vimtex#re#ncm2#bibtex,
                        \ 'on_complete': ['ncm2#on_complete#omni', 'vimtex#complete#omnifunc'],
                        \ })
    augroup END

nvim-completion-manager
*vimtex-complete-ncm*
|nvim-completion-manager| has been replaced by |ncm2|, and users are
recommended to change. See |vimtex-complete-ncm2| for hints on how to setup
|ncm2| for VimTeX.

|nvim-completion-manager| is a fast, extensible, async completion framework
for neovim (and Vim version 8.0 and above).  The project is available here:
https://github.com/roxma/nvim-completion-manager

To configure for VimTeX, one can use the following code:


    augroup my_cm_setup
        autocmd!
        autocmd User CmSetup call cm#register_source({
                    \ 'name': 'vimtex',
                    \ 'priority': 8,
                    \ 'scoping': 1,
                    \ 'scopes': ['tex'],
                    \ 'abbreviation': 'tex',
                    \ 'cm_refresh_patterns': g:vimtex#re#ncm,
                    \ 'cm_refresh': {'omnifunc': 'vimtex#complete#omnifunc'},
                    \ })
    augroup END

YouCompleteMe
*vimtex-complete-youcompleteme*
|youcompleteme| is probably the most popular code-completion engine for Vim.  The
github repository is here: https://github.com/ycm-core/YouCompleteMe.
It is described as:

> YouCompleteMe is a fast, as-you-type, fuzzy-search code completion engine
> for Vim. It has several completion engines: an identifier-based engine that
> works with every programming language, a semantic, Clang [3]-based engine
> that provides native semantic code completion for the C-family languages,
> a Jedi [4]-based completion engine for Python, an OmniSharp [5]-based
> completion engine for C# and an omnifunc-based completer that uses data from
> Vim's omnicomplete system to provide semantic completions for many other
> languages (Ruby, PHP etc.).

To enable automatic completion with |youcompleteme|, use the following options:


    if !exists('g:ycm_semantic_triggers')
        let g:ycm_semantic_triggers = {}
    endif
    au VimEnter * let g:ycm_semantic_triggers.tex=g:vimtex#re#youcompleteme

VimCompletesMe
*vimtex-complete-vcm*
A plugin that maps <tab> to trigger the built-in completion that is most
suitable to the current context.  The plugin is available here:
https://github.com/ajh17/VimCompletesMe.

The following options may be used to enable completion with the <tab> trigger
for LaTeX documents with |VimCompletesMe| and VimTeX's omni completion function:


    augroup VimCompletesMeTex
        autocmd!
        autocmd FileType tex
                \ let b:vcm_omni_pattern = g:vimtex#re#neocomplete
    augroup END

nvim-cmp
*vimtex-complete-nvim-cmp*
|nvim-cmp| [0] is the successor of |nvim-compe|. It provides completion for
different sources, including omni-completion through the additional `cmp-omni`
package [1]. It is relatively straightforward to configure with VimTeX. First,
both |nvim-cmp| and `cmp-omni` has to be installed, then `cmp-omni` must be
added to the list of sources in your config. For example, in Lua, it should
look something like this:


    cmp = require('cmp')
    cmp.setup {
        sources = cmp.config.sources { { name = 'omni', }, }
    }

One should |nvim-cmp| overrides the standard completion-menu
formatting. To preserve the format as provided by VimTeX, one can supply
a custom format function. One good solution is to put the |nvim-cmp|
configuration for `.tex` files in your `after/ftplugin/tex.lua` with content
similar to this:


    require('cmp').setup.buffer {
        formatting = {
            format = function(entry, vim_item)
                    vim_item.menu = ({
                        omni = (vim.inspect(vim_item.menu):gsub('%"', "")),
                        buffer = "[Buffer]",
                        -- formatting for other sources
                        })[entry.source.name]
                    return vim_item
                end,
        },
        sources = {
            { name = 'omni' },
            { name = 'buffer' },
            -- other sources
        },
    }

[0]: https://github.com/hrsh7th/nvim-cmp
[1]: https://github.com/hrsh7th/cmp-omni

nvim-compe
*vimtex-complete-nvim-compe*
|nvim-compe| is an automatic completion plugin for Neovim. It has support for
many different completion sources, including omni-completion. However,
|nvim-compe| has been deprecated in favor of the more recent |nvim-cmp|, see
|vimtex-complete-nvim-cmp|. The following configuration examples should still
be valid for anyone who for some reason would still wish to use |nvim-compe|.
https://github.com/hrsh7th/nvim-compe.

The omni-completion source can be enabled for TeX/LaTeX files by adding `omni`
to the completion sources and specifying the `tex` filetype. For example, in
Lua, it should look something like this:


    require('compe').setup({
            source = {
                    omni = {
                            filetypes = {'tex'},
                    },
            },
            -- the rest of your compe config...
    })

And in Vimscript, it should look something like this:


    let g:compe.source = {
                \ 'omni': {
                \  'filetypes': ['tex'],
                \ }
                \}


 vim:tw=78:ts=8:ft=help:norl:fdm=marker:

DIY  vim: filetype=leo:syntax=leo:
DIY_again
DIY_2  vim:filetype=help:syntax=help:
