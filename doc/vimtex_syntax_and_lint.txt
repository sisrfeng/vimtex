

==============================================================================
SYNTAX HIGHLIGHTING                                             *vimtex-syntax*

VimTeX provides a core syntax plugin combined with package specific addons.
The syntax plugin aims to be both consistent,
structured,
and efficient.
The  package specific addons are generally only loaded when applicable.

LaTeX is a macro expansion language and
it is impossible to write a fully  correct syntax parser  without
running the `tex` compiler itself.
VimTeX aims  to be pragmatic and provide a best-effort syntax highlighting - a decent trade
off between simplicity and completeness.

There will probably always be situations where the parser will fail,
and in  some cases it may be hard to "recover".
It is therefore possible to manually
activate a severely ‚úåreduced syntax zone‚úå to handle such situations.
The zone is  activated with the directive `% VimTeX: SynIgnore on` and
disabled with the  similar directive `% VimTeX: SynIgnore off`, e.g.:


  % VimTeX: SynIgnore on
  \catcode`\$=11
  $
  \catcode`\$=3
  % VimTeX: SynIgnore off

The above LaTeX code will look plain (Ê≥®Èáä),
    but OK with VimTeX.

The directive  is matched case insensitive,
and the synonyms `enable` and `disable` may be  used instead of `on` and `off`.

Overleaf's magic comment [0] is also supported similarly as the `SynIgnore`
method described above, i.e.:

  %%begin novalidate
  \catcode`\$=11
  $
  \catcode`\$=3
  %%end novalidate

The VimTeX syntax plugin is loosely based on Dr Chip's syntax plugin for LaTeX
which is shipped by default with Vim and neovim (|ft-tex-syntax|) [1].
There  are several major differences that users may want to be aware of:
    * VimTeX syntax use different names for almost all syntax groups.
    * VimTeX syntax does not support syntax based folding.
    * VimTeX syntax does not lint `@` in commands, e.g. `\@cmd` (you should know  what you are doing).

[0]: https://www.overleaf.com/learn/how-to/Code_Check
[1]: http://www.drchip.org/astronaut/vim/index.html#SYNTAX_TEX

settings:
    *g:vimtex_syntax_enabled*
        Use this option to disable/enable syntax highlighting as provided by VimTeX.
        Default value: 1.


    *g:vimtex_syntax_conceal*

            A dictionary for specifying
            which  core conceal features to activate.
            This mostly implies concealing particular elements with a replacement unicode character.
            For more info,
                    see |vimtex-syntax-conceal|.
            To disable all conceal features in one go,
                    use |g:vimtex_syntax_conceal_disable|.

        The following keys are available:

            accents
                Conceal accented characters, e.g. `\^a` --> `√¢`.

            ligatures
                Conceal ligatures such as `\aa` --> `√•` and `''` --> `‚Äú`.

            cites
                Conceal LaTeX cite commands such as `\citet[...]{ref00}`. The conceal
                style is specified by |g:vimtex_syntax_conceal_cites|.

            fancy
                Some extra fancy replacements, e.g. `\item` --> ‚óã.

            greek
                Replace TeX greek letter commands into the equivalent unicode greek
                letter.

            math_bounds
                Conceal the TeX math bounds characters: pairs of `$` and `$$`, `\(` ...
                `\)`, and `\[` ... `\]`.

            math_delimiters
                Replace possibly modified math delimiters with a single unicode
                letter. Modified means delimiters prepended with e.g. `\left` or
                `\bigl`. As an example, this will perform the replacement

                    `\Biggl\langle ... \Biggr\rangle` --> `„Äà ... „Äâ`

            math_fracs
                Replace some simple fractions like `\frac 1 2` --> ¬Ω.

            math_super_sub
                Replace simple math super and sub operators, e.g. `x^2` --> `x¬≤`.

            math_symbols
                Replace various math symbol commands to an equivalent unicode character.
                This includes quite a lot of replacements, so be warned!

            sections
                Conceal `\(sub)*section` commands. The titles are replaced with Markdown
                style ATX headers, e.g.:

                    `\section{Test}`    --> `# Test`
                    `\subsection{Test}` --> `## Test`

            styles
                Conceal the LaTeX command "boundaries" for italicized and bolded style
                commands, i.e. `\emph`, `\textit`, and `\textbf`.
                This means that one  will see something like:

                    `\emph{text here}` --> `text here`

        Default value:


            let g:vimtex_syntax_conceal = {
                        \ 'accents': 1,
                        \ 'cites': 1,
                        \ 'fancy': 1,
                        \ 'greek': 1,
                        \ 'math_bounds': 1,
                        \ 'math_delimiters': 1,
                        \ 'math_fracs': 1,
                        \ 'math_super_sub': 1,
                        \ 'math_symbols': 1,
                        \ 'sections': 0,
                        \ 'styles': 1,
                        \}

    *g:vimtex_syntax_conceal_disable*
        This option allows to disable all conceal features at once.
        For more fine  tuned control,
                see |g:vimtex_syntax_conceal|
        For more info, see  |vimtex-syntax-conceal|.
        Default value: 0

    *g:vimtex_syntax_conceal_cites*
        A simple dictionary to control how citation conceal should work. It has
        three keys:

            type
                Specify the type of concealment. There are two options, and the
                difference is best explained by example:

                    Value       LaTeX             Concealed
                    -----       -----             ---------
                    `'icon'`      `\cite{Knuth1981}`  `üìñ`
                    `'brackets'`  `\cite{Knuth1981}`  `[Knuth1981]`

            icon
                Specify an icon for `icon` conceal. This must be a single (possibly
                multibyte) character.

            verbose
                Specify how much to conceal in bracket mode (`type` set to `'bracket'`).
                The following table shows how the concealed result depending on the
                `'verbose'` value for `\cite[Figure 1]{Knuth1981}`:

                    Value    Concealed
                    -----    ---------
                    |v:true|   `[Figure 1][Knuth1981]`
                    |v:false|  `[Knuth1981]`

        Default value:


            let g:vimtex_syntax_conceal_cites = {
                        \ 'type': 'brackets',
                        \ 'icon': 'üìñ',
                        \ 'verbose': v:true,
                        \}


    *g:vimtex_syntax_custom_cmds*
        A list of "simple" commands for which to apply custom styling.
        Each command is expected to be of the following type:
            ¬ø\cmdname[optional]{argument}¬ø
        ‰∏çËÉΩÂ§ÑÁêÜÈùûcommandÁöÑÂ≠óÁ¨¶‰∏≤

        Each element in the list must be a dictionary with the following keys:

            name
                Default: Undefined (REQUIRED)
                The command to highlight (`cmdname`).
                This is also for defining the  syntax group names.

            cmdre

                Default: Undefined
                If this is defined,
                    then it is used instead of `name` for matching the  `cmdname` part.
                    It is interpreted as a regular expression with "very  magic"
                `get(l:cfg, 'cmdre', l:cfg.name)`

            mathmode
                Default: |v:false|
                If true,
                    then the command is a math mode command.

            conceal
                Default: |v:false|
                If true,
                    the `\cmdname` part and delimiters `{` and `}` are concealed.

            concealchar
                Default: Undefined
                Specify a conceal character for the `\cmdname` part.
                With this, one can  easily create simple rules to display e.g. `\R` as `‚Ñù` (see config
                example below).

            opt
                Default: |v:true|
                If true,
                    assumes `\cmdname` can be followed by an `[optional]` group.

            optconceal
                Default: Same as `conceal` key
                If true, the option group `[optional]` is concealed.

            arg
                Default: |v:true|
                If true,
                    assumes `\cmdname` can be followed by an `{argument}` group.

            argstyle
                Default: Undefined.
                Can be set to  apply styling to the command argument.
                The following are  currently supported:
                    * `bold`
                    * `ital`
                    * `under`
                    * `boldital`
                    * `boldunder`
                    * `italunder`
                    * `bolditalunder`

            argspell
                Default: |v:true|
                Specify this as |v:false| or 0 to disable spell checking of the command  argument.

            arggreedy
                Default: |v:false|
                If |v:true| or 1,
                the syntax rule will "eat" as many arguments as  possible:
                    `\cmdname[opt]{arg1}{arg2}...{argn}`

            nextgroup
                Default: Undefined
                This is a string that,
                    if defined and
                    not empty,
                        specifies  a comma-separated list of possible next syntax groups.

            hlgroup
                Default: Undefined
                A string that can be used to indicate the target highlight group of the command (`\cmdname`).

        In the following list :
                let g:vimtex_syntax_custom_cmds = [
                            \ {'name': 'vct'      , 'mathmode': 1  , 'argstyle': 'bold'}            ,
                            \ {'name': 'R'        , 'mathmode': 1  , 'concealchar': '‚Ñù'}            ,
                            \ {'name': 'mathnote' , 'mathmode': 1  , 'nextgroup': 'texMathTextArg'} ,
                            \ {'name': 'nospell'  , 'argspell': 0} ,
                            \]

            The first shows
            how to use bolded style on a custom vector macro such as `\vct{v}`.

            The  second example shows how to conceal `\R` with `‚Ñù`.
            The third example shows
                how one may use the `nextgroup` key,

            the fourth shows how to define
                a command whose argument shoult not be spell checked.



        Default value: []

    *g:vimtex_syntax_nested*
        A dictionary for configuring nested syntaxes.
        The following keys are  available for configuration:

            aliases
                Holds a dictionary of aliases,
                such as mapping `C` to `c`. This is
                useful e.g. because the Vim syntax files are case sensitive.

            ignored
                Holds a dictionary of ignore lists for each language.
                This is useful to
                ignore some groups that may conflict in e.g.
                the `\begin{...}` or
                    `\end{...}` part of the nested syntax regions.

        Default value:
            let g:vimtex_syntax_nested = {
                        \ 'aliases' : {
                        \   'C' : 'c',
                        \   'csharp' : 'cs',
                        \ },
                        \ 'ignored' : {
                        \   'sh' : ['shSpecial'],
                        \   'bash' : ['shSpecial'],
                        \   'cs' : [
                        \     'csBraces',
                        \   ],
                        \   'python' : [
                        \     'pythonEscape',
                        \     'pythonBEscape',
                        \     'pythonBytesEscape',
                        \   ],
                        \   'java' : [
                        \     'javaError',
                        \   ],
                        \   'haskell' : [
                        \     'hsVarSym',
                        \   ],
                        \ }
                        \}

    *g:vimtex_syntax_nospell_comments*
        Set to 1 to disable spell checking in comments.

        Default value: 0

    *g:vimtex_syntax_packages*
        A dictionary for package specific syntax configuration.
        Each key represent
        a single package and the values are themselves configuration dictionaries.
        All packages share the following options:

            `load`  Specify when to load the package syntax addon.
                0 = disable this syntax package
                1 = enable this syntax package if it is detected (DEFAULT)
                ÊúâÊó∂Ë¶ÅcompileÂêéÊâçdetectÂà∞
                2 = always enable this syntax package

        The following is a list of the available packages and, if applicable,
        their  configuration keys or where they deviate from the above specified defaults.

            amsmath
                `load`  is 2 by default

            amssymb
            array
            asymptote

            babel
                `conceal`  whether to enable conceal; enabled by default

            beamer
            biblatex
            booktabs
            breqn
            cases
            circuitikz
            cleveref
            comment
            csquotes
            dot2texi
            geometry
            glossaries_extra
            glossaries
            gnuplottex
            hyperref
                `conceal`  whether to enable conceal; enabled by default
            ieeetrantools
            listings
            luacode
            markdown
            mathtools
            mhequ
            minted
            moreverb
            natbib
            pdfpages
            pgfplots
            pythontex
            siunitx
            subfile
            tabularx
            tcolorbox
            tikz
            todonotes
            url
            varioref
            wiki



------------------------------------------------------------------------------
SYNTAX CONCEAL                                          *vimtex-syntax-conceal*

VimTeX utilizes the |syn-conceal| feature of Vim to allow displaying commands
like `\alpha` as `Œ±`. That is, various elements/commands can be concealed or
substituted with a unicode symbol.

This feature is mostly enabled by default.
Various types of concealments can be enabled/disabled with |g:vimtex_syntax_conceal|.
The entire feature can be fully disabled with |g:vimtex_syntax_conceal_disable|.

For conceals to work properly,
one must set the option 'conceallevel' to 2.
It is also good to be aware of the 'concealcursor' option.

It is very important to Not all fonts are suitable for this feature.
That is, for this feature to work well, you should install and use a font that
includes unicode characters.
For Vim or Neovim in a terminal,
this means you  must configure your terminal to use such a font.
here is a list of some possibly useful links:

* https://www.programmingfonts.org/
  * A convenient site to test different "programming" fonts. Not always easy
    to see if the unicode support is good,
    but at least you can see examples  of how they look.

* https://wiki.archlinux.org/index.php/Fonts
  * The Arch Wiki is famous for being useful,
  * and it does not fail.
  * But it is rather technical and of course refers to Arch Linux packages.
  * It may still  be a good source of knowledge and inspiration.

* https://www.binarytides.com/gorgeous-looking-fonts-ubuntu-linux/
  * This is a blog post on how to install some modern/good looking/better
    fonts on a Ubuntu system.
* https://github.com/cormullion/juliamono
  * This is the font that I personally use (2021-03-24, @lervag).

------------------------------------------------------------------------------
SYNTAX CORE SPECIFICATION                                  *vimtex-syntax-core*

As it is relatively common for some users to customize their colorschemes,
it  is useful to describe some of the underlying "philosophy" of the syntax rules.
Note that, for the following information to be useful, the reader should have
at least some basic understanding of how to customize their colorschemes and
syntax highlighting.
The best resources to learn about this are:

  iii) https://github.com/lervag/vimtex/wiki/Syntax
       This wiki page gives an example of how to customize and fine-tune
       syntax highlighting of TeX and BibTeX files.
  iv)  |usr_44|  "Your own syntax highlighted" (ADVANCED)

The main philosophy of the VimTeX syntax plugin is to keep things simple,
structured, and consistent. There is a small set of primitive syntax elements
whose highlighting rules are linked to conventional highlight groups (see
|group-name|). More specialized syntax elements are then linked to
a corresponding primitive syntax element. This allows a user to change the
highlighting of primitives with the effect that corresponding elements are
automatically also updated. It is also possible to override specialized groups
to link them to other conventional groups or set colors directly. This gives
a high degree of flexibility with regards to customizing colorschemes for
LaTeX files. See |vimtex-syntax-reference| for tables of the most important
syntax groups with examples and descriptions.

Most of LaTeX syntax
is based around the macro expansion where forms
are of the type `\name` + `[optional group(s)]` + `{argument group(s)}`,
where there  can often (not always)
be white spaces and
newlines between  the elements.
An argument group
can often consist of other top level elements,
but not always.

Further,
since LaTeX is designed to have very strong support for typing mathematical equations,
there are several ways to start math mode,
e.g. `$ ...  $`, `$$ ...  $$`,  `\( ...  \)`,  `\[ ...  \]`,
and `\begin{equation}` matched with `\end{equation}`.
Within math mode,
    there's a different subset of commands available,
    and it is common to want a slightly different highlighting of the math mode regions.

VimTeX's syntax script
is implemented to support these basic structures
as well as a large set of more specific commands and
elements.
The more specific rules define groups whose names are are more specific,
and it is usually possible to ¬ødefine custom highlighting of specific commands¬ø and
argument groups.

Finally, it is useful to explain the naming scheme of specialized groups. The
general idea can be described as follows.

      `texCmd{type}`
      `tex{type}Opt`
      `tex{type}Arg`
          A lot of LaTeX macros and commands are specified specifically with
        a given number of optional and real arguments.
        They may also specify what  those arguments are.
        In most cases,
        the highlighting of `texCmd{type}` is  linked to `texCmd` and
        the highlighting of `tex{type}Opt` and
        `tex{type}Arg` are respectively linked to `texOpt` and `texArg`.

        An  example of this scheme is `texCmdAuthor`, `texAuthorOpt`, and
        `texAuthorArg` for `\author[...]{...}`.

          Often,
          but not always,
          `texCmd{name}` is coupled with `tex{name}*`  groups.
          For example, `\include{...}` wants a file argument. The command is
            matched as `texCmdInput`,
            but it is followed by a `texFileArg` argument  group.

      `tex{type}Zone`
        Some commands open specific syntax regions that have different rules.
        Math  mode is a good example. Math mode is highlighted differently,
        and the  syntax regions are name `texMathZone*`.
        The `tex{type}Zone`s may typically  contain their own (sub)sets of syntax groups that are only matched within
        the specific region.
        Another example is the inclusion of nested syntax  highlighting with e.g.
        the `minted` or `listings` packages.

      `tex{type}{element}`
        Some regions or commands include other types of elements, e.g. parameters
        like in `\def\name #1` where `#1` is matched as `texDefParm`.
        For  completeness: `\def` is matched as `texCmdDef` and `\name` is matched as  `texDefArgName`.

------------------------------------------------------------------------------
SYNTAX PACKAGE SPECIFICATION                           *vimtex-syntax-packages*

VimTeX provides several package specific syntax addons that provide richer syntax highlighting.
These are built around the same principles as explained in |vimtex-syntax-core|.

The syntax improvements for a specific package
are by default loaded only  if that package is detected in the current document (as explained in |vimtex-package-detection|).
This generally works well
when a document is compiled,
but VimTeX may fail to detect packages for new documents or
documents that are ¬ønot compiled¬ø.
It is therefore possible to configure that
individual syntax packages should always load.
One may also disable individual syntax packages.
See |g:vimtex_syntax_packages| for a full list of which  syntax addons exist and
how to configure them.

------------------------------------------------------------------------------
SYNTAX GROUP REFERENCE                                *vimtex-syntax-reference*

The following is a reference of the main syntax groups and its default
highlighting,
as well as one or more examples of what it matches.
Most of the  primitive groups are linked to conventional syntax groups as listed in
|group-name|.
In the examples,
capital letters are used to indicate which  parts are matched by the current group.
For even more details, please refer to  the code itself:
    * Core elements: The `vimtex#syntax#core#init_highlights()` function in the
      file `autoload/vimtex/syntax/core.vim` specifies the default highlighting of
      the core groups.
    * Package specific groups and elements are defined in the package specific
      scripts: `autoload/vimtex/syntax/p/*.vim`.

Note:
*  There are also other groups  available. See the source files for the full lists.
* The following lists might not be always completely up to date.

Table 1: A list of groups that are only primitive link targets.~

    GROUP                DEFAULT
    ----------------------------------------------------------------------------
    texCmdType           Type
    texError             Error
    texParm              Special
    texZone              PreCondit
    texSymbol            SpecialChar

Table 2: A list of the most common normal LaTeX groups.~

    GROUP                DEFAULT      EXAMPLE
    ----------------------------------------------------------------------------
    texComment           Comment      % COMMENT
    texCommentTodo       Todo         % TODO
    texDelim             Delimiter    {, }, [, and ]
    texCmd               Statement    \CMD
    texOpt               Identifier   \cmd[OPT]
    texOptSep            NormalNC     [a, b] (commas)
    texOptEqual          texSymbol    [a=b]
    texArg               Include      \cmd[...]{ARG}
    texSpecialChar       SpecialChar  \S, \P, \$, \;, ...
    texCmdInput          texCmd       \INPUT
                                        \INCLUDE
                                        \INCLUDEONLY
                                        \INCLUDEGRAPHICS
    texCmdBib            texCmd       \BIBLIOGRAPHY
                                        \BIBLIOGRAPHYSTYLE
    texCmdClass          texCmd       \DOCUMENTCLASS
    texCmdPackage        texCmd       \USEPACKAGE
                                        \REQUIREPACKAGE
    texFileOpt           texOpt       \includegraphics[PACKAGE OPTIONS]
                                        \documentclass[CLASS OPTIONS]
    texFileArg           texArg       \input{FILE}
                                        \include{FILE}
                                        \includegraphics[...]{FILE}
                                        \bibliographystyle{FILE}
                                        \documentclass[...]{CLASS}
    texFilesOpt          texFileOpt   \usepackage[PACKAGE OPTIONS]
                                        \RequirePackage[PACKAGE OPTIONS]
    texFilesArg          texFileArg   \includeonly{FILE1, FILE2}
                                        \bibliography{FILE1, FILE2}
                                        \usepackage[...]{PACKAGE1, PACKAGE2}
                                        \RequirePackage[...]{PACKAGE1, PACKAGE2}
    texCmdTitle          texCmd       \TITLE
    texTitleArg          Underlined   \title{MAIN TITLE}
    texCmdAuthor         texCmd       \AUTHOR
    texAuthorOpt         texOpt       \author[OPT]
    texAuthorArg         NONE         \author[...]{AUTHOR LIST}
    texCmdPart           texCmd       \(SUB*)SECTION
    texPartArgTitle      String       \(sub*)section{TITLE}
    texCmdEnv            texCmd       \BEGIN; \END
    texEnvArgName        PreCondit    \begin{ENVNAME}
    texCmdRef            texCmd       \CITE; \LABEL
    texRefArg            Special      \cite{REFERENCE}; \label{REF}
    texE3Variable        texCmd       \G_MYFILE_NAME_STR
    texE3Constant        texE3Variable
                                        \C_MYFILE_NAME_STR
    texE3Function        texCmdType   \STR_NEW:n
    texE3Type            texParm      \str_new:N
    texCmdParbox         texCmd       \PARBOX[p][h][i]{w}{c}
    texBoxOptPosVal      texSymbol    \parbox[P][h][i]{w}{c}
                                        \begin{minipage}[P][h][i]{w}
    texBoxOptIPosVal     texBoxOptPosVal
                                        \parbox[p][h][I]{w}{c}
                                        \begin{minipage}[p][h][I]{w}

Table 3: A list of math mode groups.~

    GROUP                    DEFAULT        EXAMPLE
    ----------------------------------------------------------------------------
    texMathZone              Special        \( HERE \); \[ HERE \]

    texMathZoneEnv           texMathZone    \begin{menv}  HERE \end{menv}
    texMathZoneEnvStarred    texMathZone    \begin{menv*} HERE \end{menv¬ø*¬ø}

    texMathZoneX             texMathZone    $ HERE $
    texMathZoneXX            texMathZone    $$ HERE $$

    texMathZoneEnsured       texMathZone    \ensuremath{HERE}

    texCmdMathEnv            texCmdEnv      \BEGIN; \END (for math environments)
    texMathEnvArgName        Delimiter      \begin{EQUATION}
    texCmdMath               texCmd         \ENSUREMATH
    texMathDelim             Type           \LVERT
    texMathDelimMod          texMathDelim   \LEFT\lvert \RIGHT\rvert

    texMathOper              Operator       Basic operators   `+-=/`
    texMathSuperSub          texMathOper    Sub and super operators  ¬ø^¬ø ¬ø_¬ø

    texMathError             texError       Unmatched region endings

Table 4: A list of other important groups.~

    GROUP                DEFAULT         EXAMPLE
    ----------------------------------------------------------------------------
    texLength            Number          Length units, e.g. "4 cm". Only when
                                        contained e.g. in option groups.
    texLigature          texSymbol       --; ---; ``; ''; ,,
    texCmdAccent         texCmd          \"{a}
    texCmdLigature       texSpecialChar  \ss; \ae
    texCmdSpaceCodeChar  Special         Catcodes. For more info, see:
                                        https://en.wikibooks.org/wiki/TeX/catcode
    texCmdTodo           Todo            \TODOSOMETHING
    texCmdVerb           texCmd          \VERB

    texVerbZoneInline    texZone         \verb+VERB TEXT+
    texVerbZone          texZone         \begin{verbatim} VERB TEXT \end{verbatim}

    texCmdDef            texCmdNew       \DEF
    texDefArgName        texArgNew       \def\NAME
    texDefParm           texParm         \def\name #1
    texCmdItem           texCmd          \item



==============================================================================
SYNTAX CHECKING (LINTING)                                       *vimtex-lint*

    VimTeX provides syntax checking (linting) for TeX and BibTeX files through
    three compilers: `lacheck` [1], `chktex` [2], and `biber` [3].
    These may be  activated with the |:compiler| command,
    see |compiler-select|. A selected
    compiler may then be used e.g. with |:make| or |:lmake|.

    It is possible to use more automatic linting through
    dedicated plugins.
    For  more information, see |vimtex-af-linting|.

    Associated settings:
    * |g:vimtex_lint_chktex_parameters|
    * |g:vimtex_lint_chktex_ignore_warnings|

    ------------------------------------------------------------------------------

    A common workflow is to utilize the |location-list| with |:lmake|:

    - To lint the currently open TeX file with `lacheck`, run
        `:compiler lacheck|lmake`
    - To lint the currently open TeX file with `chktex`, run
        `:compiler chktex|lmake`
    - To lint the currently open BibTeX file with `biber`, run
        `:compiler bibertool|lmake`

    After linting,
    the compiler or
    linter messages are added to the location list.
    This list may be displayed in the location-list window with |:lwindow|,
    and one may jump between
    the entries with |:lN| and |:lp|.
    To automatically open the location-list window after linting is finished,
    one may add the following to one's |vimrc|:


    augroup VimTeX
        autocmd!
        autocmd QuickFixCmdPost lmake lwindow
    augroup END

    For convenience, one may also define a command for linting for each file type
    and add an autocmd to automatically lint on save. The following gives an
    example for `bibertool` and BibTeX, but one may of course do the same with
    `lacheck` and/or `chktex` for TeX files as well. First, add the following to
    `~/.vim/after/ftplugin/bib.vim`:


    command! -buffer -bang Lint compiler bibertool | lmake<bang>

    Then, add to `~/.vim/after/ftplugin/bib.vim`:


    augroup VimTeX
        autocmd!
        autocmd BufWrite <buffer=abuf> compiler bibertool | lmake!
    augroup END

    If one minds that Vim becomes unresponsive while linting, then one may utilize
    plugins like |vim-dispatch| [4], |AsyncRun| [5] or |tasks.vim| [6]. With
    `vim-dispatch`, one may replace the `:lmake` call with `:Make`. This
    may conflict with the listing of compilation errors, since `:Make` from
    `vim-dispatch` uses the quickfix window. `tasks.vim` provide `:LMake` which
    allows one to use the location list. For `AsyncRun`, one may define a cstom
    `:Make` command with:


    command! -bang -nargs=* -complete=file Make
            \ AsyncRun<bang> -auto=make -program=make

    The quickfix window that lists the linter errors and warnings can then be
    opened by |:cwindow| and they can be jumped to by |:cN| respectively |:cp|.

    Often, a syntax error in a BibTeX file is due to a missing comma after an
    entry. One may define a command to automatically add such missing commas, e.g.
    by adding the following lines in `~/.vim/after/ftplugin/bib.vim`:


    command! -buffer -range=% -bar AddMissingCommas keeppatterns
            \ <line1>,<line2>substitute:\v([}"])(\s*\n)+(\s*\a+\s*\=):\1,\2\3:giep

    To call this automatically after saving a BibTeX file, add the following
    autocommand inside a proper autocommand group (e.g. `augroup VimTeX` as
    suggested above) in `~/.vim/after/ftplugin/bib.vim`:


    autocmd BufWrite <buffer> exe
            \ 'normal! m`' | silent AddMissingCommas | silent! exe 'normal! g``'

    Finally, for more full-fledged linting in Vim, see the plug-ins mentioned in
    |vimtex-and-friends|.

    [1] https://ctan.org/pkg/lacheck
    [2] https://www.nongnu.org/chktex/
    [3] https://github.com/plk/biber
    [4] https://github.com/tpope/vim-dispatch
    [5] https://github.com/skywind3000/asyncrun.vim
    [6] https://github.com/mg979/tasks.vim

==============================================================================
GRAMMAR CHECKING                                               *vimtex-grammar*

VimTeX provides several compilers for grammar checking TeX files through
the |compiler-select| feature in Vim.
A compiler may be activated with the |:compiler| command
(see |vimtex-lint| above for some more tips on how to use this feature).
The selected compiler may then be used e.g.
    with |:make| or |:lmake|.
As an example,
one may do the following to use the |location-list| with a given checker:

    :compiler {checker}|lmake

The following is a list of the available checkers:

  textidote~

  vlty~

  style-check~


Other possibilities for grammar and language checking are:
    * The LTeX project:
             a grammar and spell checking tool available as a language  server.
             See |vimtex-af-lsp| for more info.

    * Angry Reviewer:
         An off-line vim plugin for the AngryReviewer service that
        provides style suggestions for academic and scientific text in the quickfix list.
    https://github.com/anufrievroman/vim-angry-reviewer

------------------------------------------------------------------------------
TEXTIDOTE                                            *vimtex-grammar-textidote*

The `textidote` compiler is a VimTeX wrapper over TeXtidote [1]. TeXtidote is
a correction tool for LaTeX documents to check grammar, style, and perform
spell checking.

Configuration of the wrapper is controlled by the Vim dictionary
|g:vimtex_grammar_textidote|. In particular, it is important to specify the
`jar` key to the path of the executable jar file `textidote.jar`. Please note
that if one installs `textidote` with a package manager e.g. in some common
Linux distributions, the `.jar` file might be missing. If so, it should be
possible to download it manually from [1]. However, before one does that, it
can be smart to check the top lines of the installed executable, as it may be
a simple Bash script wrapper.

[1]: https://sylvainhalle.github.io/textidote/

------------------------------------------------------------------------------
VLTY                                                      *vimtex-grammar-vlty*

The `vlty` compiler uses the Python package `YaLafi` [1] for extracting the
plain text and combines this with the proofreading software
`LanguageTool` [2]. The name `vlty` comes from VimTeX + LanguageTool + YaLafi.

In order to use `vlty`, you need local installations of both components. An
archive of `LanguageTool` can be downloaded from [3]. After uncompressing at
a suitable place, the path to it is specified as shown below. On a system like
`Arch Linux`, `LanguageTool` may also be installed with:


  sudo pacman -S languagetool

`YaLafi` itself can be installed with:


  pip install --user yalafi

Configuration is controlled by the Vim dictionary |g:vimtex_grammar_vlty|.
As a minimal example, one could write in |vimrc|:


  let g:vimtex_grammar_vlty = {'lt_directory': 'path/to/LanguageTool'}
  set spelllang=en_gb

The given directory has to contain the `LanguageTool` software, including for
instance the file `languagetool-server.jar`. If instead `LanguageTool` is
installed through a package manager as mentioned above, one could write:


  let g:vimtex_grammar_vlty = {'lt_command': 'languagetool'}
  set spelllang=en_gb

Calling `:compiler vlty` will raise an error message if some component cannot
be found.

Spell checking with `LanguageTool` is only enabled if a country code is
      specified in |'spelllang'|.

[1] https://github.com/matze-dd/YaLafi
[2] https://www.languagetool.org
[3] https://www.languagetool.org/download/



DIY_again
DIY_2  vim:filetype=help:syntax=help:
