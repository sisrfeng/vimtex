==============================================================================
FOLDING                                                        *vimtex-folding*
*vimtex-bib-folding*

        VimTeX can fold documents according to the LaTeX structure (part,
        chapter,
        section and subsection).
        Folding in tex files is turned off by default,
        but can be enabled if desired,
        either through the option |g:vimtex_fold_enabled|,
        or manually with

            set foldmethod=expr
            set foldexpr=vimtex#fold#level(v:lnum)
            set foldtext=vimtex#fold#text()

        The folding is mainly configured through the dictionary option
        |g:vimtex_fold_types|.

        The |fold-expr| method of folding is well known to be slow,
        e.g.
        for long lines and large files.
        To speed things up,
        the user may want to enable the |g:vimtex_fold_manual| option.

        An alternative is to add a dedicated plugin that improves folding speed for the slow fold methods,
        e.g.
        https://github.com/Konfekt/FastFold.

        In order to get slightly cleaner fold text, I recommend setting the global
        'fillchars' option to a single space for folds:


            set fillchars=fold:\

        Remember to include the whitespace after backslash!

        In addition,
        VimTeX also provides basic folding in bibtex files.
        This is disabled by default,
        but will be enabled if |g:vimtex_fold_enabled| is set to 1 or |v:true|.
        It can also be individually configured with |g:vimtex_fold_bib_enabled|.

        Associated settings:
                * |g:vimtex_fold_enabled|
                * |g:vimtex_fold_manual|
                * |g:vimtex_fold_levelmarker|
                * |g:vimtex_fold_types|
                * |g:vimtex_fold_types_defaults|
                * |g:vimtex_fold_bib_enabled|
                * |g:vimtex_fold_bib_max_key_width|

==============================================================================
INDENTATION                                                     *vimtex-indent*
*vimtex-bib-indent*

VimTeX provides custom indentation functions both for LaTeX documents and
for bibliography files (`.bib` files).

Associated settings:
* |g:vimtex_indent_enabled|
* |g:vimtex_indent_bib_enabled|
* |g:vimtex_indent_delims|
* |g:vimtex_indent_ignored_envs|
* |g:vimtex_indent_lists|
* |g:vimtex_indent_on_ampersands|
* |g:vimtex_indent_tikz_commands|

==============================================================================
SYNTAX HIGHLIGHTING                                             *vimtex-syntax*

    - VimTeX provides a core syntax plugin combined with package specific addons.
        The syntax plugin aims to be
                consistent
                structured
                efficient.

        The package specific addons are generally only loaded when applicable.

            - LaTeX is a macro expansion language
            - it is impossible to write a fully correct syntax parser without running the `tex` compiler itself.
            - VimTeX aims to
                        be pragmatic
                        provide a best-effort syntax highlighting - a d trade off between simplicity and completeness.

            There will probably always be situations where the parser will fail,
            and in some cases it may be hard to "recover".
                    It is therefore possible to manually activate a severely reduced syntax zone


                                % VimTeX: SynIgnore on
                                \catcode`\$=11
                                $
                                \catcode`\$=3
                                % VimTeX: SynIgnore off

            The above LaTeX code will `look plain`,
            but OK with VimTeX.
            The directive is matched case insensitive,

            Overleaf's magic comment [0] is also supported similarly as the `SynIgnore`  method described above, i.e.:


                                %%begin novalidate
                                \catcode`\$=11
                                $
                                \catcode`\$=3
                                %%end novalidate

            The VimTeX syntax plugin is loosely based on Dr Chip's syntax plugin for LaTeX which
            is shipped by default with Vim and neovim (|ft-tex-syntax|) [1].
            There are several major differences that users may want to be aware of:

                    * VimTeX syntax use different names for almost all syntax groups.
                    * VimTeX syntax does `not support syntax based folding`.
                    * VimTeX syntax does not lint `@` in commands, e.g. `\@cmd` (you should know
                        what you are doing).

    [0]: https://www.overleaf.com/learn/how-to/Code_Check
    [1]: http://www.drchip.org/astronaut/vim/index.html#SYNTAX_TEX

    Associated settings:
            * |g:vimtex_syntax_enabled|
            * |g:vimtex_syntax_custom_cmds|
            * |g:vimtex_syntax_conceal|
            * |g:vimtex_syntax_conceal_cites|
            * |g:vimtex_syntax_conceal_disable|
            * |g:vimtex_syntax_nested|
            * |g:vimtex_syntax_packages|

    syntax conceal~
    *vimtex-syntax-conceal*

            VimTeX utilizes the |syn-conceal| feature of Vim to allow displaying commands like `\alpha` as `Î±`.
            That is,
            various elements/commands can be concealed or substituted with a unicode symbol.

            This feature is mostly enabled by default.
            Various types of concealments can be enabled/disabled with |g:vimtex_syntax_conceal|.
            The entire feature can be fully disabled with |g:vimtex_syntax_conceal_disable|.

            For conceals to work properly,
            one must set the option 'conceallevel' to 2.
            It is also good to be aware of the 'concealcursor' option.

            It is very important to Not all fonts are suitable for this feature.
            That is,
            for this feature to work well,
            you should install and use a font that includes unicode characters.
            For Vim or Neovim in a terminal,
                    this means you must configure your terminal to use such a font.

            here is a list of some possibly useful links:

                    * https://www.programmingfonts.org/
                        * A convenient site to test different "programming" fonts. Not always easy
                            to see if the unicode support is good, but at least you can see examples
                            of how they look.
                    * https://wiki.archlinux.org/index.php/Fonts
                        * The Arch Wiki is famous for being useful, and it does not fail. But it is
                            rather technical and of course refers to Arch Linux packages. It may still
                            be a good source of knowledge and inspiration.
                    * https://www.binarytides.com/gorgeous-looking-fonts-ubuntu-linux/
                        * This is a blog post on how to install some modern/good looking/better
                            fonts on a Ubuntu system.
                    * https://github.com/cormullion/juliamono
                        * This is the font that I personally use (2021-03-24, @lervag).

    syntax core specification~
    *vimtex-syntax-core*

            As it is relatively common for some users to customize their colorschemes,
            it is useful to describe some of the underlying "philosophy" of the syntax rules.
            For the following information to be useful,
                    the reader should have at least some basic understanding of how to customize their colorschemes and syntax highlighting.
            The best resources to learn about this are:

                i)   |usr_06|  "Using syntax highlighting" (READ THIS FIRST)
                ii)  https://gist.github.com/romainl/379904f91fa40533175dfaec4c833f2f
                         "The right way to override any highlighting if you don't want to edit
                         the colorscheme file directly"
                         This is a good resource that describes how to properly customize
                         the highlighting of syntax groups on top of a basic colorscheme.
                iii) https://github.com/lervag/vimtex/wiki/Syntax
                         This wiki page gives an example of how to customize and fine-tune
                         syntax highlighting of TeX and BibTeX files.
                iv)  |usr_44|  "Your own syntax highlighted" (ADVANCED)

            The main philosophy of the VimTeX syntax plugin is to keep things  simple,  structured,  and consistent.

            There is a small set of primitive syntax elements whose highlighting rules are linked to conventional highlight groups (see |group-name|).
            More specialized syntax elements are then linked to a corresponding primitive syntax element.
            This allows a user to change the highlighting of primitives with the effect that corresponding elements are automatically also updated.
            It is also possible to override specialized groups to link them to other conventional groups or set colors directly.
            This gives a high degree of flexibility with regards to customizing colorschemes for LaTeX files.
            See |vimtex-syntax-reference| for tables of the most important syntax groups with examples and descriptions.

            Most of LaTeX syntax is based around the macro expansion where forms are of
            the type `\name` + `[optional group(s)]` + `{argument group(s)}`, where there
            can often (not always) be white spaces and newlines between the elements. An
            argument group can often consist of other top level elements, but not always.
            Further, since LaTeX is designed to have very strong support for typing
            mathematical equations, there are several ways to start math mode, e.g.
            `$ ... $`, `$$ ... $$`, `\( ... \)`, `\[ ... \]`, and `\begin{equation}`
            matched with `\end{equation}`. Within math mode, there's a different subset of
            commands available, and it is common to want a slightly different highlighting
            of the math mode regions.

            VimTeX's syntax script is implemented to support these basic structures as
            well as a large set of more specific commands and elements. The more specific
            rules define groups whose names are are more specific, and it is usually
            possible to define custom highlighting of specific commands and argument
            groups.

            Finally, it is useful to explain the naming scheme of specialized groups. The
            general idea can be described as follows.

                `texCmd{type}`
                `tex{type}Opt`
                `tex{type}Arg`
                        A lot of LaTeX macros and commands are specified specifically with
                    a given number of optional and real arguments. They may also specify what
                    those arguments are. In most cases, the highlighting of `texCmd{type}` is
                    linked to `texCmd` and the highlighting of `tex{type}Opt` and
                    `tex{type}Arg` are respectively linked to `texOpt` and `texArg`. An
                    example of this scheme is `texCmdAuthor`, `texAuthorOpt`, and
                    `texAuthorArg` for `\author[...]{...}`.
                        Often, but not always, `texCmd{name}` is coupled with `tex{name}*`
                    groups. For example, `\include{...}` wants a file argument. The command is
                    matched as `texCmdInput`, but it is followed by a `texFileArg` argument
                    group.

                `tex{type}Zone`
                    Some commands open specific syntax regions that have different rules. Math
                    mode is a good example. Math mode is highlighted differently, and the
                    syntax regions are name `texMathZone*`. The `tex{type}Zone`s may typically
                    contain their own (sub)sets of syntax groups that are only matched within
                    the specific region. Another example is the inclusion of nested syntax
                    highlighting with e.g. the `minted` or `listings` packages.

                `tex{type}{element}`
                    Some regions or commands include other types of elements, e.g. parameters
                    like in `\def\name #1` where `#1` is matched as `texDefParm`. For
                    completeness: `\def` is matched as `texCmdDef` and `\name` is matched as
                    `texDefArgName`.


    syntax package specification~
    *vimtex-syntax-packages*

        VimTeX provides several package specific syntax addons that provide richer syntax highlighting.
        These are built around the same principles as explained in
        |vimtex-syntax-core|.

        The syntax improvements for a specific package are by default loaded only  if
                that package is detected in the current document (as explained in |vimtex-package-detection|).
        This generally works well when a document Â´is compiledÂ´,
                but VimTeX may fail to
                detect packages for new documents or documents that are not compiled.
        It is therefore possible to  configure that
                individual syntax packages should always load.

        One may also disable individual syntax packages.
        See |g:vimtex_syntax_packages| for a full list of
        which syntax addons exist and how to configure them.

    syntax group~
    *vimtex-syntax-reference*

        The following is a reference of the main syntax groups
        and its default highlighting,
        as well as one or more examples of what it matches.

        Most of the primitive groups are linked to conventional syntax groups as listed in |group-name|.
        In the examples,
                capital letters are used to indicate which
                parts are matched by the current group.
                For even more details,
                please refer to the code itself:

                        * Core elements: The `vimtex#syntax#core#init_highlights()` function in the
                            file `autoload/vimtex/syntax/core.vim` specifies the default highlighting of
                            the core groups.
                        * Package specific groups and elements are defined in the package specific
                            scripts: `autoload/vimtex/syntax/p/*.vim`.


        * This is only a reference of the main groups.
                There are also other groups available.
                See the source files for the full lists.

        * The following lists might not be always completely up to date.
                If you find inconsistencies or errors,
                please open an issue.

    group tables~

Table 1: A list of groups that are only primitive link targets.

            GROUP                DEFAULT
            -------------------------------------
            texCmdType           Type
            texError             Error
            texParm              Special
            texZone              PreCondit
            texSymbol            SpecialChar

Table 2: A list of the most common normal LaTeX groups.

    GROUP                DEFAULT      EXAMPLE
    ----------------------------------------------------------------------------
    texComment           Comment      % COMMENT
    texCommentTodo       Todo         % TODO
    texDelim             Delimiter    {, }, [, and ]
    texCmd               Statement    \CMD
    texOpt               Identifier   \cmd[OPT]
    texOptSep            NormalNC     [a, b] (commas)
    texOptEqual          texSymbol    [a=b]
    texArg               Include      \cmd[...]{ARG}
    texSpecialChar       SpecialChar  \S, \P, \$, \;, ...
    texCmdInput          texCmd       \INPUT
                                                                        \INCLUDE
                                                                        \INCLUDEONLY
                                                                        \INCLUDEGRAPHICS
    texCmdBib            texCmd       \BIBLIOGRAPHY
                                                                        \BIBLIOGRAPHYSTYLE
    texCmdClass          texCmd       \DOCUMENTCLASS
    texCmdPackage        texCmd       \USEPACKAGE
                                                                        \REQUIREPACKAGE
    texFileOpt           texOpt       \includegraphics[PACKAGE OPTIONS]
                                                                        \documentclass[CLASS OPTIONS]
    texFileArg           texArg       \input{FILE}
                                                                        \include{FILE}
                                                                        \includegraphics[...]{FILE}
                                                                        \bibliographystyle{FILE}
                                                                        \documentclass[...]{CLASS}
    texFilesOpt          texFileOpt   \usepackage[PACKAGE OPTIONS]
                                                                        \RequirePackage[PACKAGE OPTIONS]
    texFilesArg          texFileArg   \includeonly{FILE1, FILE2}
                                                                        \bibliography{FILE1, FILE2}
                                                                        \usepackage[...]{PACKAGE1, PACKAGE2}
                                                                        \RequirePackage[...]{PACKAGE1, PACKAGE2}
    texCmdTitle          texCmd       \TITLE
    texTitleArg          Underlined   \title{MAIN TITLE}
    texCmdAuthor         texCmd       \AUTHOR
    texAuthorOpt         texOpt       \author[OPT]
    texAuthorArg         NONE         \author[...]{AUTHOR LIST}
    texCmdPart           texCmd       \(SUB*)SECTION
    texPartArgTitle      String       \(sub*)section{TITLE}
    texCmdEnv            texCmd       \BEGIN; \END
    texEnvArgName        PreCondit    \begin{ENVNAME}
    texCmdRef            texCmd       \CITE; \LABEL
    texRefArg            Special      \cite{REFERENCE}; \label{REF}
    texE3Variable        texCmd       \G_MYFILE_NAME_STR
    texE3Constant        texE3Variable
                                                                        \C_MYFILE_NAME_STR
    texE3Function        texCmdType   \STR_NEW:n
    texE3Type            texParm      \str_new:N
    texCmdParbox         texCmd       \PARBOX[p][h][i]{w}{c}
    texBoxOptPosVal      texSymbol    \parbox[P][h][i]{w}{c}
                                                                        \begin{minipage}[P][h][i]{w}
    texBoxOptIPosVal     texBoxOptPosVal
                                                                        \parbox[p][h][I]{w}{c}
                                                                        \begin{minipage}[p][h][I]{w}

Table 3: A list of math mode groups.

    GROUP                    DEFAULT        EXAMPLE
    ----------------------------------------------------------------------------
    texMathZone              Special        \( HERE \); \[ HERE \]
    texMathZoneEnv           texMathZone    \begin{menv}  HERE \end{menv}
    texMathZoneEnvStarred    texMathZone    \begin{menv*} HERE \end{menv*}
    texMathZoneX             texMathZone    $ HERE $
    texMathZoneXX            texMathZone    $$ HERE $$
    texMathZoneEnsured       texMathZone    \ensuremath{HERE}
    texCmdMathEnv            texCmdEnv      \BEGIN; \END (for math environments)
    texMathEnvArgName        Delimiter      \begin{EQUATION}
    texCmdMath               texCmd         \ENSUREMATH
    texMathDelim             Type           \LVERT
    texMathDelimMod          texMathDelim   \LEFT\lvert \RIGHT\rvert
    texMathOper              Operator       Basic operators: +-=/
    texMathSuperSub          texMathOper    Sub and super operators (^, _)
    texMathError             texError       Unmatched region endings

Table 4: A list of other important groups.

    GROUP                DEFAULT         EXAMPLE
    ----------------------------------------------------------------------------
    texLength            Number          Length units, e.g. "4 cm".
                                         Only when  contained e.g. in option groups.
    texLigature          texSymbol       --; ---; ``; ''; ,,
    texCmdAccent         texCmd          \"{a}
    texCmdLigature       texSpecialChar  \ss; \ae
    texCmdSpaceCodeChar  Special         Catcodes. For more info, see:  https://en.wikibooks.org/wiki/TeX/catcode
    texCmdTodo           Todo            \TODOSOMETHING
    texCmdVerb           texCmd          \VERB
    texVerbZoneInline    texZone         \verb+VERB TEXT+
    texVerbZone          texZone         \begin{verbatim} VERB TEXT \end{verbatim}
    texCmdDef            texCmdNew       \DEF
    texDefArgName        texArgNew       \def\NAME
    texDefParm           texParm         \def\name #1
    texCmdItem           texCmd          \item

==============================================================================
NAVIGATION                                                  *vimtex-navigation*

Vim already has a lot of useful navigation related features, such as
|tags-and-searches| and |include-search|. VimTeX improves the latter feature
by setting the 'include' and 'includeexpr' options, see |vimtex-includeexpr|.

VimTeX also provides a separate table-of-content feature. This works by
parsing the LaTeX project and displaying a table of contents in a separate
window. For more info, see |vimtex-toc|.

The "engine" for collecting the table-of-content entries may also be used as
a backend for external plugins. There are sources for |denite.nvim|, |unite.vim|
and |fzf.vim| that should work well. The source code may be used as inspiration
to write custom sources or sources for other, similar plugins.

------------------------------------------------------------------------------
INCLUDE EXPRESSION                                         *vimtex-includeexpr*

VimTeX provides an advanced |includeexpr| that makes it possible to open
source files for e.g. packages and documentclasses with the |gf| command. The
implementation relies on `kpsewhich` to find the source files. Consider the
following example:


    \documentclass{article}
    \usepackage{MyLocalPackage}
    \usepackage{SomeOtherPackage,YetAnotherPackage}
    ...

With the cursor on the documentclass name `article` or one of the package
names, |gf| will take you to the TeX source files (typically `.cls` file for
documentclass and `.sty` files for packages).

------------------------------------------------------------------------------
TABLE OF CONTENTS                                                  *vimtex-toc*

|vimtex-toc| displays a table of contents (ToC) for the current LaTeX document.
The ToC entries may be activated/jumped to with <cr> or <space>. There are
currently four different "layers" of entries:

* content  This is the main part and the "real" ToC
* todo     This shows TODOs from comments and `\todo{...}` commands
* label    This shows `\label{...}` commands
* include  This shows included files

The ToC is configured with |g:vimtex_toc_config|. One may change things from
where the ToC window is positioned to which layers to show and more. Please
read the option help for details.

The ToC parser uses a list of matchers to parse the LaTeX project for the ToC
entries. One may add custom matchers through the |g:vimtex_toc_custom_matchers|
option. The syntax of a custom matcher is specified here:
|toc_matcher_specification|.

By setting the `mode` configuration key to > 2, the separate ToC window
is not opened and most of the features mentioned here will be irrelevant.

One may force file input entries of the "include" type into the ToC through
comments with the following syntax:


    % vimtex-include: /path/to/file

The path may be absolute or relative. In the latter case, it will be relative
to the current root (as printed by |:VimtexInfo|). This will add an entry in
the ToC which makes it easy to open any file. Any file opened through the ToC
that was included in this manner will be linked to the current VimTeX project,
and thus the ToC and similar commands will be available, even if the file is
not a LaTeX file.

*vimtex-toc-custom-maps*
Some people may want to have separate mappings for different ToC contents,
e.g. one mapping to open a table of labels and todos and a different mapping
to open a table of include files. This may be easily added with custom
mappings:


    augroup vimtex_customization
        autocmd!
        autocmd FileType tex call CreateTocs()
    augroup END

    function CreateTocs()
        let g:custom_toc1 = vimtex#toc#new({
                \ 'layers' : ['label', 'todo'],
                \ 'todo_sorted' : 0,
                \ 'show_help' : 0,
                \ 'show_numbers' : 0,
                \ 'mode' : 4,
                \})
        nnoremap <silent> \ly :call g:custom_toc1.open()<cr>

        let g:custom_toc2 = vimtex#toc#new({
                \ 'layers' : ['include'],
                \ 'show_help' : 0,
                \})
        nnoremap <silent> \lY :call g:custom_toc2.open()<cr>
    endfunction

The `vimtex#toc#new` function takes a dictionary argument that may be used to
override the one main configuration (i.e. the combination of the default
values and |g:vimtex_toc_config|).

Associated settings:
* |g:vimtex_toc_enabled|
* |g:vimtex_toc_custom_matchers|
* |g:vimtex_toc_todo_labels|
* |g:vimtex_toc_show_preamble|
* |g:vimtex_toc_config|

------------------------------------------------------------------------------
DENITE AND UNITE SOURCES                                        *vimtex-denite*
*vimtex-unite*

                                                                                https://github.com/Shougo/denite.nvim
                                                                                    https://github.com/Shougo/unite.vim
|denite.nvim| is is a popular interface for many things, including outlines.
Although VimTeX includes a simple interface for a tables of contents, it also
makes sense to provide these as a source to |denite.nvim|. The source name is
simply `vimtex`.

|unite.vim| is the predecessor to |denite.nvim|. As for denite, there is a source
called `vimtex`.

If one prefers the |denite.nvim| or |unite.vim| source to the VimTeX interface,
one may override the default mapping, e.g.:


    nnoremap <localleader>lt :<c-u>Denite vimtex<cr>
    nnoremap <localleader>lt :<c-u>Unite vimtex<cr>

------------------------------------------------------------------------------
FZF INTEGRATION                                                   *vimtex-fzf*

                                                                                     https://github.com/junegunn/fzf.vim
                                                                                             https://github.com/junegunn/fzf
|fzf.vim| integrates the general-purpose command-line fuzzy finder |fzf| into vim
and neovim. Similar to the |denite.vim| and |unite.vim| source it may be used to
quickly navigate VimTeX's built-in ToC feature. To use it, just define a
mapping to `vimtex#fzf#run()` in your .vimrc, e.g.:


    nnoremap <localleader>lt :call vimtex#fzf#run()<cr>

You can also choose to only show certain entry "layers", according to this
table (see |vimtex-toc| for detailed explanation of the "layers"):

    `c`:  content
    `t`:  todo
    `l`:  label
    `i`:  include

The default behavior is to show all layers, i.e. 'ctli'. To only show
`content` and `label`s use:


    :call vimtex#fzf#run('cl')

On Windows the python package Colorama is required for colored output.
For Linux and MacOS colors should work out-of-the-box, even without Colorama.

A second argument can be passed to this function to customize the FZF options.
It should be an object containing the parameters passed to `fzf#run()`. For
example, if you've defined `g:fzf_layout`, then those options can be passed to
`vimtex#fzf#run`:


        :call vimtex#fzf#run('ctli', g:fzf_layout)

==============================================================================
COMPILER                                                      *vimtex-compiler*

VimTeX provides an interface to the following LaTeX compilers/compiler
backends:

* |vimtex-compiler-latexmk|   http://users.phys.psu.edu/~collins/software/latexmk-jcc
* |vimtex-compiler-latexrun|  https://github.com/aclements/latexrun
* |vimtex-compiler-tectonic|  https://tectonic-typesetting.github.io/
* |vimtex-compiler-arara|     https://github.com/cereda/arara
* |vimtex-compiler-generic|

The interface is implemented in a general way, which makes it relatively easy
to add new compilers.

Compilation is started and stopped with |:VimtexCompile| and |:VimtexStop|.
Although, |:VimtexStop| stopping is only relevant for continuous compilations,
and in this case, |:VimtexCompile| itself works as a toggle.  Single shot
compilation is always available through |:VimtexCompileSS|.  The default
mappings for these commands are listed here: |vimtex-default-mappings|.

It is also possible to compile a selection of the file. To do this, one may
either use the mapping, |<plug>(vimtex-compile-selected)|, or the command
|:VimtexCompileSelected|.

The compilers should respect the TeX program directive as described here:
|vimtex-tex-program|, except for |vimtex-compiler-arara|, which uses its own
set of directives and rules.

Associated commands:
* |:VimtexCompile|
* |:VimtexCompileSS|
* |:VimtexCompileSS!|
* |:VimtexCompileSelected|
* |:VimtexCompileOutput|
* |:VimtexStatus|
* |:VimtexStatus!|
* |:VimtexStop|
* |:VimtexStopAll|
* |:VimtexErrors|
* |:VimtexErrors|
* |:VimtexClean|
* |:VimtexClean!|
* |:VimtexErrors|

Associated settings:
* |g:vimtex_compiler_enabled|
* |g:vimtex_compiler_method|
* |g:vimtex_compiler_latexmk|
* |g:vimtex_compiler_latexmk_engines|
* |g:vimtex_compiler_latexrun|
* |g:vimtex_compiler_latexrun_engines|
* |g:vimtex_compiler_tectonic|
* |g:vimtex_compiler_arara|
* |g:vimtex_compiler_generic|
* |$VIMTEX_OUTPUT_DIRECTORY|

Associated events:
* |VimtexEventCompileStarted|
* |VimtexEventCompileStopped|
* |VimtexEventCompileSuccess|
* |VimtexEventCompileFailed|

------------------------------------------------------------------------------
LATEXMK                                               *vimtex-compiler-latexmk*

                                            http://users.phys.psu.edu/~collins/software/latexmk-jcc
> latexmk is a perl script for running LaTeX the correct number of times to
> resolve cross references, etc; it also runs auxiliary programs (bibtex,
> makeindex if necessary, and dvips and/or a previewer as requested).  It has
> a number of other useful capabilities, for example to start a previewer and
> then run latex whenever the source files are updated, so that the previewer
> gives an up-to-date view of the document. The script runs on both UNIX and
> MS-WINDOWS (XP, etc).

`latexmk` is a compiler backend that handles recompilation of LaTeX documents
when source files have been changed.  VimTeX uses the continuous mode by
default, but `latexmk` also allows single shot compilations.  The compiler may
be configured through the |g:vimtex_compiler_latexmk| option.

If the `callback` key is enabled (it is by default and there is really no
reason to disable it!), then compilation errors will be parsed automatically.
This is done by utilizing the tricks explained below. Although `latexmk`
can control viewers directly, VimTeX disables this feature with `-view=none`
so as to get full control of the viewers.

As stated, one may customize the `latexmk` options through
|g:vimtex_compiler_latexmk|.  However, one may also configure `latexmk`
explicitly through a global `~/.latexmkrc` file, or a project specific
`.latexmkrc` file. It is important to know that command line arguments have
priority, so one may want to use custom options if one wants to specify
particular things in a configuration file.

A particular set of options are very convenient for a good coupling between
`latexmk` and Vim: `$compiling_cmd`, `$success_cmd`, and `$failure_cmd`. These
options can be used to specify commands that are run by `latexmk` before and
after compilation. This is used by VimTeX to achieve callbacks after
compilation has finished through |vimtex#compiler#callback| with something
like this:


    $compiling_cmd = "vim --remote-expr 'vimtex#compiler#callback(1)'";
    $success_cmd = "vim --remote-expr 'vimtex#compiler#callback(2)'";
    $failure_cmd = "vim --remote-expr 'vimtex#compiler#callback(3)'";

Another neat way to use this is to use `xdotool` to change the window title of
the viewer to indicate the compilation status:


    $compiling_cmd = "xdotool search --name \"%D\" " .
                                     "set_window --name \"%D compiling...\"";
    $success_cmd   = "xdotool search --name \"%D\" " .
                                     "set_window --name \"%D OK\"";
    $failure_cmd   = "xdotool search --name \"%D\" " .
                                     "set_window --name \"%D FAILURE\"";

If you define these options similar to the above `xdotool` trick and
            still want to enable the VimTeX callbacks, then one must include
            a semicolon at the end of the `cmd` strings so that VimTeX may append
            safely to the options.

More info on `xdotool` here: https://www.semicomplete.com/projects/xdotool.

------------------------------------------------------------------------------
LATEXRUN                                             *vimtex-compiler-latexrun*

                                                                                https://github.com/aclements/latexrun
> See LaTeX run. Run latexrun.

> latexrun fits LaTeX into a modern build environment. It hides LaTeX's
> circular dependencies, surfaces errors in a standard and user-friendly
> format, and generally enables other tools to do what they do best.

`latexrun` is a compiler backend that handles recompilation of LaTeX documents
when source files have been changed. However, it is a much simpler backend,
and does not support e.g. continuous mode.

The compiler may be configured through the |g:vimtex_compiler_latexrun| option.

------------------------------------------------------------------------------
TECTONIC                                             *vimtex-compiler-tectonic*

                                                                            https://tectonic-typesetting.github.io/
 Tectonic is a
 modernized, complete, self-contained TeX/LaTeX engine, powered
 by XeTeX and TeXLive.

`tectonic` is a compiler backend that features automatic support file
downloading along with reproducible builds and full Unicode and OpenType
fonts support thanks to the power of XeTeX. It does not support continuous
compilation like |vimtex-compiler-latexmk|, so the only relevant commands are
|:VimtexCompile| to start (single shot) compilation, and
|:VimtexCompileOutput| to see the compilation output.

`tectonic` cleans up intermediate files like `.aux` and log files by default.
However, VimTeX's backend invoke it with the flags `--keep-logs` and
`--keep-synctex` which enables us to see the errors on the quickfix and it
gives us synctex support. Therefor, by default, |<plug>(vimtex-clean)|
and |:VimtexClean| clean these files.

The compiler may be configured through the |g:vimtex_compiler_tectonic| option.

------------------------------------------------------------------------------
ARARA                                                   *vimtex-compiler-arara*

                                                                                https://github.com/cereda/arara
> arara is a TeX automation tool based on rules and directives. It gives you
> subsidies to enhance your TeX experience.

`arara` is a TeX automation tool that uses rules and directives that are
defined in the preamble of a LaTeX project. The user manual can be found here:
https://ctan.uib.no/support/arara/doc/arara-manual.pdf

`arara` does not do continuous compilation, so the only relevant commands are
|:VimtexCompile| to start (single shot) compilation, and
|:VimtexCompileOutput| to see the compilation output.

The compiler may be configured through the |g:vimtex_compiler_arara| option.

It is not possible to directly specify an output directory from VimTeX.
            This is a restriction caused by the design of arara. However, since one
            may still want to specify custom output directories, VimTeX allows to
            customize the output directory through the environment variable
            |$VIMTEX_OUTPUT_DIRECTORY|.

------------------------------------------------------------------------------
GENERIC COMPILER                                      *vimtex-compiler-generic*

There are a lot of various compiler backends for LaTeX, and it is also
possible to simply use things like a Makefile. The generic backend allows to
use mostly whatever you want. However, since it is a generic implementation,
it will not be as well integrated as e.g. |vimtex-compiler-latexmk|.

Some examples of build tools that can be used with the generic backend:

* Light LaTeX Make (llmk)
    https://ctan.org/pkg/light-latex-make

    > This program is yet another build tool specific for LaTeX documents. Its
    > aim is to provide a simple way to specify a workflow of processing LaTeX
    > documents and encourage people to always explicitly show the right
    > workflow for each document.

* spix (Yet another TeX compilation tool: simple, human readable, no option,
    no magic)
    https://ctan.org/pkg/spix

    > SpiX offers a way to store information about the compilation process for
    > a tex file inside the tex file itself. Just write the commands as comments
    > in the tex files, and SpiX will extract and run those commands.
    >   Everything is stored in the tex file (so that you are not missing some
    > piece of information that is located somewhere else), in a human-readable
    > format (no need to know SpiX to understand it).

TODO: More documentation here. Examples of configuration.

==============================================================================
SYNTAX CHECKING (LINTING)                                       *vimtex-lint*

VimTeX provides syntax checking (linting) for TeX and BibTeX files through
three compilers: `lacheck` [1], `chktex` [2], and `biber` [3]. These may be
activated with the |:compiler| command, see |compiler-select|. A selected
compiler may then be used e.g. with |:make| or |:lmake|. See the following
text for some tips on how one may use this feature.

It is possible to use more automatic linting through dedicated plugins. For
more information, see |vimtex-af-linting|.

Associated settings:
* |g:vimtex_lint_chktex_parameters|
* |g:vimtex_lint_chktex_ignore_warnings|

------------------------------------------------------------------------------

A common workflow is to utilize the |location-list| with |:lmake|:

    - To lint the currently open TeX file with `lacheck`, run
        `:compiler lacheck|lmake`
    - To lint the currently open TeX file with `chktex`, run
        `:compiler chktex|lmake`
    - To lint the currently open BibTeX file with `biber`, run
        `:compiler bibertool|lmake`

After linting, the compiler or linter messages are added to the location list.
This list may be displayed in the location-list window with |:lwindow|, and
one may jump between the entries with |:lN| and |:lp|. To automatically open
the location-list window after linting is finished, one may add the following
to one's |vimrc|:


    augroup VimTeX
        autocmd!
        autocmd QuickFixCmdPost lmake lwindow
    augroup END

For convenience, one may also define a command for linting for each file type
and add an autocmd to automatically lint on save. The following gives an
example for `bibertool` and BibTeX, but one may of course do the same with
`lacheck` and/or `chktex` for TeX files as well. First, add the following to
`~/.vim/after/ftplugin/bib.vim`:


    command! -buffer -bang Lint compiler bibertool | lmake<bang>

Then, add to `~/.vim/after/ftplugin/bib.vim`:


    augroup VimTeX
        autocmd!
        autocmd BufWrite <buffer=abuf> compiler bibertool | lmake!
    augroup END

If one minds that Vim becomes unresponsive while linting, then one may utilize
plugins like |vim-dispatch| [4], |AsyncRun| [5] or |tasks.vim| [6]. With
`vim-dispatch`, one may replace the `:lmake` call with `:Make`. This
may conflict with the listing of compilation errors, since `:Make` from
`vim-dispatch` uses the quickfix window. `tasks.vim` provide `:LMake` which
allows one to use the location list. For `AsyncRun`, one may define a cstom
`:Make` command with:


    command! -bang -nargs=* -complete=file Make
                    \ AsyncRun<bang> -auto=make -program=make

The quickfix window that lists the linter errors and warnings can then be
opened by |:cwindow| and they can be jumped to by |:cN| respectively |:cp|.

Often, a syntax error in a BibTeX file is due to a missing comma after an
entry. One may define a command to automatically add such missing commas, e.g.
by adding the following lines in `~/.vim/after/ftplugin/bib.vim`:


    command! -buffer -range=% -bar AddMissingCommas keeppatterns
                \ <line1>,<line2>substitute:\v([}"])(\s*\n)+(\s*\a+\s*\=):\1,\2\3:giep

To call this automatically after saving a BibTeX file, add the following
autocommand inside a proper autocommand group (e.g. `augroup VimTeX` as
suggested above) in `~/.vim/after/ftplugin/bib.vim`:


    autocmd BufWrite <buffer> exe
                \ 'normal! m`' | silent AddMissingCommas | silent! exe 'normal! g``'

Finally, for more full-fledged linting in Vim, see the plug-ins mentioned in
|vimtex-and-friends|.

[1] https://ctan.org/pkg/lacheck
[2] https://www.nongnu.org/chktex/
[3] https://github.com/plk/biber
[4] https://github.com/tpope/vim-dispatch
[5] https://github.com/skywind3000/asyncrun.vim
[6] https://github.com/mg979/tasks.vim

==============================================================================
GRAMMAR CHECKING                                               *vimtex-grammar*

VimTeX provides several compilers for grammar checking TeX files through the
|compiler-select| feature in Vim. A compiler may be activated with the
|:compiler| command (see |vimtex-lint| above for some more tips on how to use
this feature). The selected compiler may then be used e.g. with |:make| or
|:lmake|. As an example, one may do the following to use the |location-list|
with a given checker:


        :compiler {checker}|lmake

The following is a list of the available checkers:

    textidote
        See more details here: |vimtex-grammar-textidote|

    vlty
        See more details here: |vimtex-grammar-vlty|

    style-check
        https://github.com/nspring/style-check.git

The language of the Tex file is determined by the option |'spelllang'|. This
option can be specified in ones vimrc file, but it can also be specified in
a |modeline| (see also the user manual section |21.6| for a gentle
introduction to the use of modelines).

Other possibilities for grammar and language checking are:
* The LTeX project: a grammar and spell checking tool available as a language
    server. See |vimtex-af-lsp| for more info.
* Angry Reviewer: An off-line vim plugin for the AngryReviewer service that
    provides style suggestions for academic and scientific text in the quickfix
    list.
    https://github.com/anufrievroman/vim-angry-reviewer

------------------------------------------------------------------------------
TEXTIDOTE                                            *vimtex-grammar-textidote*

The `textidote` compiler is a VimTeX wrapper over TeXtidote [1]. TeXtidote is
a correction tool for LaTeX documents to check grammar, style, and perform
spell checking.

Configuration of the wrapper is controlled by the Vim dictionary
|g:vimtex_grammar_textidote|. In particular, it is important to specify the
`jar` key to the path of the executable jar file `textidote.jar`. Please note
that if one installs `textidote` with a package manager e.g. in some common
Linux distributions, the `.jar` file might be missing. If so, it should be
possible to download it manually from [1]. However, before one does that, it
can be smart to check the top lines of the installed executable, as it may be
a simple Bash script wrapper.

[1]: https://sylvainhalle.github.io/textidote/

------------------------------------------------------------------------------
VLTY                                                      *vimtex-grammar-vlty*

The `vlty` compiler uses the Python package `YaLafi` [1] for extracting the
plain text and combines this with the proofreading software
`LanguageTool` [2]. The name `vlty` comes from VimTeX + LanguageTool + YaLafi.

In order to use `vlty`, you need local installations of both components. An
archive of `LanguageTool` can be downloaded from [3]. After uncompressing at
a suitable place, the path to it is specified as shown below. On a system like
`Arch Linux`, `LanguageTool` may also be installed with:


    sudo pacman -S languagetool

`YaLafi` itself can be installed with:


    pip install --user yalafi

Configuration is controlled by the Vim dictionary |g:vimtex_grammar_vlty|.
As a minimal example, one could write in |vimrc|:


    let g:vimtex_grammar_vlty = {'lt_directory': 'path/to/LanguageTool'}
    set spelllang=en_gb

The given directory has to contain the `LanguageTool` software, including for
instance the file `languagetool-server.jar`. If instead `LanguageTool` is
installed through a package manager as mentioned above, one could write:


    let g:vimtex_grammar_vlty = {'lt_command': 'languagetool'}
    set spelllang=en_gb

Calling `:compiler vlty` will raise an error message if some component cannot
be found.

Spell checking with `LanguageTool` is only enabled if a country code is
            specified in |'spelllang'|.

[1] https://github.com/matze-dd/YaLafi
[2] https://www.languagetool.org
[3] https://www.languagetool.org/download/

==============================================================================

DIY_2  vim:filetype=help:syntax=help:
