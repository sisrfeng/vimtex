==============================================================================
FOLDING                                                        *vimtex-folding*
*vimtex-bib-folding*

VimTeX can fold documents according to the LaTeX structure (part, chapter,
section and subsection).  Folding in tex files is turned off by default, but
can be enabled if desired, either through the option |g:vimtex_fold_enabled|,
or manually with


  set foldmethod=expr
  set foldexpr=vimtex#fold#level(v:lnum)
  set foldtext=vimtex#fold#text()

The folding is mainly configured through the dictionary option
|g:vimtex_fold_types|.

The |fold-expr| method of folding is well known to be slow, e.g. for
      long lines and large files. To speed things up, the user may want to
      enable the |g:vimtex_fold_manual| option. An alternative is to add
      a dedicated plugin that improves folding speed for the slow fold
      methods, e.g. https://github.com/Konfekt/FastFold.

In order to get slightly cleaner fold text, I recommend setting the global
'fillchars' option to a single space for folds:


  set fillchars=fold:\

Remember to include the whitespace after backslash!

In addition, VimTeX also provides basic folding in bibtex files. This is
disabled by default, but will be enabled if |g:vimtex_fold_enabled| is set to
1 or |v:true|. It can also be individually configured with
|g:vimtex_fold_bib_enabled|.

Associated settings:
* |g:vimtex_fold_enabled|
* |g:vimtex_fold_manual|
* |g:vimtex_fold_levelmarker|
* |g:vimtex_fold_types|
* |g:vimtex_fold_types_defaults|
* |g:vimtex_fold_bib_enabled|
* |g:vimtex_fold_bib_max_key_width|

==============================================================================
INDENTATION                                                     *vimtex-indent*
*vimtex-bib-indent*

VimTeX provides custom indentation functions both for LaTeX documents and
for bibliography files (`.bib` files).

Associated settings:
* |g:vimtex_indent_enabled|
* |g:vimtex_indent_bib_enabled|
* |g:vimtex_indent_delims|
* |g:vimtex_indent_ignored_envs|
* |g:vimtex_indent_lists|
* |g:vimtex_indent_on_ampersands|
* |g:vimtex_indent_tikz_commands|


==============================================================================
NAVIGATION                                                  *vimtex-navigation*

Vim already has a lot of useful navigation related features,
such as |tags-and-searches| and |include-search|.
VimTeX improves the latter feature by setting the 'include' and 'includeexpr' options,
see |vimtex-includeexpr|.

VimTeX also provides a separate table-of-content feature. This works by
parsing the LaTeX project and displaying a table of contents in a separate
window. For more info, see |vimtex-toc|.

The "engine" for collecting the table-of-content entries may also be used as
a backend for external plugins. There are sources for |denite.nvim|, |unite.vim|
and |fzf.vim| that should work well. The source code may be used as inspiration
to write custom sources or sources for other, similar plugins.

------------------------------------------------------------------------------
INCLUDE EXPRESSION                                         *vimtex-includeexpr*

VimTeX provides an advanced |includeexpr| that makes it possible to open
source files for e.g. packages and documentclasses with the |gf| command. The
implementation relies on `kpsewhich` to find the source files. Consider the
following example:


  \documentclass{article}
  \usepackage{MyLocalPackage}
  \usepackage{SomeOtherPackage,YetAnotherPackage}
  ...

With the cursor on the documentclass name `article` or one of the package
names, |gf| will take you to the TeX source files (typically `.cls` file for
documentclass and `.sty` files for packages).

------------------------------------------------------------------------------
TABLE OF CONTENTS                                                  *vimtex-toc*



    The ToC entries may be activated/jumped to with <cr> or <space>.
    There are currently four different "layers" of entries:


    * content  This is the main part and the "real" ToC
    * todo                TODOs from comments and `\todo{...}` commands
    * label               `\label{...}` commands
    * include             included files


    The ToC is configured with |g:vimtex_toc_config|.



    The ToC parser uses a list of matchers to parse the LaTeX project for the ToC entries.


    One may force file input entries of the "include" type into the ToC through
    comments with the following syntax:

            % vimtex-include: /path/to/file


    The path may be absolute or  relative.
        In the latter case,
            it will be relative to the current root (as printed by  |:VimtexInfo|).
    This will add an entry in the ToC which
        makes it easy to open any file.
    Any file opened through
        the ToC that was included in this manner will be linked to the current VimTeX project,
    and thus the ToC and
    similar commands will be available,
    even if the file is not a LaTeX file.


    *vimtex-toc-custom-maps*
    Some people may want to have separate mappings for different ToC contents,
    e.g. one mapping to open a table of labels and todos and a different mapping
    to open a table of include files. This may be easily added with custom
    mappings:

    augroup vimtex_customization
        autocmd!
        autocmd FileType tex call CreateTocs()
    augroup END

    function CreateTocs()
        let g:custom_toc1 = vimtex#toc#new({
            \ 'layers' : ['label', 'todo'],
            \ 'todo_sorted' : 0,
            \ 'show_help' : 0,
            \ 'show_numbers' : 0,
            \ 'mode' : 4,
            \})
        nnoremap <silent> \ly :call g:custom_toc1.open()<cr>

        let g:custom_toc2 = vimtex#toc#new({
            \ 'layers' : ['include'],
            \ 'show_help' : 0,
            \})
        nnoremap <silent> \lY :call g:custom_toc2.open()<cr>
    endfunction

    The `vimtex#toc#new` function takes a dictionary argument that may be used to
    override the combination of the default  values and |g:vimtex_toc_config|

    * |g:vimtex_toc_enabled|
    * |g:vimtex_toc_custom_matchers|
    * |g:vimtex_toc_todo_labels|
    * |g:vimtex_toc_show_preamble|
    * |g:vimtex_toc_config|

------------------------------------------------------------------------------
DENITE AND UNITE SOURCES                                        *vimtex-denite*
*vimtex-unite*

                                        https://github.com/Shougo/denite.nvim
                                          https://github.com/Shougo/unite.vim
|denite.nvim| is is a popular interface for many things, including outlines.
Although VimTeX includes a simple interface for a tables of contents, it also
makes sense to provide these as a source to |denite.nvim|. The source name is
simply `vimtex`.

|unite.vim| is the predecessor to |denite.nvim|. As for denite, there is a source
called `vimtex`.

If one prefers the |denite.nvim| or |unite.vim| source to the VimTeX interface,
one may override the default mapping, e.g.:


  nnoremap <localleader>lt :<c-u>Denite vimtex<cr>
  nnoremap <localleader>lt :<c-u>Unite vimtex<cr>

------------------------------------------------------------------------------
FZF INTEGRATION                                                   *vimtex-fzf*

                                           https://github.com/junegunn/fzf.vim
                                               https://github.com/junegunn/fzf
|fzf.vim| integrates the general-purpose command-line fuzzy finder |fzf| into vim
and neovim. Similar to the |denite.vim| and |unite.vim| source it may be used to
quickly navigate VimTeX's built-in ToC feature. To use it, just define a
mapping to `vimtex#fzf#run()` in your .vimrc, e.g.:


  nnoremap <localleader>lt :call vimtex#fzf#run()<cr>

You can also choose to only show certain entry "layers", according to this
table (see |vimtex-toc| for detailed explanation of the "layers"):

  `c`:  content
  `t`:  todo
  `l`:  label
  `i`:  include

The default behavior is to show all layers, i.e. 'ctli'. To only show
`content` and `label`s use:


  :call vimtex#fzf#run('cl')

On Windows the python package Colorama is required for colored output.
For Linux and MacOS colors should work out-of-the-box, even without Colorama.

A second argument can be passed to this function to customize the FZF options.
It should be an object containing the parameters passed to `fzf#run()`. For
example, if you've defined `g:fzf_layout`, then those options can be passed to
`vimtex#fzf#run`:


    :call vimtex#fzf#run('ctli', g:fzf_layout)

==============================================================================
COMPILER                                                      *vimtex-compiler*

VimTeX provides an interface to the following LaTeX compilers/compiler  backends:

    * |vimtex-compiler-latexmk|   http://users.phys.psu.edu/~collins/software/latexmk-jcc
    * |vimtex-compiler-generic|

The interface is implemented in a general way,
which makes it relatively easy  to add new compilers.

Compilation is started and
stopped with |:VimtexCompile| and |:VimtexStop|.
Although,  |:VimtexStop| stopping is only relevant for continuous compilations,
and in this case,
    |:VimtexCompile| itself works as a toggle.
Single shot compilation is always available through
    |:VimtexCompileSS|.
Default mappings:  |vimtex-default-mappings|.


It is also possible to compile a selection of the file.
To do this,
    |<plug>(vimtex-compile-selected)|,
or  command |:VimtexCompileSelected|.


The compilers should respect the TeX program directive as described here:
|vimtex-tex-program|,


Associated commands:
* |:VimtexCompile|
* |:VimtexCompileSS|
* |:VimtexCompileSS!|
* |:VimtexCompileSelected|
* |:VimtexCompileOutput|
* |:VimtexStatus|
* |:VimtexStatus!|
* |:VimtexStop|
* |:VimtexStopAll|
* |:VimtexErrors|
* |:VimtexErrors|
* |:VimtexClean|
* |:VimtexClean!|
* |:VimtexErrors|

Associated settings:
* |g:vimtex_compiler_enabled|
* |g:vimtex_compiler_method|
* |g:vimtex_compiler_latexmk|
* |g:vimtex_compiler_latexmk_engines|
* |g:vimtex_compiler_latexrun|
* |g:vimtex_compiler_latexrun_engines|
* |g:vimtex_compiler_tectonic|
* |g:vimtex_compiler_arara|
* |g:vimtex_compiler_generic|
* |$VIMTEX_OUTPUT_DIRECTORY|

Associated events:
* |VimtexEventCompileStarted|
* |VimtexEventCompileStopped|
* |VimtexEventCompileSuccess|
* |VimtexEventCompileFailed|

------------------------------------------------------------------------------
LATEXMK                                               *vimtex-compiler-latexmk*

    http://users.phys.psu.edu/~collins/software/latexmk-jcc
    > latexmk is a ¿perl¿ script for running LaTeX the correct number of times to
    > resolve cross references, etc; it also runs auxiliary programs (bibtex,
    > makeindex if necessary, and dvips and/or a previewer as requested).  It has
    > a number of other useful capabilities, for example to start a previewer and
    > then run latex whenever the source files are updated, so that the previewer
    > gives an up-to-date view of the document. The script runs on both UNIX and
    > MS-WINDOWS (XP, etc).


    `latexmk` is a compiler backend that handles recompilation of
        LaTeX documents when source files have been changed.

    VimTeX uses the continuous mode by default,
    but `latexmk` also allows single shot compilations.
    The compiler may be configured through:

        *g:vimtex_compiler_latexmk*
            The values set by the user will take precedence over the default  values.

            Default

                let g:vimtex_compiler_latexmk = {
                        \ 'build_dir'  : '',
                        \ 'callback'   : 1,
                        \ 'continuous' : 1,
                        \ 'executable' : 'latexmk',
                        \ 'hooks'      : [],
                        \ 'options'    : [
                        \   '-verbose',
                        \   '-file-line-error',
                        \   '-synctex=1',
                        \   '-interaction=nonstopmode',
                        \ ],
                        \}


            The default value shows which
            entries may be changed.
            Here the different keys are explained in more detail:


            build_dir
                This option sets the compilation build directory.
                It corresponds to the `-output-directory` option in `latexmk`.
                If the path is a relative path,
                    then it will be considered relative to the main project file.


                Although the value of this option should be a string that represents a path,
                it is also possible to make it  a function.
                This makes it possible to specify a dynamic `build_dir`:
                Example

                    let g:vimtex_compiler_latexmk = {'build_dir': {-> expand("%:t:r")}}

                        If you edit `vim test.tex`,
                            the value becomes `test`.

                If `build_dir` is specified,
                then the specified build directory is created if it does not exist.

                Note 1: This option only works with `latexmk` version 4.27 and later.
                Note 2: If `$out_dir` is added to `.latexmkrc`,
                        then the `.latexmkrc` setting  will have priority.
                Note 3: If  *$VIMTEX_OUTPUT_DIRECTORY* is defined,
                        it will have the highest  priority.

                        This environment variable allows to specify the output directory of auxiliary LaTeX files.
                        If it exists and
                        is a valid path,
                            this path will be used as the output directory (aka build directory).

                        This has two main use cases:

                            1. It allows to use a custom build directory for different projects.
                            2. It allows to specify an output directory for projects where one uses
                                compiler backends such as |arara|
                                This makes it  possible to make e.g. the |vimtex-view| feature to work as expected
                                if  output directories are used with arara.


            callback
                If enabled,
                this option tells `latexmk` to run |vimtex#compiler#callback|
                after compilation is finished.

            continuous
                If enabled, `latexmk` will run in continuous mode, i.e. with the `-pvc`
                argument. This means that the document is compiled automatically by
                `latexmk` every time a related file has been changed, until the processes
                is stopped.

                If disabled, `latexmk` will run single shot compilations.

                The events |VimtexEventCompileStarted| and |VimtexEventCompileStopped|
                            are only relevant when this option is enabled.

            executable
                The name/path to the `latexmk` executable.

            hooks
                A list of |Funcref|s. If running in continuous mode, each hook will be
                called for each line of output from `latexmk`, with that line as argument.
                E.g., to show information about the compilation run numbers, one could do
                this:


                    function! Callback(msg)
                        let l:m = matchlist(a:msg, '\vRun number (\d+) of rule ''(.*)''')
                        if !empty(l:m)
                            echomsg l:m[2] . ' (' . l:m[1] . ')'
                        endif
                    endfunction
                    let g:vimtex_compiler_latexmk = { 'hooks': [function('Callback')] }

            options
                This is a list of options that are passed to `latexmk`. The default
                options should work well for most people.

                Options like `-pdf` or `-lualatex` should NOT be added to this list.
                            These are options used to specify the LaTeX processor/engine, see
                            instead |g:vimtex_compiler_latexmk_engines|.

                Options may also be specified indirectly to `latexmk` through both
                            a global and a project specific `.latexmkrc` file. One should know,
                            though, that options specified on the command line has priority, and
                            so if one wants to override one of the above default options, then
                            one has to set this key to a list that contains the desired options.

        *g:vimtex_compiler_latexmk_engines*
            Defines a map between TeX program directive (|vimtex-tex-program|) and
            compiler engine. This is used by |vimtex-compiler-latexmk| to define the
            LaTeX program. The `_` key defines the default engine.

            If the TeX program directive is not specified within the main project
                        file, and if `$pdf_mode` is added to a project-specific `.latexmkrc`
                        file, then the compiler engine will be deduced from the value of
                        `$pdf_mode`. The supported values of `$pdf_mode` are 0 (pdflatex), 4
                        (lualatex) and 5 (xelatex). See the latexmk documentation for details.

            Default value:


                let g:vimtex_compiler_latexmk_engines = {
                        \ '_'                : '-pdf',
                        \ 'pdfdvi'           : '-pdfdvi',
                        \ 'pdfps'            : '-pdfps',
                        \ 'pdflatex'         : '-pdf',
                        \ 'luatex'           : '-lualatex',
                        \ 'lualatex'         : '-lualatex',
                        \ 'xelatex'          : '-xelatex',
                        \ 'context (pdftex)' : '-pdf -pdflatex=texexec',
                        \ 'context (luatex)' : '-pdf -pdflatex=context',
                        \ 'context (xetex)'  : '-pdf -pdflatex=''texexec --xtx''',
                        \}

        *g:vimtex_compiler_enabled*
            Use this option to disable/enable the `compiler` interface, see |vimtex-compiler|.

            Default value: 1

        *g:vimtex_compiler_silent*
            Set this to 1 or |v:true| to silence the compiler messages during start,
            stop, and callbacks.

            Default: 0

        *g:vimtex_compiler_method*
            Set the compiler method. Available choices are:

                Value      Documentation              Configuration
                `latexmk`    |vimtex-compiler-latexmk|    |g:vimtex_compiler_latexmk|
                `generic`    |vimtex-compiler-generic|    |g:vimtex_compiler_generic|

            Default value: 'latexmk'

    If the `callback` key is enabled (it is by default and there is really no
    reason to disable it!), then compilation errors will be parsed automatically.
    This is done by utilizing the tricks explained below. Although `latexmk`
    can control viewers directly, VimTeX disables this feature with `-view=none`
    so as to get full control of the viewers.

    As stated, one may customize the `latexmk` options through
    |g:vimtex_compiler_latexmk|.  However, one may also configure `latexmk`
    explicitly through a global `~/.latexmkrc` file, or a project specific
    `.latexmkrc` file. It is important to know that command line arguments have
    priority, so one may want to use custom options if one wants to specify
    particular things in a configuration file.

    A particular set of options are very convenient for a good coupling between
    `latexmk` and Vim: `$compiling_cmd`, `$success_cmd`, and `$failure_cmd`. These
    options can be used to specify commands that are run by `latexmk` before and
    after compilation. This is used by VimTeX to achieve callbacks after
    compilation has finished through |vimtex#compiler#callback| with something
    like this:


    $compiling_cmd = "vim --remote-expr 'vimtex#compiler#callback(1)'";
    $success_cmd = "vim --remote-expr 'vimtex#compiler#callback(2)'";
    $failure_cmd = "vim --remote-expr 'vimtex#compiler#callback(3)'";

    Another neat way to use this is to use `xdotool` to change the window title of
    the viewer to indicate the compilation status:


    $compiling_cmd = "xdotool search --name \"%D\" " .
                    "set_window --name \"%D compiling...\"";
    $success_cmd   = "xdotool search --name \"%D\" " .
                    "set_window --name \"%D OK\"";
    $failure_cmd   = "xdotool search --name \"%D\" " .
                    "set_window --name \"%D FAILURE\"";

    If you define these options similar to the above `xdotool` trick and
        still want to enable the VimTeX callbacks, then one must include
        a semicolon at the end of the `cmd` strings so that VimTeX may append
        safely to the options.

    More info on `xdotool` here: https://www.semicomplete.com/projects/xdotool.


------------------------------------------------------------------------------
GENERIC COMPILER                                      *vimtex-compiler-generic*

There are a lot of various compiler backends for LaTeX, and it is also
possible to simply use things like a Makefile. The generic backend allows to
use mostly whatever you want. However, since it is a generic implementation,
it will not be as well integrated as e.g. |vimtex-compiler-latexmk|.

Some examples of build tools that can be used with the generic backend:

* Light LaTeX Make (llmk)
  https://ctan.org/pkg/light-latex-make

  > This program is yet another build tool specific for LaTeX documents. Its
  > aim is to provide a simple way to specify a workflow of processing LaTeX
  > documents and encourage people to always explicitly show the right
  > workflow for each document.

* spix (Yet another TeX compilation tool: simple, human readable, no option,
  no magic)
  https://ctan.org/pkg/spix

  > SpiX offers a way to store information about the compilation process for
  > a tex file inside the tex file itself. Just write the commands as comments
  > in the tex files, and SpiX will extract and run those commands.
  >   Everything is stored in the tex file (so that you are not missing some
  > piece of information that is located somewhere else), in a human-readable
  > format (no need to know SpiX to understand it).

TODO: More documentation here. Examples of configuration.

==============================================================================
VIEW                                                              *vimtex-view*

    VimTeX provides the command |:VimtexView| to open the output PDF in a desired
    viewer specified by |g:vimtex_view_method|. The command is mapped to
    `<localleader>lv` by default. The supported viewers are described in
    |vimtex-view-configuration|, which also explains how to configure them.

    Many viewers support synctex for navigating between the PDF and the source tex
    file. If possible, |:VimtexView| will perform forward search when the viewer
    is opened. See |vimtex-synctex| for more details.

    Associated settings:
    * |g:vimtex_view_enabled|
    * |g:vimtex_view_automatic|
    * |g:vimtex_view_forward_search_on_start|
    * |g:vimtex_view_use_temp_files|
    * |g:vimtex_view_method|
    * |g:vimtex_view_general_options|
    * |g:vimtex_view_general_viewer|

    Associated events:
    * |VimtexEventView|
    * |VimtexEventViewReverse|

------------------------------------------------------------------------------
VIEWER CONFIGURATION                                *vimtex-view-configuration*

    For the predefined viewers,
    forward search with synctex should
        usually work without any further configuration.

    Inverse search requires configuration on the viewer side in most cases.


    *g:vimtex_view_method*
        Default: `general`

        Possible values:
            * `'general'`
                    A generic viewer is used  (e.g.  `xdg-open` on Linux)
                    It is An ¿customizable¿ interface.
                    one may often specify options to enable forward search.
            * `'mupdf'`
            * `'zathura'`    |vimtex-view-zathura|


    各种选项
        *g:vimtex_view_enabled*
            Use this option to disable/enable the VimTeX viewer interface.
            Default value: 1

        *g:vimtex_view_automatic*
            源码:
                function! s:viewer.compiler_callback(outfile) dict abort " {{{1
                    if !g:vimtex_view_automatic
                    \ || has_key(self, 'started_through_callback')
                        return
                    el
                        call self._start(a:outfile)
                        let self.started_through_callback = 1
                    endif

                endfunction

            If enabled:
                if compilation `continuous` mode is disabled.
                ||  `continuous` mode and `callback` is enabled,

                the viewer should open automatically
                Work for the following compilers: latexmk

            Default value: 1

        *g:vimtex_view_use_temp_files*
            For the `latexmk` compiler backend.
            Default value: 0  (disable)

            if  1或2
                opening and updating the pdf viewer
                will have to be  done by
                    the user
                    or  VimTeX.
                Not by latexmk

            After `f'{status}'`(我写的) compilations,
                Copy output files
                    to a corresponding set of files
                    with  `_vimtex` prepended to the name.
                and then update.

            1:  status = successful
            2:  status = all


            If one combines this with the callback feature,
                this may provide a very convenient way to avoid
                that ¿the pdf becomes unavailable during compilation¿,
                as it will only update the viewer output file
                after a successful compilation.

            This works best with the 'mupdf' and 'zathura' viewers.
            These viewers should update automatically
                after the pdf is updated.

            For general viewers,
                one has to create a callback function and
                connect it through
                the |VimtexEventCompileSuccess| event to update the viewer.


        *g:vimtex_view_forward_search_on_start*
            This option is only relevant when |g:vimtex_view_method|
            is set to  `mupdf` or `zathura`.
                |vimtex-view-mupdf|,
                |vimtex-view-zathura|.

            Default value: 1

            If disabled,
                the ¿first invocation¿ of the viewer will not
                perform a forward search to the current cursor position.

        *g:vimtex_view_reverse_search_edit_cmd*

            When working in a multi-file project,
            initiating inverse search (see |vimtex-synctex-inverse-search|)
            may require opening a file that is
            not currently open in a window.

            This option controls the command that is
            used to
            open files as a result of an inverse search.

            Examples:
                * `edit`
                * `tabedit`
                * `split`

            Default value: `edit`

        *g:vimtex_view_general_options*
            Set options for the specified general viewer,
            see |vimtex-view-general|.
            The options are parsed to substitute the following keywords:

                `@pdf`    Path to pdf file
                `@tex`    Path to tex file
                `@line`   Current line number
                `@col`    Current column number

            Default value: '@pdf'

        *g:vimtex_view_mupdf_options*
        *g:vimtex_view_zathura_options*
            Set options for mupdf (|vimtex-view-mupdf|) and Zathura
            (|vimtex-view-zathura|),
            respectively.

            Default value: ''

        *g:vimtex_view_general_viewer*
            Use generic viewer application, see |vimtex-view-general|.

            Default value:
                Linux:   `xdg-open`
                macOS:   `open`
                Windows: `SumatraPDF` or `mupdf` if available, else `start ""`

        *g:vimtex_view_zathura_check_libsynctex*
            Default value: 1

            Check on startup if Zathura is compiled with libsynctex.
            This is done by  default because Zathura on some systems
            is compiled without libsynctex
            support, in which case forward and inverse search will not work. When this
            is the case, the startup check will provide a notification to the user.

            If this option is set to 0 or |v:false|, then the check is skipped.




    The following is a list of popular PDF viewers, in alphabetic order, and how
    they can be configured to work with VimTeX.

    Evince~
                *vimtex-view-evince*
        https://wiki.gnome.org/Apps/Evince
        Evince is a document viewer for viewing multiple document formats, including
        PDFs. It comes by default with Gnome.

        Configuration:

        let g:vimtex_view_general_viewer = 'evince'


        Evince only supports synctex through DBus, which is not supported by
            VimTeX. Thus VimTeX does not support forward and inverse search with
            Evince. However, the Vim plugin `SVED` by Peter Jorgensen is reported to
            work well in combination with VimTeX. See the plugin page [0] for more
            information.

            [0]: https://github.com/peterbjorgensen/sved

    MuPDF~
             https://www.mupdf.com/
             *vimtex-view-mupdf*
        MuPDF is a very minimalistic and quick PDF viewer. It does not support synctex
        itself, but VimTeX provides both forward and inverse search by abusing
        `xdotool`. Inverse search must be used from within VimTeX with the mapping
        |<plug>(vimtex-reverse-search)| (default mapping: `'<localleader>lr'`).

        One can also use |g:vimtex_view_mupdf_send_keys| to specify a set of keys that
        is sent to MuPDF on startup.

        Configuration:

        let g:vimtex_view_method = 'mupdf'

        Associated settings:
        * |g:vimtex_view_mupdf_options|
        * |g:vimtex_view_mupdf_send_keys|

        Both forward and inverse search requires `xdotool` to work. Forward
            search will only take you to the correct page. Inverse search will take
            you to the line in Vim that corresponds to the first line of the current
            page in MuPDF.

        Viewer handling uses window title matching. If there exists another pdf
            viewer with the same name as the current project pdf file, then there
            might be conflicts, and so MuPDF might not work as expected.

    Okular~
        https://okular.kde.org/
        Okular is a very feature rich PDF viewer that supports both forward and
        inverse search.  *vimtex-view-okular*

        Configuration:

        let g:vimtex_view_general_viewer = 'okular'
        let g:vimtex_view_general_options = '--unique file:@pdf\#src:@line@tex'

        Inverse search can be set up within Okular in the settings pane under
        "Settings > Editor > Custom Text Editor" [0]. Use the viewer configuration as
        explained in |vimtex-synctex-inverse-search|.

        To perform an inverse search in Okular, do `shift + click` while browse mode
        is enabled.

        [0]: https://docs.kde.org/stable5/en/okular/okular/inverse_search.html


    qpdfview~
        https://launchpad.net/qpdfview
        qpdfview is a tabbed document viewer. It supports both forward and inverse
        search. The latter must be set up from within the viewer. Use the viewer
        configuration as explained in |vimtex-synctex-inverse-search|, but note that
        the interpolation variables should be `%1` for the filename and `%2` for the
        line number.  *vimtex-view-qpdfview*

        Configuration:

        let g:vimtex_view_general_viewer = 'qpdfview'
        let g:vimtex_view_general_options
            \ = '--unique @pdf\#src:@tex:@line:@col'

    Sioyek~
        https://sioyek.info/
        Sioyek is a PDF viewer designed for reading research papers and technical
        books.  *vimtex-view-sioyek*

        Configuration:

        let g:vimtex_view_method = 'sioyek'

        Inverse search should be automatically configured and work out of the box.
        VimTeX will try to pass options to Sioyek to automatically configure inverse
        search. This means that, in most cases, inverse search should work as expected
        without any further configuration. One may still be interested in learning how
        inverse-search configuration works, in which case one should read
        |vimtex-synctex-inverse-search|. The interpolation variables for Sioyek
        configuration are `%2` and `%1`, not `%l` and `%f`.

        Associated settings:
        * |g:vimtex_view_sioyek_exe|


    *vimtex-view-sumatrapdf*
    SumatraPDF~
    https://www.sumatrapdfreader.org/free-pdf-reader.html
    SumatraPDF is a PDF viewer for windows that is powerful, small, portable and
    starts up very fast. It supports both forward and inverse search.

    Configuration:

    let g:vimtex_view_general_viewer = 'SumatraPDF'
    let g:vimtex_view_general_options
        \ = '-reuse-instance -forward-search @tex @line @pdf'

    For convenience, the above configuration is used by default on Windows if
    `SumatraPDF` is detected as executable.

    Inverse search must be configured under `Settings --> Options` from within
    SumatraPDF. Find the section `Set inverse search command-line` in the bottom
    and use the viewer configuration as explained in
    |vimtex-synctex-inverse-search|.

    Inverse search is activated with a double click in the PDF file.

    There is a known issue with VimTeX + SumatraPDF when you use `xelatex`,
        where the pdf file in SumatraPDF is not refreshed after compilation.
        A workaround was found and posted by @Whitebeard0 here:
        https://github.com/lervag/vimtex/issues/1410#issuecomment-506143020

    *vimtex-view-zathura*
    Zathura~
    https://pwmt.org/projects/zathura/
    Zathura is, like MuPDF, a very fast and minimalistic viewer. Compared to
    MuPDF, it allows more user configuration. Zathura has full support for both
    forward and inverse search. Zathura should be straightforward to install and
    use on Linux with Xorg. It should also work on macOS, but users may want to
    read |vimtex-faq-zathura-macos|.

    Configuration:

    let g:vimtex_view_method = 'zathura'

    VimTeX will try to start Zathura with the `-x` argument to specify the inverse
    search options automatically. This means that, in most cases, inverse search
    should work as expected without any further configuration. One may still be
    interested in learning how inverse-search configuration works, in which case
    one should read |vimtex-synctex-inverse-search|. The interpolation variables
    for Zathura configuration are `%{line}` and `%{input}`, not `%l` and `%f`.

    Associated settings:
    * |g:vimtex_view_zathura_check_libsynctex|
    * |g:vimtex_view_zathura_options|

    Forward search requires `xdotool` to work properly. That is, `xdotool`
        is used to avoid duplicate Zathura instances when the
        |:VimtexView| command is issued. This is a more severe restriction
        if the |g:vimtex_view_forward_search_on_start| option is disabled.

    Recent versions of Zathura no longer ensures synctex support. This has
        resulted in synctex support being dropped on some platforms, e.g. on
        OpenSUSE, cf. https://github.com/lervag/vimtex/issues/384. A workaround
        is to build Zathura from source manually.

    Viewer handling uses window title matching. If there exists another pdf
        viewer with the same name as the current project pdf file, then there
        might be conflicts. In particular, this might affect forward/inverse
        searching for Zathura.



------------------------------------------------------------------------------
SYNCTEX SUPPORT                                                *vimtex-synctex*

    Synctex is a tool that enables synchronization of the text editor position and
    the pdf viewer position.
    The tool may be used to
    add mappings in vim to go to the current position in the compiled pdf document (forward search),
    and also to go from a specific position in the pdf file to the corresponding position in vim (inverse search).


    To make synctex work, it must be enabled. VimTeX enables this by default by
    passing `-synctex=1` on the command line, unless the user overrides the
    option (see the `option` key for |g:vimtex_compiler_latexmk| or
    |g:vimtex_compiler_latexrun|).

    Alternatively, for |vimtex-compiler-latexmk|, one can put this in ones
    `~/.latexmkrc` file:


    $pdflatex = 'pdflatex -synctex=1 %O %S';

    Forward search~
    *vimtex-synctex-forward-search*
    For supported viewers, |:VimtexView| (<localleader>lv) will issue a forward
    search if the viewer is already opened. The forward search will take you to
    the page or position in the viewer that corresponds to the current line in
    your vim session. See |g:vimtex_view_method| for a list of supported viewers.

    Inverse search~
    *vimtex-synctex-inverse-search*
    *vimtex-synctex-backward-search*
    *:VimtexInverseSearch*

    In supported viewers, one may set up inverse search, which allows one to go
    directly from a selected line in the viewer (typically by double clicking with
    the mouse or something similar) to the corresponding line inside the Vim
    instance. This is sometimes also called backward search or reverse search.

    Inverse search relies on communicating with Vim/neovim from the viewer by use
    of shell commands executed by the viewer. It is usually configured within the
    specific viewer through an option named something like "inverse search
    command-line". The option specifies the necessary shell command to perform the
    inverse search. The target line and file are provided as interpolation
    variables. In the following, we use `%l` and `%f`, but the interpolation
    variables may be named different in some viewers (e.g. |vimtex-view-skim|).
    A typical shell command looks like this:


    vim --remote-silent +%l %f

    Luckily, VimTeX provides a convenience function to simplify the viewer
    configuration. The command `VimtexInverseSearch` will execute
    |vimtex#view#inverse_search| with the target line and file as arguments inside
    the desired Vim or neovim instance. The latter function is the one that really
    performs the inverse search. The combined effect is a more robust experience
    that will seamlessly handle multiple Vim or neovim instances and multiple
    VimTeX instances. The user doesn't need to worry about passing the correct
    servernames.

    To configure with `VimtexInverseSearch`, use:


    vim -v --not-a-term -T dumb -c "VimtexInverseSearch %l '%f'"

    nvim --headless -c "VimtexInverseSearch %l '%f'"

    On Windows, the above commands may lead to an annoying command window "popup".
    This may be avoided, or at least reduced, with the following variants:


    cmd /c start /min "" vim -v --not-a-term -T dumb -c "VimtexInverseSearch %l '%f'"

    cmd /c start /min "" nvim --headless -c "VimtexInverseSearch %l '%f'"

    Vim users should be aware that one may need to ensure that the server is
        really running, see |vimtex-clientserver|.

==============================================================================
LATEX DOCUMENTATION                                           *vimtex-latexdoc*

VimTeX provides the command |:VimtexDocPackage| to open documentation for packages and
documentclasses.
The command is mapped to `K`


For simplicity,
the standard method provided by
VimTeX is to look up documentation online through
http://texdoc.net/.
However,
this can be customized with the option |g:vimtex_doc_handlers|.
The option allows much flexibility for advanced users.
For users that want to use a local `texdoc` installation as the main method:
    let g:vimtex_doc_handlers = ['vimtex#doc#handlers#texdoc']

See https://www.tug.org/texdoc/doc/texdoc.pdf for more info about `texdoc`.

In the following,
I list some relevant online and
offline alternatives for accessing LaTeX documentation.
These methods are not integrated into VimTeX and
are listed purely for the readers convenience.


------------------------------------------------------------------------------
ONLINE                                                 *vimtex-latexdoc-online*

I recommend the LaTeX Wikibook [0] as a good source of documentation for
LaTeX. One should also know about the Comprehensive TeX Archive Network, or
CTAN [1], which is the central place for all kinds of material around TeX.
The long-existing unofficial LaTeX(2e) reference manual (latexref) can be
found online at [2].

[0]: https://en.wikibooks.org/wiki/LaTeX
[1]: https://ctan.org/
[2]: https://latexref.xyz/

------------------------------------------------------------------------------
OFFLINE                                               *vimtex-latexdoc-offline*

One may use a more dedicated offline documentation system.
On macOS,
    Dash [0] is a non-free but high-quality system.
On Linux,
    one may use Zeal [1] or dasht [2],
    both of which
        access the Dash documentation sets.
        Zeal should also work well on Windows.


The above systems may be accessed from vim through
dash.vim [3],
zeavim.vim [4] or vim-dasht [5],
respectively.
Other alternative vim plugins include investigate.vim [6].


The unofficial LaTeX(2e)
reference manual (latexref)
should also be mentioned,
since it may be easily downloaded in various formats from [7].


[0]: https://kapeli.com/dash
[1]: https://zealdocs.org/
[2]: https://github.com/sunaku/dasht
[3]: https://github.com/rizzatti/dash.vim
[4]: https://github.com/sunaku/vim-dasht
[5]: https://github.com/KabbAmine/zeavim.vim
[6]: https://github.com/keith/investigate.vim
[7]: https://latexref.xyz/dev/

==============================================================================
CONTEXT MENU                                              *vimtex-context-menu*

VimTeX provides the command |:VimtexContextMenu| to open a context menu for
the item below the cursor. The menu allows various actions relevant to the
current context. It is mapped by default to `<localleader>la`.

The available contexts are listed below.

Associated settings:
* |g:vimtex_context_pdf_viewer|

------------------------------------------------------------------------------
CITATION CONTEXT                                      *vimtex-context-citation*

When the cursor is over a citations, e.g. `\textcite{myRef}`, then the context
menu will show choices relevant to the current citation entry. This works by
parsing the relevant `bib` file for metadata and providing menu actions
depending on the available metadata. The actions are only displayed when they
are relevant.

Possible actions:

  Edit entry~
    Go to the entry location in the relevant bib file.

  Show entry~
    Show the registered data for the current entry.

  Open PDF~
    Open associated PDF file from the `file` key of the bib entry.

  Open DOI~
    Open associated DOI url from the `doi` key of the bib entry.

  Open URL~
    Open associated URL from the `url` key of the bib entry.

==============================================================================
CODE STRUCTURE                                                    *vimtex-code*

/home/wf/.local/share/nvim/PL/TeX/Documentation.txt

------------------------------------------------------------------------------
API REFERENCE                                                 *vimtex-code-api*

    This is an API reference of the most useful VimTeX functions
    available to  users for customization.

    This API is currently a work in progress!

    *vimtex#compiler#callback*
        Utility function to be used as a compiler callback function.
        Takes a single argument,
        which is the compiler status:

            1: Compilation cycle has started
            2: Compilation complete - Success
            3: Compilation complete - Failed


        The function does several useful things based on  the status,
        such as running the
        |VimtexEventCompiling|,
        |VimtexEventCompileFailed| and |VimtexEventCompileSuccess| events.


    *vimtex#syntax#in_mathzone*
        if the position is inside a math zone.
            Returns 1

        If called without arguments,
            the position refers to the cursor position.
        Else
            must be called with two arguments:
                the line number and
                column number.

    *vimtex#view#inverse_search*
        Utility function for reverse search from pdf viewer.
        Takes two arguments:
            the line number and
            a filename.
        The function runs the event |VimtexEventViewReverse| at the end,
            which allows more user customization.


    *vimtex#env#get_inner*
    *vimtex#env#get_outer*
    *vimtex#env#get_all*
        Functions that return the surrounding inner or
        outer environment,
        or all surrounding environments.
        The return value is a dictionary with the following keys:

        `name`  : The environment name
        `open`  : The environment opening delimiter object
        `close` : The environment closing delimiter object

        The delimiter objects contain information about the locations and
        arguments of the corresponding `\begin{...}[...]` and `\end{...}` commands.

==============================================================================
FAQ                                                                *vimtex-faq*

This is a section of some frequently asked questions whose answers may be of  help to users.

Contents:
* |vimtex-faq-windows|
* |vimtex-faq-neovim|
* |vimtex-faq-slow-matchparen|
* |vimtex-faq-surround|
* |vimtex-faq-isfname|
* |vimtex-faq-texmfhome|
* |vimtex-faq-wsl|
* |vimtex-faq-zathura-macos|

------------------------------------------------------------------------------
*vimtex-faq-windows*
Q: Does VimTeX support Windows?
A: Yes. But there are some "gotchas":

   * It is highly recommended to install a dedicated Perl distribution (e.g.
     Strawberry Perl [0]).
   * Several features rely on having executables like `latexmk` and
     `SumatraPDF.exe` "readily available" by adding the parent directories of
     the executables to your PATH environment variable. See [1] for more info
     on PATH.
   * VimTeX does not work well with the 'shell' setting set to Windows
     PowerShell. It is therefore recommended to use the default 'shell'
     settings. See [2] for more information.

   [0]: https://strawberryperl.com/
   [1]: https://www.rapidee.com/en/path-variable
   [2]: https://github.com/lervag/vimtex/issues/1507

------------------------------------------------------------------------------
*vimtex-faq-neovim*
Q: Does VimTeX support neovim?
A: Yes, but some people may complain that VimTeX is not written in Lua!

------------------------------------------------------------------------------
*vimtex-faq-slow-matchparen*
Q: Why is matching parens so slow?
A: Because it is complicated and requires some expensive searches for matching
   parentheses. It uses the syntax information to skip commented delimiters,
   which is expensive. You can tune the timeout and stopline parameters for
   the searches with |g:vimtex_delim_timeout| and |g:vimtex_delim_stopline|,
   which may help. If it is still too slow, you can also try to use
   vim-matchup [0], see also |vimtex-af-enhanced-matchparen|.

   [0]: https://github.com/andymass/vim-matchup

------------------------------------------------------------------------------
*vimtex-faq-surround*
Q: VimTeX provides `dse`, `dsc`, `cse`, and `csc`.  These seem to be inspired by
   |surround.vim|.  Does VimTeX also provide the corresponding `yse` and `ysc`?
A: The mentioned mappings are indeed inspired by |surround.vim|.  However,
   VimTeX does not provide `ys<text-object>e` and `ys<text-object>c`.  If you use
   |surround.vim|, then the asked for mappings may be easily added if one adds
   the following lines to `~/.vim/after/ftplugin/tex.vim` or any other
   `ftplugin/tex.vim` in your |runtimepath|:


  let b:surround_{char2nr('e')}
      \ = "\\begin{\1environment: \1}\n\t\r\n\\end{\1\1}"
  let b:surround_{char2nr('c')} = "\\\1command: \1{\r}"

   Remark also that, by default, |surround.vim| already provides the mapping
   `ys<text-object>l` for encapsulating a text object in a LaTeX environment.

   Please also read the section |vimtex-af-surround|!

   An alternative is to use `vim-sandwich` (see |sandwich.txt| or
         https://github.com/machakann/vim-sandwich), which has built-in
         support for LaTeX-specific surroundings.

------------------------------------------------------------------------------
*vimtex-faq-isfname*
Q: Vim throws error when jumping to file with |gf|.
A: This might be due to the |isfname| setting, which by default contains `{,}`
   on windows.  |isfname| is a global option, and can therefore not be set by
   VimTeX.  Suggested solution is to remove `{,}` from |isfname| by:


  set isfname-={,}


------------------------------------------------------------------------------
*vimtex-faq-texmfhome*
Q: How can I change `TEXMFHOME`?
A: If you change `TEXMFHOME` in your `.bashrc` or `.zshrc` or similar and use `gvim`
   invoked from the desktop environment (from menus, hotkeys, etc.), gvim does
   not know about the new value of `TEXMFHOME`. The reason for this is that
   `vim` invokes shells (e.g. with `!` or `system()`) as non-interactive and
   non-login shell, which means `.bashrc` or `.zshrc` are not read.  If you
   start `gvim` from an interactive shell which has read `.bashrc` or `.zshrc,
   `gvim` inherits these values and therefore they are consistent.

   One can make the invoked shells interactive by setting |shellcmdflag| to
   "-ic".  If you want to keep them non-interactive, you can create an
   additional shell startup file where you keep your environment variables:

   1. If bash is your default shell, create e.g. the file `.bashenv` containing
      your customized `TEXMFHOME` variable and add `$BASH_ENV=$HOME/.bashenv` to
      `$MYVIMRC` and `source $HOME/.bashenv` to `.bashrc` [0].

   2. If zsh is your default shell, use `.zshenv` for customizing `TEXMFHOME`.
      This file is always read by zsh. Nothing has to be added to `$MYVIMRC` [1].

   For more information on how to correctly set environment variables, see e.g.
   the SO answer by @Rmano [2].

   [0]: https://www.gnu.org/software/bash/manual/html_node/Bash-Startup-Files.html
   [1]: http://zsh.sourceforge.net/Intro/intro_3.html
   [2]: http://askubuntu.com/a/356973/16395

------------------------------------------------------------------------------
*vimtex-faq-wsl*
Q: Does VimTeX support WSL (Windows Subsystem for Linux)?
A: For the moment, rudimentarily, as follows: To set up the viewer, install
   mupdf [0] or SumatraPDF [1], add the executable to %PATH%, say by Rapidee
   [2]. In your vimrc, the lines

   if has('win32') || (has('unix') && exists('$WSLENV'))
     if executable('mupdf.exe')
       let g:vimtex_view_general_viewer = 'mupdf.exe'
     elseif executable('SumatraPDF.exe')
       let g:vimtex_view_general_viewer = 'SumatraPDF.exe'
     endif
   endif

   make |:VimtexView| work under Windows, and also under WSL, provided that at
   least Windows 10 version 1903 [3] of WSL is installed, the current work dir
   and the compiled file is contained in the Linux home directory $HOME (as
   opposed to %USERPROFILE% in Windows).

   However, client-server capabilities seem to be disabled (perhaps because
   WSL does not have built-in support for X11) and therefore inverse search
   does not work. Neither does forward search work: While SumatraPDF opens
   fine the PDF file in \\wsl$\<DistroName>\..., the forward search in
   SumatraPDF itself does not find the corresponding source file in
   \\wsl$\<DistroName>\....

   To set up a LaTeX distribution, while reusing that of Windows as proposed
   at [4] seems efficient, in practice accessing files on mounted NTFS drives
   from WSL is slow, even more so under WSL2 [5]. Therefore a full TeXLive
   installation is recommended.

   If only basic functionality is required, then a minimal TeXLive
   installation, such as TinyTeX [6] or a minimal set of packages to compile
   LaTeX as provided by your distribution, is an option, as discussed at [7].
   For example, under openSUSE, it suffices to install the packages
   texlive-scheme-basic, texlive-latexmk, texlive-collection-fontsrecommended.

   [0]: https://chocolatey.org/packages/mupdf
   [1]: https://chocolatey.org/packages/sumatrapdf
   [2]: https://www.rapidee.com/en/about
   [3]: https://devblogs.microsoft.com/commandline/whats-new-for-wsl-in-windows-10-version-1903/
   [4]: https://github.com/lervag/vimtex/issues/1380
   [5]: https://vxlabs.com/2019/12/06/wsl2-io-measurements/
   [6]: https://yihui.org/tinytex/
   [7]: https://tex.stackexchange.com/questions/397174/minimal-texlive-installation

------------------------------------------------------------------------------
*vimtex-faq-zathura-macos*
Q: Does Zathura + VimTeX work on macOS?
A: Yes, it should work.  The following recipe has been reported to work [0].
   The steps assume the user has installed and knows how to use Homebrew [1].

   1. Zathura needs `dbus` to work properly. Install it with the following:
      `brew install dbus`, or, if it is already installed, reinstall (this
      seems necessary for some unknown reason): `brew reinstall dbus`

   2. Add this to your `.bashrc` or `.zshrc` file (or similar):


      export DBUS_SESSION_BUS_ADDRESS="unix:path=$DBUS_LAUNCHD_SESSION_BUS_SOCKET"

   3. Changed the value of `<auth><\auth>` in
      `/usr/local/opt/dbus/share/dbus-1/session.conf` from `EXTERNAL` to
      `DBUS_COOKIE_SHA1`.

   4. Run `brew services start dbus`

   5. Now install Zathura (most recent version, aka HEAD):


      brew tap zegervdv/zathura
      brew install girara --HEAD
      brew install zathura --HEAD --with-synctex
      brew install zathura-pdf-poppler
      mkdir -p $(brew --prefix zathura)/lib/zathura
      ln -s $(brew --prefix zathura-pdf-poppler)/libpdf-poppler.dylib $(brew --prefix zathura)/lib/zathura/libpdf-poppler.dylib

   6. Reboot and enjoy.

   If you already had Zathura and girara installed and things don't
         work, then first uninstall and unlink them and try to follow the
         above steps from step 1.

   [0]: https://github.com/lervag/vimtex/issues/1737#issuecomment-759953886
   [1]: https://brew.sh

==============================================================================
TROUBLESHOOTING                                       *vimtex-troubleshooting*

Here are some pitfalls that one may experience if one of these assumptions are
broken:

- Completion may not work properly for exotic file encodings, such as for
  UTF-16LE (see https://github.com/lervag/vimtex/issues/615)

With different operating systems and different plugin configurations, there
are a few things that must be considered for system interoperability. A number
of common problems and suggested solutions are included in the following
troubleshooting section.

Problem: Continuous compilation seems to hang~

Upon starting continuous compilation the status bar indicates "VimTeX:
Compiler started in continuous mode", but the compilation never terminates and
the quickfix window does not load.

Tips:
1. Ensure that a latexmk process and a Perl process have started. If they have
   not been started, then these two programs may not accessible given your
   operating system's PATH environment variable.
2. Ensure that the option `-interaction=nonstopmode` is provided to latexmk.
   This is done by default by VimTeX, unless the user provides custom options
   through |g:vimtex_compiler_latexmk| (see the `option` key). In the latter
   case, the user must ensure that the said option is also provided.

Problem: Text objects on Windows~

In Windows, environment text object commands, like `vae` and `vie`, do not
select the entire body of the environment. More specifically, given:


    \begin{someenv}
      some content
    \end{someenv}

The command `dae` results in:


    }

and `die` results in:


    \begin{someenv}
      t
    \end{someenv}

Solution: It seems that vim for Windows comes with some options set by default
in the vimrc file. One of these has been reported to be `:behave mswin` (see
|:behave|) which, among other things, sets the 'selection' option to
"exclusive". This can be ameliorated by pursuing one of two options:

  1) Add `:behave xterm` to your vimrc file.
  2) Add `:set selection=inclusive` to your vimrc file.

See also: https://github.com/lervag/vimtex/issues/408

Problem: Typing <Tab> or <C-n> causes Vim to hang before making a completion~

VimTeX may be scanning included files with `kpsewhich` while collecting
completion candidates for keyword completion. Try disabling this feature by
setting |g:vimtex_include_search_enabled| to 0 in your |vimrc|:


    let g:vimtex_include_search_enabled = 0

Plugins like |supertab| [0], which often maps the |i_<Tab>| key, will
      typically use keyword completion "behind the scenes" to gather
      completion candidates.

      [0]: https://github.com/ervandew/supertab

==============================================================================
CREDITS                                                        *vimtex-credits*

VimTeX is developed by Karl Yngve Lervåg <karl.yngve@gmail.com>, and is
distributed under the MIT license.  The project is available as a Git
repository: https://github.com/lervag/vimtex.

VimTeX was developed from scratch, but much of the code has been based on
LaTeX-Box: https://github.com/LaTeX-Box-Team/LaTeX-Box.  LaTeX-suite was also
an inspiration: http://vim-latex.sourceforge.net/.

I do accept donations through PayPal (see link below [0]). As there are no
expenses related to VimTeX (except time), any money I receive would be spent
on coffee, beer or chocolate. These things make me happy. However, I will also
be happy if one should choose to donate to a charity instead, as there are
a lot of people in more need of money than me! Examples of charities may be
|ICCF| (the organisation that Vim specifically supports) or Medicins sans
Frontieres [1]. Feel free to let me know if you should donate to a charity due
to VimTeX, as I would be happy to hear of it.

[0]: https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=5N4MFVXN7U8NW
[1]: https://www.msf.org/

==============================================================================
DIY_again
DIY_2  vim:filetype=help:syntax=help:
